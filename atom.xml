<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yndongyong‘s blog</title>
  
  <subtitle>生命不息，学习不止！</subtitle>
  <link href="https://yndongyong.github.io/atom.xml" rel="self"/>
  
  <link href="https://yndongyong.github.io/"/>
  <updated>2023-03-04T14:30:09.450Z</updated>
  <id>https://yndongyong.github.io/</id>
  
  <author>
    <name>yndongyong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android12升级适配</title>
    <link href="https://yndongyong.github.io/2023/02/20/Android12%E9%80%82%E9%85%8D/"/>
    <id>https://yndongyong.github.io/2023/02/20/Android12%E9%80%82%E9%85%8D/</id>
    <published>2023-02-20T07:19:02.000Z</published>
    <updated>2023-03-04T14:30:09.450Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做Android12 的升级适配</p><p>主要改动的点，app&#x2F;build.gradle文件中需要将targetsdk 、compileSdkVersion都指定到31（Android12）</p><ul><li>对外暴露的组件需要export为true</li><li>有105个语法错误，主要是intent.getString的返回值是空的，语法更严格了。</li><li>微信sdk需要适配，否则微信登录分享不可用，主要是软件包可见性的问题。</li><li>软件包可见性，否则打不开对应的app，微信，qq、云闪付。涉及范围：登录、分享、支付。</li><li>定位权限，分为粗略定位和精确定位，请求精确定位时必需一起请求粗略定位，经排查正常</li><li>蓝牙权限和定位权限分离，新的三个蓝牙权限适配。这里需要明确区分android12以上还是一下，动态事情不同的权限。</li><li>pendintent适配,在 Adnroid 12 之前，默认创建一个 PendingIntent 它是可变的。所以这里指定成还是可变的避免引起问题。影响通知，应用内更新功能，桌面快捷方式功能。</li><li>修复android12上没有read_phone_state权限时获取获取连接类型奔溃的问题。模拟器上跑 java.lang.RuntimeException: Unable to create application com.tengyun.yyn.system.TravelApplication: java.lang.SecurityException: getDataNetworkTypeForSubscriber 没有readphonestate权限</li><li>修复获取网络连接性在原生系统上总是网络不可用的问题，原来对于网络的连通性判断还处理需要认证的网络情况，但是在类原生系统上，网络连通性是访问google服务器，国内连不上，总是判断为不可用。</li><li>播放器sdk播放时内部会获取getNetworkTypeForSubscriber时没有read_phone_state权限奔溃的问题。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在做Android12 的升级适配&lt;/p&gt;
&lt;p&gt;主要改动的点，app&amp;#x2F;build.gradle文件中需要将targetsdk 、compileSdkVersion都指定到31（Android12）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对外暴露的组件需要export为t</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>jenkins pipeline实战——企业级Android自动化打包</title>
    <link href="https://yndongyong.github.io/2023/02/18/jenkins-pipeline%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E7%BA%A7Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    <id>https://yndongyong.github.io/2023/02/18/jenkins-pipeline%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E7%BA%A7Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/</id>
    <published>2023-02-18T03:15:44.000Z</published>
    <updated>2023-03-26T10:07:44.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>​1. <a href="https://www.jenkins.io/zh/blog/2018/01/08/moving-from-buddybuild-for-android/">Moving from buddybuild to Jenkins for Android Developers</a> 官网jenkins for android</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在上一篇文章中已经配置好了jenkins <a href="https://yndongyong.github.io/2023/02/15/docker%E6%90%AD%E5%BB%BAJenkins-Android%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83/">docker搭建Jenkins+Android构建环境 | yndongyong‘s blog</a>，这里主要记录如何通过jenkins pipeline 构建一个满足自己需求的打包job。</p><p>目前公司的App，一次完整的打包路径为：</p><p><strong>拉取代码</strong> -&gt; <strong>修改版本名&#x2F;版本号&#x2F;flutter aar版本</strong> -&gt; <strong>打包</strong> -&gt; <strong>加固</strong> -&gt; <strong>32渠道包</strong> -&gt; <strong>64渠道包</strong>-&gt;<strong>64位测试包上传cos&#x2F;内测平台</strong>-&gt;<strong>企业微信通知</strong>-&gt;<strong>32包上传cos</strong> </p><p>产品App单次全量构建的打包时间基本在半个小时左右（主要还跑着其他服务），主要是耗时在打包和加固 这两个阶段。其中加固服务使用的第三方服务耗时不可控。</p><p>这一套ci流程对于公司的所有App基本固定，但还是经历了3个阶段，才慢慢演变到当前的脚本。</p><p>ci流程，最初的阶段是使用jenkins的自由风格，这一个阶段所有的app的打包流程配置各不相同是主要的问题。第二阶段转换为了pipeline，但是不支持从整个链路中间的的某一步骤重启的，譬如加固失败了，想要从这一步重新开始在这个阶段是不支持的，只能重头开始执行。第三个阶段，统一了公司所有app的分支管理规范，将所有App的打包流程都固化到了这一套流程上来了，支持从指定步骤重启，方便那些失败的步骤，节省构建时间，支持gradle构建缓存，增量编译。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>目前这一套ci流程，主要支持以下特性：</p><ul><li>支持指定仓库地址、指定分支</li><li>修改versionCode versionName、修改flutter aar版本号（可选）</li><li>打包：支持指定打包类型，alpha:测试;release:正式包</li><li>加固：可选，目前只有产品App需要加固，其他项目类型的app不需要加固，使用的三方加固，将32位包和64位包上传到第三方平台加固，等待加固完成之后再下载回来。</li><li>32为渠道包，其中还包括，重新签名，使用walle生成各个应用商店的渠道包。</li><li>64为渠道包，先重新签名，再使用walle生成各个应用商店的渠道包。</li><li>64位测试包上传cos&#x2F;内测平台：用于测试的包上传cos，提交到内测平台</li><li>企业微信通知：新包构建成功到企业微信群里。</li><li>32位包上传cos：将应用商店的渠道包上传cos指定目录，用于应用内更新下载地址。</li><li>支持从任一步骤重启整个流程。</li><li>gradle构建缓存从job的workspace分离出去了，所以支持清空workspace之后也能用到gradle build cache</li></ul><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>脚本编写</p><ol><li>抽取各个项目的不同点</li><li>配置参数话构建</li><li>使用声明式的pipeline</li><li>涉及的jenkinsplugin参考<a href="https://yndongyong.github.io/2023/02/15/docker%E6%90%AD%E5%BB%BAJenkins-Android%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83/">docker搭建Jenkins+Android构建环境 | yndongyong‘s blog</a>****</li></ol><p>jenkins pipeline脚本编写</p><p>算了，详细的还是看脚本吧，其中遗留着一些googleplay商店渠道包、上传fir的脚本。</p><p>测试包的文件名：<code>AKP_FILE_PREFIXX_$&#123;&quot;yyyy-MM-dd&quot;&#125;.$&#123;BUILDS_TODAY&#125;_channel.apk</code></p><p>正式包的文件名：<code>AKP_FILE_PREFIXX_VERSION_NAME.500_channel.apk</code></p><p>构建包时指定了gradle的构建缓存目录为jenkinshome&#x2F;jobname文件夹路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :app:assembleNormalRelease --project-cache-dir $__GRADLE_CACHE_PATH/$JOB_NAME</span><br></pre></td></tr></table></figure><p>每个App打包job需要改动的地方都放在了开头部分，其余都为通用逻辑.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NOTICE:配置各个App需要修改的部分 start ====================================</span></span><br><span class="line"><span class="comment">//apk名称前缀</span></span><br><span class="line">String __AKP_FILE_PREFIXX = <span class="string">&quot;appname_&quot;</span></span><br><span class="line"><span class="comment">//代码库</span></span><br><span class="line">String __GIT_REPO = <span class="string">&#x27;https://xxxxx/xxxxxx.git&#x27;</span></span><br><span class="line"><span class="comment">//jenkins git 凭据id</span></span><br><span class="line">String __GIT_CREDENTIALS_ID = <span class="string">&quot;credentials_id_name&quot;</span></span><br><span class="line"><span class="comment">//默认versionName</span></span><br><span class="line">String __VERSION_NAME = <span class="string">&quot;1.2.1&quot;</span></span><br><span class="line"><span class="comment">//默认versionCode</span></span><br><span class="line">String __VERSION_CODE = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="comment">//cos bucket</span></span><br><span class="line">String __COS_BUCKET_NAME = <span class="string">&#x27;app-bucket-xxxx&#x27;</span></span><br><span class="line"><span class="comment">//梆梆加固策略策略id</span></span><br><span class="line">__BANGBANG_ID = xxxx   </span><br><span class="line"><span class="comment">//内测平台的apitoken projectId</span></span><br><span class="line">String __FIR_API_KEY_RELEASE = <span class="string">&quot;xxxx&quot;</span>  <span class="comment">//正式apk使用的projectid</span></span><br><span class="line">String __FIR_API_KEY_DEBUG = <span class="string">&quot;xxxxx&quot;</span>  <span class="comment">// 测试包使用的projectid</span></span><br><span class="line"><span class="comment">// 内测平台 的地址</span></span><br><span class="line">__FIR_URL_ENPOINT = <span class="string">&#x27;https://xxxxx/create_android&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//渠道号</span></span><br><span class="line">String CHANNEL_LIST = <span class="string">&#x27;official,yingyongbao,huawei,xiaomi,lianxiang,vivo,oppo&#x27;</span></span><br><span class="line"><span class="comment">//企业微信的机器人</span></span><br><span class="line">String __WX_ROBOT_RELEASE_URL = <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxxxx&quot;</span> <span class="comment">//正式</span></span><br><span class="line">String __WX_ROBOT_DEBUG_URL   = <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxxxx&quot;</span> <span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//NOTICE:需要修改的部分 end ====================================</span></span><br></pre></td></tr></table></figure><p>整的pipeline脚本如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* groovylint-disable LineLength */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//NOTICE:配置各个App需要修改的部分 start ====================================</span></span><br><span class="line"><span class="comment">//apk名称前缀</span></span><br><span class="line">String __AKP_FILE_PREFIXX = <span class="string">&quot;appname_&quot;</span></span><br><span class="line"><span class="comment">//代码库</span></span><br><span class="line">String __GIT_REPO = <span class="string">&#x27;https://xxxxx/xxxxxx.git&#x27;</span></span><br><span class="line"><span class="comment">//jenkins git 凭据id</span></span><br><span class="line">String __GIT_CREDENTIALS_ID = <span class="string">&quot;credentials_id_name&quot;</span></span><br><span class="line"><span class="comment">//默认versionName</span></span><br><span class="line">String __VERSION_NAME = <span class="string">&quot;1.2.1&quot;</span></span><br><span class="line"><span class="comment">//默认versionCode</span></span><br><span class="line">String __VERSION_CODE = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="comment">//cos bucket</span></span><br><span class="line">String __COS_BUCKET_NAME = <span class="string">&#x27;app-bucket-xxxx&#x27;</span></span><br><span class="line"><span class="comment">//梆梆加固策略策略id</span></span><br><span class="line">__BANGBANG_ID = xxxx   </span><br><span class="line"><span class="comment">//内测平台的apitoken projectId</span></span><br><span class="line">String __FIR_API_KEY_RELEASE = <span class="string">&quot;xxxx&quot;</span>  <span class="comment">//正式apk使用的projectid</span></span><br><span class="line">String __FIR_API_KEY_DEBUG = <span class="string">&quot;xxxxx&quot;</span>  <span class="comment">// 测试包使用的projectid</span></span><br><span class="line"><span class="comment">// 内测平台 的地址</span></span><br><span class="line">__FIR_URL_ENPOINT = <span class="string">&#x27;https://xxxxx/create_android&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//渠道号</span></span><br><span class="line">String CHANNEL_LIST = <span class="string">&#x27;official,yingyongbao,huawei,xiaomi,lianxiang,vivo,oppo&#x27;</span></span><br><span class="line"><span class="comment">//企业微信的机器人</span></span><br><span class="line">String __WX_ROBOT_RELEASE_URL = <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxxxx&quot;</span> <span class="comment">//正式</span></span><br><span class="line">String __WX_ROBOT_DEBUG_URL   = <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxxxx&quot;</span> <span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//NOTICE:需要修改的部分 end ====================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*BUILD_TYPE_SELECT: alpha:用于测试，开启了加密各种,release:正式包*/</span></span><br><span class="line">String BUILD_TYPE_RELEASE =<span class="string">&quot;Release&quot;</span></span><br><span class="line">String BUILD_TYPE_ALPHA =<span class="string">&quot;alpha&quot;</span></span><br><span class="line">String BUILD_TYPE_DEBUG =<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//项目的本地缓存路径，将gradle构建目录分离出workspace，否则一单清理worksapce，就需要全量构建</span></span><br><span class="line">String __GRADLE_CACHE_PATH = <span class="string">&quot;/var/jenkins_home/.gradle&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调试任务使用，不跳过stage ; true：不跳过 false :跳过 </span></span><br><span class="line">Boolean __DONT_SKIP_STAGE = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        <span class="comment">// 渠道市场</span></span><br><span class="line">        string(<span class="attr">name:</span> <span class="string">&#x27;VERSION_NAME&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&quot;$__VERSION_NAME&quot;</span>, <span class="attr">description:</span> <span class="string">&#x27;build.gradle 中 versionName 字段&#x27;</span>)</span><br><span class="line">        string(<span class="attr">name:</span> <span class="string">&#x27;VERSION_CODE&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&quot;$__VERSION_CODE&quot;</span>, <span class="attr">description:</span> <span class="string">&#x27;build.gradle 中 versionCode 字段&#x27;</span>)</span><br><span class="line">        string(<span class="attr">name:</span> <span class="string">&#x27;CHANNELS&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&quot;$CHANNEL_LIST&quot;</span>, <span class="attr">description:</span> <span class="string">&#x27;应用商店渠道号&#x27;</span>)</span><br><span class="line">        choice(<span class="attr">name:</span> <span class="string">&#x27;BUILD_TYPE_SELECT&#x27;</span>, <span class="attr">choices:</span> [<span class="string">&quot;$BUILD_TYPE_RELEASE&quot;</span>,<span class="string">&quot;$BUILD_TYPE_ALPHA&quot;</span>], <span class="attr">description:</span> <span class="string">&#x27;构建类型:\nalpha:用于测试，开启了加密、混淆、sentry各种\nrelease:正式包&#x27;</span>)</span><br><span class="line">        gitParameter( <span class="attr">branchFilter:</span> <span class="string">&#x27;origin/release/.*&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&quot;origin/release/v$__VERSION_NAME&quot;</span>, <span class="attr">name:</span> <span class="string">&#x27;BUILD_GIT_BRANCH&#x27;</span>, <span class="attr">type:</span> <span class="string">&#x27;PT_BRANCH&#x27;</span>, <span class="attr">selectedValue:</span> <span class="string">&#x27;TOP&#x27;</span>, <span class="attr">sortMode:</span> <span class="string">&#x27;DESCENDING_SMART&#x27;</span>, <span class="attr">useRepository:</span> <span class="string">&quot;$__GIT_REPO&quot;</span>)</span><br><span class="line">        booleanParam(<span class="attr">name:</span> <span class="string">&#x27;IS_CLEAN_BUILD&#x27;</span>, <span class="attr">defaultValue:</span> <span class="literal">false</span>, <span class="attr">description:</span> <span class="string">&#x27;是否需要全量构建（包含clean &amp;&amp; build）,正式包默认会clean&#x27;</span>)</span><br><span class="line">        booleanParam(<span class="attr">name:</span> <span class="string">&#x27;IS_CLEAN_WORKSPACE&#x27;</span>, <span class="attr">defaultValue:</span> <span class="literal">false</span>, <span class="attr">description:</span> <span class="string">&#x27;是否需要清空WORKSPACE&#x27;</span>)</span><br><span class="line">        booleanParam(<span class="attr">name:</span> <span class="string">&#x27;IS_NEED_JIAGU&#x27;</span>, <span class="attr">defaultValue:</span> <span class="literal">true</span>, <span class="attr">description:</span> <span class="string">&#x27;包是否需要加固&#x27;</span>)</span><br><span class="line">        string(<span class="attr">name:</span> <span class="string">&#x27;FLUTTER_AAR_VERSION_NAME&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&quot;&quot;</span>, <span class="attr">description:</span> <span class="string">&#x27;flutter aar产物的版本号&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    environment &#123;</span><br><span class="line">        buildToolsPath = <span class="string">&quot;$ANDROID_HOME/build-tools/29.0.3&quot;</span></span><br><span class="line">        <span class="comment">//NOTICE:</span></span><br><span class="line">        <span class="comment">//walleLibPath = &#x27;/walle&#x27; ci环境  本地打包环境：&#x27;/sdk/walle&#x27;</span></span><br><span class="line">        walleLibPath = <span class="string">&#x27;/sdk/walle&#x27;</span></span><br><span class="line">        cosLibPath = <span class="string">&#x27;/sdk/cos&#x27;</span></span><br><span class="line">        PATH = <span class="string">&quot;$PATH:$buildToolsPath&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置各个build_type下需要用的参数</span></span><br><span class="line">        __API_KEY = getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            if [ $params.BUILD_TYPE_SELECT = $BUILD_TYPE_RELEASE ];then</span></span><br><span class="line"><span class="string">                echo &quot;$__FIR_API_KEY_RELEASE&quot;</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                echo &quot;$__FIR_API_KEY_DEBUG&quot;            </span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>)</span><br><span class="line">        <span class="comment">//debug</span></span><br><span class="line">        __BUILD_TYPE = getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            if [ $params.BUILD_TYPE_SELECT = $BUILD_TYPE_RELEASE ];then</span></span><br><span class="line"><span class="string">                echo &quot;release&quot;</span></span><br><span class="line"><span class="string">            elif [ $params.BUILD_TYPE_SELECT = $BUILD_TYPE_ALPHA ];then</span></span><br><span class="line"><span class="string">                echo &quot;alpha&quot;    </span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                echo &quot;debug&quot;            </span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//wechate notify url 企业微信打包机器人</span></span><br><span class="line">        __WEIXIN_SEND_URL = getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            if [ $params.BUILD_TYPE_SELECT = $BUILD_TYPE_RELEASE ];then</span></span><br><span class="line"><span class="string">                echo &quot;$__WX_ROBOT_RELEASE_URL&quot;</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                echo &quot;$__WX_ROBOT_DEBUG_URL&quot;            </span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//版本号</span></span><br><span class="line">        __versionNumberOfToday = VersionNumber(<span class="attr">versionNumberString:</span> <span class="string">&#x27;$&#123;BUILD_DATE_FORMATTED,&quot;yyyy-MM-dd&quot;&#125;.$&#123;BUILDS_TODAY&#125;&#x27;</span>,<span class="attr">worstResultForIncrement:</span> <span class="string">&#x27;SUCCESS&#x27;</span>);</span><br><span class="line">        NumberVersion = getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            if [ $params.BUILD_TYPE_SELECT = $BUILD_TYPE_RELEASE ];then</span></span><br><span class="line"><span class="string">                echo &quot;$&#123;params.VERSION_NAME&#125;.500&quot;</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                echo &quot;$&#123;params.VERSION_NAME&#125;.$&#123;__versionNumberOfToday&#125;&quot;            </span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写这些值，得用with函数</span></span><br><span class="line">        __CHANGE_LOG = <span class="string">&quot;&quot;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 定义项目编译完成之后的包文件文件名</span></span><br><span class="line">        <span class="comment">// arm32Apk=&quot;&quot;&quot;$&#123;sh(returnStdout: true, script: &quot;echo $WORKSPACE/$&#123;project&#125;/bin/arm32/$&#123;__AKP_FILE_PREFIXX&#125;-*.apk&quot;)&#125;&quot;&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    options &#123;</span><br><span class="line">        timestamps() <span class="comment">// 在日志中打印时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;克隆代码&#x27;</span>) &#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="comment">// wrap([$class: &#x27;BuildUser&#x27;]) &#123;</span></span><br><span class="line">                <span class="comment">//     script &#123;</span></span><br><span class="line">                <span class="comment">//         BUILD_USER = &quot;$&#123;env.BUILD_USER&#125;&quot;</span></span><br><span class="line">                <span class="comment">//     &#125;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                <span class="comment">//20-release/v1.0.0-alpha-user</span></span><br><span class="line">                buildName <span class="string">&quot;#$&#123;BUILD_NUMBER&#125;-$&#123;params.BUILD_GIT_BRANCH&#125;-$&#123;params.BUILD_TYPE_SELECT&#125;-$&#123;env.BUILD_USER&#125;&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//克隆</span></span><br><span class="line">                script&#123;</span><br><span class="line">                    <span class="keyword">if</span> (params.IS_CLEAN_WORKSPACE == <span class="literal">true</span>) &#123;</span><br><span class="line">                            cleanWs()</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">def</span> scmVars  = checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches:</span> [[<span class="attr">name:</span> <span class="string">&quot;$&#123;params.BUILD_GIT_BRANCH&#125;&quot;</span>]], <span class="attr">extensions:</span> [], <span class="attr">userRemoteConfigs:</span> [[<span class="attr">credentialsId:</span> <span class="string">&quot;$&#123;__GIT_CREDENTIALS_ID&#125;&quot;</span>, <span class="attr">url:</span> <span class="string">&quot;$&#123;__GIT_REPO&#125;&quot;</span>]]])</span><br><span class="line">                    env.GIT_COMMIT = scmVars.GIT_COMMIT</span><br><span class="line">                    env.GIT_PREVIOUS_SUCCESSFUL_COMMIT = scmVars.GIT_PREVIOUS_SUCCESSFUL_COMMIT</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;修改版本名/版本号/flutter aar版本&#x27;</span>) &#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    echo <span class="string">&#x27;环境/参数准备&#x27;</span></span><br><span class="line">                    sh(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        if [ ! -d &quot;./bin&quot; ];then</span></span><br><span class="line"><span class="string">                            mkdir bin</span></span><br><span class="line"><span class="string">                        fi</span></span><br><span class="line"><span class="string">                        if [ ! -d &quot;./bin/temp&quot; ];then</span></span><br><span class="line"><span class="string">                            mkdir bin/temp</span></span><br><span class="line"><span class="string">                        fi</span></span><br><span class="line"><span class="string">                        if [ ! -d &quot;./bin/temp32&quot; ];then</span></span><br><span class="line"><span class="string">                            mkdir bin/temp32</span></span><br><span class="line"><span class="string">                        fi</span></span><br><span class="line"><span class="string">                        if [ ! -d &quot;./bin/temp64&quot; ];then</span></span><br><span class="line"><span class="string">                            mkdir bin/temp64</span></span><br><span class="line"><span class="string">                        fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                        if [ ! -d &quot;./bin/arm32&quot; ];then</span></span><br><span class="line"><span class="string">                            mkdir bin/arm32</span></span><br><span class="line"><span class="string">                        fi</span></span><br><span class="line"><span class="string">                        if [ ! -d &quot;./bin/arm64&quot; ];then</span></span><br><span class="line"><span class="string">                            mkdir bin/arm64</span></span><br><span class="line"><span class="string">                        fi</span></span><br><span class="line"><span class="string">                        rm ./bin/*.zip</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span>) </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">def</span> oldVerserionName =getShEchoResult( <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                grep &quot;versionName&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27; &#x27; | sed -e &#x27;s/\&quot;//g&#x27;</span></span><br><span class="line"><span class="string">                                &quot;&quot;&quot;</span>)</span><br><span class="line">                    echo <span class="string">&quot;oldVerserionName:$oldVerserionName&quot;</span></span><br><span class="line">                    sh (<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        sed -i &quot;app/build.gradle&quot; -e &#x27;s/versionName &quot;$&#123;oldVerserionName&#125;&quot;/versionName &quot;$&#123;NumberVersion&#125;&quot;/g&#x27;</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">def</span> oldVersionCode =  getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                grep &quot;versionCode&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27; &#x27; | sed -e &#x27;s/\&quot;//g&#x27;</span></span><br><span class="line"><span class="string">                                &quot;&quot;&quot;</span>)</span><br><span class="line">                    echo <span class="string">&quot;oldVersionCode:$oldVersionCode&quot;</span></span><br><span class="line">                    sh (<span class="string">&quot;&quot;&quot; sed -i &quot;app/build.gradle&quot; -e &quot;s/versionCode $&#123;oldVersionCode&#125;/versionCode $&#123;params.VERSION_CODE&#125;/g&quot; &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    newVersionCode =  getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                grep &quot;versionCode&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27; &#x27; | sed -e &#x27;s/\&quot;//g&#x27;</span></span><br><span class="line"><span class="string">                                &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    newVerserionName =getShEchoResult( <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                grep &quot;versionName&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27; &#x27; | sed -e &#x27;s/\&quot;//g&#x27;</span></span><br><span class="line"><span class="string">                                &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    echo <span class="string">&quot;new versionName:$newVersionCode&quot;</span></span><br><span class="line">                    echo <span class="string">&quot;new versionCode:$newVerserionName&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> (newVerserionName != NumberVersion) &#123;</span><br><span class="line">                        error <span class="string">&#x27;修改版本名称失败&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (newVersionCode != params.VERSION_CODE) &#123;</span><br><span class="line">                        error <span class="string">&#x27;修改版本号失败&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//修改 flutter aar的版本号</span></span><br><span class="line">                    <span class="keyword">if</span>(params.FLUTTER_AAR_VERSION_NAME)&#123;</span><br><span class="line">                        <span class="keyword">def</span> oldFlutterAarVerserionName =getShEchoResult( <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                grep &quot;def flutter_aar_sdk_version&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27;=&#x27; | sed -e &#x27;s/\&quot;//g&#x27;</span></span><br><span class="line"><span class="string">                                &quot;&quot;&quot;</span>)</span><br><span class="line">                        echo <span class="string">&quot;oldFlutterAarVerserionName:$oldFlutterAarVerserionName&quot;</span></span><br><span class="line">                        <span class="keyword">if</span>(oldFlutterAarVerserionName)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(params.FLUTTER_AAR_VERSION_NAME != oldFlutterAarVerserionName)&#123;</span><br><span class="line">                                sh (<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                sed -i &quot;app/build.gradle&quot; -e &#x27;s/def flutter_aar_sdk_version = &quot;$&#123;oldFlutterAarVerserionName&#125;&quot;/def flutter_aar_sdk_version = &quot;$&#123;params.FLUTTER_AAR_VERSION_NAME&#125;&quot;/g&#x27;</span></span><br><span class="line"><span class="string">                                &quot;&quot;&quot;</span>)</span><br><span class="line">                                <span class="keyword">def</span> newlutterAarVerserionName =getShEchoResult( <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                    grep &quot;def flutter_aar_sdk_version&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27;=&#x27; | sed -e &#x27;s/\&quot;//g&#x27;</span></span><br><span class="line"><span class="string">                                    &quot;&quot;&quot;</span>)</span><br><span class="line">                                echo <span class="string">&quot;new flutter_aar_sdk_version:$newlutterAarVerserionName&quot;</span> </span><br><span class="line">                                <span class="keyword">if</span> (params.FLUTTER_AAR_VERSION_NAME != newlutterAarVerserionName) &#123;</span><br><span class="line">                                    error <span class="string">&#x27;修改flutter aar sdk version失败&#x27;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                echo <span class="string">&quot;修改flutter aar sdk version成功，新版本：$&#123;newlutterAarVerserionName&#125;&quot;</span></span><br><span class="line">                                <span class="comment">//提交改动的文件</span></span><br><span class="line">                                </span><br><span class="line">                                <span class="comment">// GIT_CREDS = credentials($&#123;__GIT_CREDENTIALS_ID&#125;)</span></span><br><span class="line">                                <span class="comment">// sh(&quot;&quot;&quot;</span></span><br><span class="line">                                   </span><br><span class="line">                                <span class="comment">//     git add app/build.gradle</span></span><br><span class="line">                                <span class="comment">//     git commit -m &quot;feat(flutter):升级版本flutter aar版本号为：$&#123;params.FLUTTER_AAR_VERSION_NAME&#125;&quot;</span></span><br><span class="line">                                <span class="comment">//     git push</span></span><br><span class="line">                                <span class="comment">// &quot;&quot;&quot;)</span></span><br><span class="line">                                <span class="keyword">def</span> fixFlutterAarLog = <span class="string">&quot;修改flutter aar version：$&#123;newlutterAarVerserionName&#125;&quot;</span></span><br><span class="line">                                withEnv([<span class="string">&quot;__CHANGE_LOG=$fixFlutterAarLog&quot;</span>]) &#123; </span><br><span class="line">                                    echo <span class="string">&quot;$&#123;env.__CHANGE_LOG&#125;&quot;</span> </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                echo <span class="string">&quot;app中的flutter aar sdk version已近是最新无需修改，版本：$&#123;oldFlutterAarVerserionName&#125;&quot;</span></span><br><span class="line">                            &#125;           </span><br><span class="line">                        &#125;        </span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 修改release的v2签名先默认关闭，等加固之后再使用v2签名重新签名</span></span><br><span class="line">                    <span class="keyword">if</span>(params.IS_NEED_JIAGU)&#123;</span><br><span class="line">                        <span class="keyword">def</span> signStr =getShEchoResult( <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                grep &quot;v2SigningEnabled true&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | sed -n 1p</span></span><br><span class="line"><span class="string">                                &quot;&quot;&quot;</span>)</span><br><span class="line">                        echo <span class="string">&quot;app build sign:$signStr&quot;</span></span><br><span class="line">                        <span class="keyword">if</span>(signStr == <span class="string">&quot;v2SigningEnabled true&quot;</span>)&#123;</span><br><span class="line">                            sh(<span class="string">&quot;&quot;&quot; sed -i &#x27;app/build.gradle&#x27; -e &#x27;s/v2SigningEnabled true/v2SigningEnabled false/g&#x27;  &quot;&quot;&quot;</span>)</span><br><span class="line">                            <span class="keyword">def</span> signStrNew =getShEchoResult( <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                grep &quot;v2SigningEnabled false&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | sed -n 1p</span></span><br><span class="line"><span class="string">                                &quot;&quot;&quot;</span>)</span><br><span class="line">                            <span class="keyword">if</span>(signStrNew==<span class="string">&quot;v2SigningEnabled false&quot;</span>)&#123;</span><br><span class="line">                                echo <span class="string">&quot;修改签名:$signStrNew&quot;</span> </span><br><span class="line">                            &#125;   </span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            echo <span class="string">&quot;不需要修改签名方式:$signStr&quot;</span></span><br><span class="line">                        &#125; </span><br><span class="line">                        </span><br><span class="line">                                    </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;打包&#x27;</span>) &#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    sh <span class="string">&#x27;chmod +x gradlew&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> (params.IS_CLEAN_BUILD == <span class="literal">true</span>) &#123;</span><br><span class="line">                        sh <span class="string">&#x27;./gradlew clean&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    echo <span class="string">&quot;Build $&#123;params.BUILD_TYPE_SELECT&#125; APK.. &quot;</span></span><br><span class="line">                    <span class="comment">//指定了gradle的构建缓存目录 --project-cache-dir $__GRADLE_CACHE_PATH/$JOB_NAME</span></span><br><span class="line">                    <span class="keyword">if</span>(params.BUILD_TYPE_SELECT == <span class="string">&quot;$BUILD_TYPE_ALPHA&quot;</span>)&#123;</span><br><span class="line">                        sh <span class="string">&quot;./gradlew :app:aNA -PIS_LOCAL_BUILD=false --project-cache-dir $__GRADLE_CACHE_PATH/$JOB_NAME&quot;</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(params.BUILD_TYPE_SELECT == <span class="string">&quot;$BUILD_TYPE_DEBUG&quot;</span>)&#123;</span><br><span class="line">                        sh <span class="string">&quot;./gradlew :app:aND --project-cache-dir $__GRADLE_CACHE_PATH/$JOB_NAME&quot;</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        sh <span class="string">&quot;./gradlew :app:assembleNormalRelease --project-cache-dir $__GRADLE_CACHE_PATH/$JOB_NAME&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;加固&#x27;</span>) &#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE &amp;&amp; params.IS_NEED_JIAGU &amp;&amp; params.BUILD_TYPE_SELECT != <span class="string">&quot;$BUILD_TYPE_DEBUG&quot;</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">def</span> currentPath = pwd()</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">def</span> protectedSourceApkName32 = <span class="string">&quot;$&#123;currentPath&#125;/bin/$&#123;__AKP_FILE_PREFIXX&#125;32_$&#123;NumberVersion&#125;_release.apk&quot;</span></span><br><span class="line">                    <span class="keyword">def</span> protectedSourceApkName64 = <span class="string">&quot;$&#123;currentPath&#125;/bin/$&#123;__AKP_FILE_PREFIXX&#125;64_$&#123;NumberVersion&#125;_release.apk&quot;</span></span><br><span class="line">                    </span><br><span class="line">                    sh (<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                        rm -rf ./bin/*.apk</span></span><br><span class="line"><span class="string">                        rm -rf ./bin/temp/*</span></span><br><span class="line"><span class="string">                        &#x27;&#x27;&#x27;</span>)</span><br><span class="line">                    <span class="comment">//copy 32 to bin</span></span><br><span class="line">                    sh (<span class="string">&quot;&quot;&quot; cp app/build/outputs/apk/normal/$&#123;__BUILD_TYPE&#125;/*-v7a-$&#123;__BUILD_TYPE&#125;.apk &quot;$&#123;protectedSourceApkName32&#125;&quot; &quot;&quot;&quot;</span>)</span><br><span class="line">                    legu32Apk = <span class="string">&quot;$&#123;currentPath&#125;/bin/temp/$&#123;__AKP_FILE_PREFIXX&#125;32_$&#123;NumberVersion&#125;_release_sec.apk&quot;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//copy 64 to bin</span></span><br><span class="line">                    sh (<span class="string">&quot;&quot;&quot; cp app/build/outputs/apk/normal/$&#123;__BUILD_TYPE&#125;/*-v8a-$&#123;__BUILD_TYPE&#125;.apk &quot;$&#123;protectedSourceApkName64&#125;&quot; &quot;&quot;&quot;</span>)</span><br><span class="line">                    legu64Apk = <span class="string">&quot;$&#123;currentPath&#125;/bin/temp/$&#123;__AKP_FILE_PREFIXX&#125;64_$&#123;NumberVersion&#125;_release_sec.apk&quot;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//加固</span></span><br><span class="line">                    executeJiagu(<span class="string">&quot;$&#123;currentPath&#125;/bin&quot;</span>, legu32Apk,legu64Apk, <span class="string">&quot;$&#123;currentPath&#125;/bin/temp&quot;</span>)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;32渠道包&#x27;</span>) &#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE &amp;&amp; params.IS_NEED_JIAGU &amp;&amp; params.BUILD_TYPE_SELECT != <span class="string">&quot;$BUILD_TYPE_DEBUG&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">def</span> currentPath = pwd()</span><br><span class="line">                    <span class="keyword">def</span> zipalignedApkPath32 = <span class="string">&quot;./bin/temp32/$&#123;__AKP_FILE_PREFIXX&#125;$&#123;NumberVersion&#125;_aligned.apk&quot;</span></span><br><span class="line">                    <span class="keyword">def</span> signedApkPath32 = <span class="string">&quot;./bin/temp32/$&#123;__AKP_FILE_PREFIXX&#125;$&#123;NumberVersion&#125;_android.apk&quot;</span></span><br><span class="line">                    <span class="keyword">def</span> archived32Path = <span class="string">&quot;$&#123;currentPath&#125;/bin/arm32&quot;</span></span><br><span class="line">                    legu32Apk = <span class="string">&quot;$&#123;currentPath&#125;/bin/temp/$&#123;__AKP_FILE_PREFIXX&#125;32_$&#123;NumberVersion&#125;_release_sec.apk&quot;</span></span><br><span class="line"></span><br><span class="line">                    sh (<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                            rm -rf ./bin/temp32/*</span></span><br><span class="line"><span class="string">                            rm -rf ./bin/arm32/*</span></span><br><span class="line"><span class="string">                            &#x27;&#x27;&#x27;</span>)</span><br><span class="line">                    <span class="comment">//渠道包签名</span></span><br><span class="line">                    executeWalleSigner(signedApkPath32, legu32Apk, zipalignedApkPath32, archived32Path)</span><br><span class="line">                    <span class="comment">//归档渠道包</span></span><br><span class="line">                    sh (<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                            zip -j arm32_channels.zip $&#123;archived32Path&#125;/$&#123;__AKP_FILE_PREFIXX&#125;$&#123;NumberVersion&#125;_*.apk</span></span><br><span class="line"><span class="string">                            mv arm32_channels.zip bin/</span></span><br><span class="line"><span class="string">                          &quot;&quot;&quot;</span>)  </span><br><span class="line">               &#125;</span><br><span class="line">                archiveArtifacts <span class="attr">artifacts:</span> <span class="string">&#x27;bin/arm32_channels.zip&#x27;</span>, <span class="attr">followSymlinks:</span> <span class="literal">false</span>, <span class="attr">onlyIfSuccessful:</span> <span class="literal">true</span></span><br><span class="line">                archiveArtifacts <span class="attr">artifacts:</span> <span class="string">&quot;bin/arm32/*_$&#123;NumberVersion&#125;*_android_official.apk&quot;</span>, <span class="attr">followSymlinks:</span> <span class="literal">false</span>, <span class="attr">onlyIfSuccessful:</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;64渠道包&#x27;</span>) &#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE &amp;&amp; params.IS_NEED_JIAGU &amp;&amp; params.BUILD_TYPE_SELECT != <span class="string">&quot;$BUILD_TYPE_DEBUG&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">def</span> currentPath = pwd()</span><br><span class="line">                    <span class="keyword">def</span> zipalignedApkPath64 = <span class="string">&quot;./bin/temp64/$&#123;__AKP_FILE_PREFIXX&#125;$&#123;NumberVersion&#125;_aligned.apk&quot;</span></span><br><span class="line">                    signedApkPath64 = <span class="string">&quot;./bin/temp64/$&#123;__AKP_FILE_PREFIXX&#125;$&#123;NumberVersion&#125;_android.apk&quot;</span></span><br><span class="line">                    <span class="keyword">def</span> archived64Path = <span class="string">&quot;$&#123;currentPath&#125;/bin/arm64&quot;</span></span><br><span class="line"></span><br><span class="line">                    legu64Apk = <span class="string">&quot;$&#123;currentPath&#125;/bin/temp/$&#123;__AKP_FILE_PREFIXX&#125;64_$&#123;NumberVersion&#125;_release_sec.apk&quot;</span></span><br><span class="line">                    sh (<span class="string">&quot;&quot;&quot; rm -rf ./bin/temp64/*</span></span><br><span class="line"><span class="string">                            rm -rf ./bin/arm64/*</span></span><br><span class="line"><span class="string">                       &quot;&quot;&quot;</span>)</span><br><span class="line">                    <span class="comment">//渠道包签名</span></span><br><span class="line">                    executeWalleSigner(signedApkPath64, legu64Apk, zipalignedApkPath64, archived64Path)</span><br><span class="line">                    <span class="comment">//归档渠道包</span></span><br><span class="line">                    sh (<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        zip -j arm64_channels.zip $&#123;archived64Path&#125;/$&#123;__AKP_FILE_PREFIXX&#125;$&#123;NumberVersion&#125;_*.apk</span></span><br><span class="line"><span class="string">                       mv arm64_channels.zip bin/</span></span><br><span class="line"><span class="string">                      &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                archiveArtifacts <span class="attr">artifacts:</span> <span class="string">&#x27;bin/arm64_channels.zip&#x27;</span>, <span class="attr">followSymlinks:</span> <span class="literal">false</span>, <span class="attr">onlyIfSuccessful:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;64位测试包上传cos/分发平台&#x27;</span>) &#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    echo <span class="string">&#x27;上传cos&#x27;</span></span><br><span class="line">                    <span class="keyword">def</span> currentPath = pwd()</span><br><span class="line">                    <span class="comment">// //上传到cos，企业微信通知到下载连接 debug 包</span></span><br><span class="line">                    <span class="keyword">if</span>(params.BUILD_TYPE_SELECT == <span class="string">&quot;$BUILD_TYPE_DEBUG&quot;</span> || params.IS_NEED_JIAGU == <span class="literal">false</span>)&#123;</span><br><span class="line">                        <span class="keyword">def</span> apkName = <span class="string">&quot;$&#123;__AKP_FILE_PREFIXX&#125;$&#123;NumberVersion&#125;_$&#123;__BUILD_TYPE&#125;.apk&quot;</span></span><br><span class="line">                        <span class="keyword">def</span> tempApkPath = <span class="string">&quot;$&#123;currentPath&#125;/bin/arm64/$&#123;apkName&#125;&quot;</span></span><br><span class="line">                        sh (<span class="string">&quot;&quot;&quot; cp app/build/outputs/apk/normal/$&#123;__BUILD_TYPE&#125;/*-v8a-$&#123;__BUILD_TYPE&#125;.apk &quot;$&#123;tempApkPath&#125;&quot; &quot;&quot;&quot;</span>)</span><br><span class="line">                        sh(<span class="string">&quot;&quot;&quot; $&#123;cosLibPath&#125;/coscli cp $&#123;tempApkPath&#125; cos://$&#123;__COS_BUCKET_NAME&#125;/test/$&#123;apkName&#125; -c $&#123;cosLibPath&#125;/.cos.yaml &quot;&quot;&quot;</span>)</span><br><span class="line">                        __APK_DOWNLOAD_URL = <span class="string">&quot;https://app-pkg-1254950508.cos.ap-guangzhou.myqcloud.com/test/$&#123;apkName&#125;&quot;</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//有加固的包</span></span><br><span class="line">                        <span class="comment">//从arm64的包下面找</span></span><br><span class="line">                         <span class="keyword">def</span> tempApkPath = <span class="string">&quot;bin/arm64/$&#123;__AKP_FILE_PREFIXX&#125;*_official.apk&quot;</span></span><br><span class="line">                         <span class="keyword">def</span> apkFiles = findFiles(<span class="attr">glob:</span> <span class="string">&quot;$&#123;tempApkPath&#125;&quot;</span>)</span><br><span class="line">                         <span class="keyword">if</span>(apkFiles[<span class="number">0</span>].name == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                            error <span class="string">&quot;上传cos 的apk 没有找到&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                         sh(<span class="string">&quot;&quot;&quot; $&#123;cosLibPath&#125;/coscli cp $&#123;apkFiles[0].path&#125; cos://$&#123;__COS_BUCKET_NAME&#125;/test/$&#123;apkFiles[0].name&#125; -c $&#123;cosLibPath&#125;/.cos.yaml &quot;&quot;&quot;</span>)</span><br><span class="line">                        __APK_DOWNLOAD_URL = <span class="string">&quot;https://app-pkg-1254950508.cos.ap-guangzhou.myqcloud.com/test/$&#123;apkFiles[0].name&#125;&quot;</span></span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        retry(<span class="number">3</span>)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(params.BUILD_TYPE_SELECT == <span class="string">&quot;$BUILD_TYPE_RELEASE&quot;</span>)&#123;</span><br><span class="line">                                uploadApkToInternal(<span class="string">&quot;正式版&quot;</span>)</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                uploadApkToInternal(<span class="string">&quot;内测版&quot;</span>)</span><br><span class="line">                            &#125; </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                        print e</span><br><span class="line">                    &#125;</span><br><span class="line">                    buildDescription <span class="string">&quot;构建成功下载：&lt;a href=\&quot;$&#123;__APK_DOWNLOAD_URL&#125;\&quot;&gt;下载&lt;/a&gt;&quot;</span></span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;企业微信通知&#x27;</span>)&#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    echo <span class="string">&#x27;企业微信通知&#x27;</span></span><br><span class="line">                    <span class="comment">// sh &quot;printenv&quot;</span></span><br><span class="line">                    <span class="comment">//企业微信通知</span></span><br><span class="line">                    <span class="keyword">def</span> gitLog = getGitChangeLogBetweenLastBuildSucceesCommit()</span><br><span class="line">                    <span class="keyword">if</span>(!gitLog)&#123;</span><br><span class="line">                        gitLog = getChangeString()</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!gitLog)&#123;</span><br><span class="line">                        <span class="comment">//__CHANGE_LOG 是定义在evn中，不能用脚本式的方式修改</span></span><br><span class="line">                        withEnv([<span class="string">&quot;__CHANGE_LOG=$gitLog\n$&#123;env.__CHANGE_LOG&#125;&quot;</span>]) &#123; </span><br><span class="line">                            echo <span class="string">&quot;$&#123;env.__CHANGE_LOG&#125;&quot;</span> </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    qyWechatNotify()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;32上传cos&#x27;</span>) &#123;</span><br><span class="line">            when&#123;</span><br><span class="line">                expression &#123;</span><br><span class="line">                    <span class="keyword">return</span> __DONT_SKIP_STAGE &amp;&amp; params.BUILD_TYPE_SELECT == <span class="string">&quot;$BUILD_TYPE_RELEASE&quot;</span> &amp;&amp; params.IS_NEED_JIAGU</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">def</span> currentPath = pwd()</span><br><span class="line">                    <span class="comment">//cos这里的文件夹名对应版本号，配置后台的格式 6.2.0.500</span></span><br><span class="line">                    sh(<span class="string">&quot;&quot;&quot; $&#123;cosLibPath&#125;/coscli cp $&#123;currentPath&#125;/bin/arm32/ cos://$&#123;__COS_BUCKET_NAME&#125;/$&#123;NumberVersion&#125;/ -r -c $&#123;cosLibPath&#125;/.cos.yaml &quot;&quot;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// stage(&#x27;google渠道包&#x27;) &#123;</span></span><br><span class="line">        <span class="comment">//     when&#123;</span></span><br><span class="line">        <span class="comment">//         expression &#123;</span></span><br><span class="line">        <span class="comment">//             return params.BUILD_TYPE_SELECT == &quot;$BUILD_TYPE_RELEASE&quot;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     steps &#123;</span></span><br><span class="line">        <span class="comment">//         echo &#x27;google渠道包&#x27;</span></span><br><span class="line">        <span class="comment">//             script &#123;</span></span><br><span class="line">        <span class="comment">//                 def currentPath = pwd()</span></span><br><span class="line">                        </span><br><span class="line">        <span class="comment">//                 archived32Path = &quot;$&#123;currentPath&#125;/bin/arm32&quot;</span></span><br><span class="line">        <span class="comment">//                 legu32Apk = &quot;$&#123;currentPath&#125;/bin/temp/$&#123;__AKP_FILE_PREFIXX&#125;32_$&#123;NumberVersion&#125;_release_sec.apk&quot;</span></span><br><span class="line">        <span class="comment">//                 def protectedSourceApkName32 = &quot;$&#123;currentPath&#125;/bin/$&#123;__AKP_FILE_PREFIXX&#125;32_$&#123;NumberVersion&#125;_release.apk&quot;</span></span><br><span class="line">        <span class="comment">//                 def protectedSourceApkName64 = &quot;$&#123;currentPath&#125;/bin/$&#123;__AKP_FILE_PREFIXX&#125;64_$&#123;NumberVersion&#125;_release.apk&quot;</span></span><br><span class="line">                        </span><br><span class="line">        <span class="comment">//                 sh (&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">//                     rm -rf ./bin/*.apk</span></span><br><span class="line">        <span class="comment">//                     &#x27;&#x27;&#x27;)</span></span><br><span class="line">        <span class="comment">//                 //copy 32 to bin</span></span><br><span class="line">        <span class="comment">//                 sh (&quot;&quot;&quot; cp app/build/outputs/apk/normal/$&#123;__BUILD_TYPE&#125;/*-v7a-$&#123;__BUILD_TYPE&#125;.apk &quot;$&#123;protectedSourceApkName32&#125;&quot; &quot;&quot;&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//                 sh (&quot;&quot;&quot; cp app/build/outputs/apk/normal/$&#123;__BUILD_TYPE&#125;/*-v8a-$&#123;__BUILD_TYPE&#125;.apk &quot;$&#123;protectedSourceApkName64&#125;&quot; &quot;&quot;&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//                 def googleApkName32 = &quot;$&#123;currentPath&#125;/bin/google/$&#123;__AKP_FILE_PREFIXX&#125;32_$&#123;NumberVersion&#125;_release.apk&quot;</span></span><br><span class="line">        <span class="comment">//                 def googleApkName64 = &quot;$&#123;currentPath&#125;/bin/google/$&#123;__AKP_FILE_PREFIXX&#125;64_$&#123;NumberVersion&#125;_release.apk&quot;</span></span><br><span class="line">        <span class="comment">//                 //签名</span></span><br><span class="line">        <span class="comment">//                 executeWalleSignerForGoogle(protectedSourceApkName32,googleApkName32)</span></span><br><span class="line">        <span class="comment">//                 executeWalleSignerForGoogle(protectedSourceApkName64,googleApkName64)</span></span><br><span class="line">        <span class="comment">//                  //归档渠道包</span></span><br><span class="line">        <span class="comment">//                 sh (&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">//                     zip -j google_channels.zip $&#123;pwd()&#125;/bin/google/$&#123;__AKP_FILE_PREFIXX&#125;*.apk</span></span><br><span class="line">        <span class="comment">//                     mv google_channels.zip bin/</span></span><br><span class="line">        <span class="comment">//                 &quot;&quot;&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//             archiveArtifacts artifacts: &quot;bin/google_channels.zip&quot;, followSymlinks: false, onlyIfSuccessful: true</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post&#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            <span class="comment">//为重启执行的步骤设置buildName</span></span><br><span class="line">            buildName <span class="string">&quot;#$&#123;BUILD_NUMBER&#125;-$&#123;params.BUILD_GIT_BRANCH&#125;-$&#123;params.BUILD_TYPE_SELECT&#125;-$&#123;env.BUILD_USER&#125;&quot;</span></span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取 shell 命令输出内容</span></span><br><span class="line"><span class="keyword">def</span> getShEchoResult(cmd) &#123;</span><br><span class="line">    <span class="keyword">def</span> getShEchoResultCmd = <span class="string">&quot;ECHO_RESULT=`$&#123;cmd&#125;`\necho \$&#123;ECHO_RESULT&#125;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sh (</span><br><span class="line">        <span class="symbol">script:</span> getShEchoResultCmd,</span><br><span class="line">        <span class="symbol">returnStdout:</span> <span class="literal">true</span></span><br><span class="line">    ).trim()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加固</span></span><br><span class="line"><span class="comment">// protectedSourceApkName 带加固的文件夹路径</span></span><br><span class="line"><span class="comment">// jiaguApk 加固之后的文件</span></span><br><span class="line"><span class="comment">// downloadPath 梆梆加固之后下载的路径</span></span><br><span class="line"><span class="keyword">def</span> executeJiagu(protectedSourceApkName, jiagu32Apk,jiagu64Apk, downloadPath) &#123;</span><br><span class="line">    echo <span class="string">&#x27;加固start&#x27;</span></span><br><span class="line">    <span class="comment">// sh( &quot;&quot;&quot; $&#123;leguLibPath&#125;/jiagu &quot;$&#123;protectedSourceApkName&#125;&quot; &quot;$&#123;jiaguApk&#125;&quot; /legu/base.conf &quot;&quot;&quot;)</span></span><br><span class="line">    sh(<span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    java -jar /sdk/bang/secapi.jar -i https://usc.an110.com -u yntyxx -a 62e3ff42-ea46-4139-9b17-764023851612 -c 03b7f84d-ff93-419b-b5be-2c941455fdcd -p $&#123;protectedSourceApkName&#125; -d $&#123;downloadPath&#125; -t $&#123;__BANGBANG_ID&#125; -f 0 &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (fileExists(jiagu32Apk) == <span class="literal">false</span>) &#123;</span><br><span class="line">        error <span class="string">&#x27;加固失败&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fileExists(jiagu64Apk) == <span class="literal">false</span>) &#123;</span><br><span class="line">        error <span class="string">&#x27;加固失败&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    echo <span class="string">&#x27;加固success&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// walle渠道包</span></span><br><span class="line"><span class="keyword">def</span> executeWalleSigner(signedApkPath, jiaguApk, zipalignedApkPath, archivedPath) &#123;</span><br><span class="line">    echo <span class="string">&#x27;加固之后重新签名&#x27;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    keystorePath = getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            grep &quot;storeFile&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27; &#x27; | sed -e &#x27;s/\&quot;//g&#x27; | grep -o &#x27;[^\\(]/.*[^\\)]&#x27; | sed -n 1p</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    keyAlias = getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    grep &quot;keyAlias&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27; &#x27; | sed -e &#x27;s/\&quot;//g&#x27; | sed -n 1p</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span>)</span><br><span class="line">    keystorePassword = getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    grep &quot;storePassword&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27; &#x27; | sed -e &#x27;s/\&quot;//g&#x27; | sed -n 1p</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span>)</span><br><span class="line">    keyPassword = getShEchoResult(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    grep &quot;keyPassword&quot; &quot;app/build.gradle&quot; | sed -e &#x27;s/^[ \t]*//;s/[ \t]*\$//&#x27; | cut -f2 -d &#x27; &#x27; | sed -e &#x27;s/\&quot;//g&#x27; | sed -n 1p</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sh( <span class="string">&quot;&quot;&quot; zipalign -v 4 $&#123;jiaguApk&#125; $&#123;zipalignedApkPath&#125; &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="comment">//腾讯加固要求摘要 sign --min-sdk-version=17 ,以前的包是v1 v2开启的。</span></span><br><span class="line">    sh (<span class="string">&quot;&quot;&quot; apksigner sign --v1-signing-enabled true --v2-signing-enabled true --ks $&#123;keystorePath&#125; --ks-key-alias $&#123;keyAlias&#125; --ks-pass pass:$&#123;keystorePassword&#125; --key-pass pass:$&#123;keyPassword&#125; --out $&#123;signedApkPath&#125; $&#123;zipalignedApkPath&#125; &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">def</span> signApkInfo = getShEchoResult(<span class="string">&quot;apksigner verify --verbose $&#123;signedApkPath&#125;&quot;</span>)</span><br><span class="line">    signApkInfo = getShEchoResult(<span class="string">&quot;&quot;&quot; echo $signApkInfo | sed -n &#x27;1,7p&#x27; &quot;&quot;&quot;</span>)</span><br><span class="line">    echo signApkInfo</span><br><span class="line"></span><br><span class="line">    echo <span class="string">&#x27;walle渠道包start&#x27;</span></span><br><span class="line">    sh( <span class="string">&quot;&quot;&quot; java -jar $&#123;walleLibPath&#125;/walle-cli-all.jar batch -c $&#123;params.CHANNELS&#125; $&#123;signedApkPath&#125; $&#123;archivedPath&#125; &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="comment">//签名信息检查</span></span><br><span class="line">    <span class="comment">// def apkFiles = findFiles(glob: &quot;$&#123;apkFilePath&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// def apkPath = apkFiles[0].path</span></span><br><span class="line">    <span class="comment">// sh(returnStdout: true, script: &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">//     apksigner verify -verbose -print-certs \$&#123;apkPath&#125; | awk -F \&quot; \&quot; &#x27;/Verified using/ &#123;print \$&#123;2&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="comment">//    &quot;&quot;&quot;).trim() </span></span><br><span class="line">    echo <span class="string">&#x27;walle渠道包success&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//google 渠道包</span></span><br><span class="line"><span class="keyword">def</span> executeWalleSignerForGoogle(signedApkPath,archivedPath) &#123;</span><br><span class="line">    echo <span class="string">&#x27;google 渠道包start&#x27;</span></span><br><span class="line">    sh( <span class="string">&quot;&quot;&quot; java -jar $&#123;walleLibPath&#125;/walle-cli-all.jar put -c google $&#123;signedApkPath&#125; $&#123;archivedPath&#125; &quot;&quot;&quot;</span>)</span><br><span class="line">    echo <span class="string">&#x27;google 渠道包success&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// git log</span></span><br><span class="line"><span class="keyword">def</span> getChangeString() &#123;</span><br><span class="line">    MAX_MSG_LEN = <span class="number">4096</span></span><br><span class="line">    <span class="keyword">def</span> changeString = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    echo <span class="string">&#x27;Gathering SCM Changes...&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> changeLogSets = currentBuild.changeSets</span><br><span class="line">    echo <span class="string">&quot;$changeLogSets&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; changeLogSets.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">def</span> entries = changeLogSets[i].items</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; entries.length; j++) &#123;</span><br><span class="line">            <span class="keyword">def</span> entry = entries[j]</span><br><span class="line">            truncated_msg = entry.msg.take(MAX_MSG_LEN)</span><br><span class="line">            changeString += <span class="string">&quot;[$&#123;entry.author&#125;] $&#123;truncated_msg&#125;\n&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!changeString) &#123;</span><br><span class="line">        changeString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> changeString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送企业微信通知</span></span><br><span class="line"><span class="keyword">def</span> qyWechatNotify() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> apkFilePath = <span class="string">&quot;&quot;</span></span><br><span class="line">    apkFilePath = <span class="string">&quot;app/build/outputs/apk/normal/$&#123;__BUILD_TYPE&#125;/*-v8a-$&#123;__BUILD_TYPE&#125;.apk&quot;</span></span><br><span class="line">    <span class="keyword">def</span> apkFiles = findFiles(<span class="attr">glob:</span> <span class="string">&quot;$&#123;apkFilePath&#125;&quot;</span>)</span><br><span class="line">    __APP_NAME = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            aapt d badging $&#123;apkFiles[0].path&#125; | grep -E &#x27;application-label:&#x27; | sed -e &#x27;s/application-label://g&#x27; | sed -e \&quot;s/&#x27;//g\&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>).trim()</span><br><span class="line">    __APP_PACKAGE_NAME =sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            aapt d badging $&#123;apkFiles[0].path&#125; | grep package | awk &#x27;&#123;print \$2 &#125;&#x27; | sed s/name=//g | sed -e \&quot;s/&#x27;//g\&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>).trim()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//__APK_DOWNLOAD_URL 下载链接</span></span><br><span class="line">    <span class="keyword">def</span> appDownloadUrl = <span class="string">&quot;https://www.akring.online/verify?id=$&#123;__API_KEY&#125;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> msg = <span class="string">&quot;&quot;&quot;&lt;font color=&quot;warning&quot;&gt;[$&#123;__APP_NAME&#125;Android更新]($&#123;appDownloadUrl&#125;)&lt;/font&gt;\n&gt;下载链接：[$&#123;appDownloadUrl&#125;]($&#123;appDownloadUrl&#125;)\n&gt;版本: $&#123;NumberVersion&#125;(versionCode: $&#123;params.VERSION_CODE&#125;)\n&gt;构建分支: $&#123;params.BUILD_GIT_BRANCH&#125;\n&gt;构建者: $&#123;BUILD_USER&#125;\n&gt;\n&gt;更新内容:$&#123;env.__CHANGE_LOG&#125;&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> result = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        curl -H &quot;&#x27;Content-type&#x27;:&#x27;application/json&#x27;&quot; -d &#x27;&#123;&quot;msgtype&quot;:&quot;markdown&quot;,&quot;markdown&quot;:&#123;&quot;content&quot;:&quot;&#x27;&quot;$&#123;msg&#125;&quot;&#x27;&quot;&#125;&#125;&#x27; $__WEIXIN_SEND_URL</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>).trim()</span><br><span class="line">    <span class="keyword">def</span> qywxResult = readJSON <span class="attr">text:</span>result</span><br><span class="line">    <span class="keyword">if</span> (qywxResult[<span class="string">&#x27;errcode&#x27;</span>] == <span class="number">0</span> ) &#123;</span><br><span class="line">        echo <span class="string">&#x27;企业微信通知成功&#x27;</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        echo <span class="string">&#x27;企业微信通知失败&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上传apk到fir</span></span><br><span class="line"><span class="keyword">def</span> uploadApkToFir(apkFilePath) &#123;</span><br><span class="line">    <span class="keyword">def</span> apkPath = <span class="string">&quot;app/build/outputs/apk/normal/$&#123;__BUILD_TYPE&#125;/*-v8a-$&#123;__BUILD_TYPE&#125;.apk&quot;</span></span><br><span class="line">    <span class="keyword">def</span> apkS = findFiles(<span class="attr">glob:</span> <span class="string">&quot;$&#123;apkPath&#125;&quot;</span>)</span><br><span class="line">    __APP_NAME = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            aapt d badging $&#123;apkS[0].path&#125; | grep -E &#x27;application-label:&#x27; | sed -e &#x27;s/application-label://g&#x27; | sed -e \&quot;s/&#x27;//g\&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>).trim()</span><br><span class="line">    __APP_PACKAGE_NAME =sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            aapt d badging $&#123;apkS[0].path&#125; | grep package | awk &#x27;&#123;print \$2 &#125;&#x27; | sed s/name=//g | sed -e \&quot;s/&#x27;//g\&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>).trim()</span><br><span class="line">    <span class="comment">//获取token</span></span><br><span class="line">    <span class="keyword">def</span> tokenJson = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        curl -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123;&quot;api_token&quot;: &quot;$&#123;__API_KEY&#125;&quot;, &quot;bundle_id&quot;:&quot;$__APP_PACKAGE_NAME&quot;, &quot;type&quot;:&quot;android&quot;&#125;&#x27; $&#123;__FIR_URL_ENPOINT&#125;</span></span><br><span class="line"><span class="string">                       &quot;&quot;&quot;</span>).trim()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> jsonObj = readJSON <span class="attr">text:</span>tokenJson</span><br><span class="line">    echo <span class="string">&quot;$jsonObj&quot;</span></span><br><span class="line">    <span class="keyword">def</span> cert = jsonObj[<span class="string">&#x27;cert&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> (cert) &#123;</span><br><span class="line">        icon = jsonObj[<span class="string">&#x27;cert&#x27;</span>][<span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> key = icon[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        <span class="keyword">def</span> token = icon[<span class="string">&#x27;token&#x27;</span>]</span><br><span class="line">        <span class="keyword">def</span> upload_url = icon[<span class="string">&#x27;upload_url&#x27;</span>]</span><br><span class="line">        <span class="comment">//upload icon</span></span><br><span class="line">        <span class="keyword">def</span> iconPath = <span class="string">&quot;/var/jenkins_home/workspace/$JOB_NAME/app/src/main/res/mipmap-mdpi/ic_launcher.png&quot;</span></span><br><span class="line"></span><br><span class="line">        sh(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            curl   -F &quot;key=$&#123;key&#125;&quot;              \\</span></span><br><span class="line"><span class="string">                -F &quot;token=$&#123;token&#125;&quot;             \\</span></span><br><span class="line"><span class="string">                -F &quot;file=@$&#123;iconPath&#125;&quot;            \\</span></span><br><span class="line"><span class="string">                $&#123;upload_url&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">        echo <span class="string">&#x27;upload icon success&#x27;</span></span><br><span class="line">        <span class="comment">//upload apk</span></span><br><span class="line">        <span class="keyword">def</span> apkFiles = findFiles(<span class="attr">glob:</span> <span class="string">&quot;$&#123;apkFilePath&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> apkUPloadReulst = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            curl   -F &quot;key=$&#123;jsonObj[&#x27;cert&#x27;][&#x27;binary&#x27;][&#x27;key&#x27;]&#125;&quot;              \\</span></span><br><span class="line"><span class="string">                -F &quot;token=$&#123;jsonObj[&#x27;cert&#x27;][&#x27;binary&#x27;][&#x27;token&#x27;]&#125;&quot;             \\</span></span><br><span class="line"><span class="string">                -F &quot;file=@&quot;$&#123;apkFiles[0].path&#125;            \\</span></span><br><span class="line"><span class="string">                -F &quot;x:name=$&#123;__APP_NAME&#125;&quot;             \\</span></span><br><span class="line"><span class="string">                -F &quot;x:version=$&#123;NumberVersion&#125;&quot;         \\</span></span><br><span class="line"><span class="string">                -F &quot;x:build=$&#123;params.VERSION_CODE&#125;&quot;               \\</span></span><br><span class="line"><span class="string">                -F &quot;x:changelog=$&#123;__CHANGE_LOG&#125;&quot;       \\</span></span><br><span class="line"><span class="string">                $&#123;jsonObj[&#x27;cert&#x27;][&#x27;binary&#x27;][&#x27;upload_url&#x27;]&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>).trim()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> apkResult = readJSON <span class="attr">text:</span>apkUPloadReulst</span><br><span class="line">        echo <span class="string">&quot;$apkResult&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (apkResult[<span class="string">&#x27;is_completed&#x27;</span>] == <span class="literal">true</span>) &#123;</span><br><span class="line">            echo <span class="string">&#x27;apk上传fir成功，开始企业微信通知&#x27;</span></span><br><span class="line">            __APK_DOWNLOAD_URL = <span class="string">&quot;https://$&#123;jsonObj[&#x27;download_domain&#x27;]&#125;/$&#123;jsonObj[&#x27;short&#x27;]&#125;&quot;</span></span><br><span class="line">            buildDescription <span class="string">&quot;构建成功下载：&lt;a href=\&quot;$&#123;__APK_DOWNLOAD_URL&#125;\&quot;&gt;$&#123;__APK_DOWNLOAD_URL&#125;&lt;/a&gt;&quot;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            echo <span class="string">&#x27;apk上传fir失败&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&#x27;上传fir失败：获取token失败&#x27;</span>)</span><br><span class="line">        currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提交到内部应用测试分发平台</span></span><br><span class="line"><span class="keyword">def</span> uploadApkToInternal(buildTypeName) &#123;</span><br><span class="line">    <span class="comment">//获取token</span></span><br><span class="line">    <span class="keyword">def</span> appUploadResult = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">curl -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123;&quot;version&quot;: &quot;$&#123;NumberVersion&#125;&quot;, &quot;type&quot;:&quot;$buildTypeName&quot;,&quot;project_id&quot;:&quot;$__API_KEY&quot;,&quot;webhook&quot;:&quot;&quot;,&quot;git_log&quot;:&quot;&quot;,&quot;ipa_url&quot;:&quot;$__APK_DOWNLOAD_URL&quot;&#125;&#x27; --connect-timeout 60 $&#123;__FIR_URL_ENPOINT&#125;</span></span><br><span class="line"><span class="string">                       &quot;&quot;&quot;</span>).trim()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;&quot;</span> == appUploadResult)&#123;</span><br><span class="line">        echo <span class="string">&#x27;apk上传测试分发平台成功&#x27;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        echo <span class="string">&#x27;apk上传测试分发平台&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取直至上一次成功构建之间的commit log ,排除merges信息</span></span><br><span class="line"><span class="keyword">def</span> getGitChangeLogBetweenLastBuildSucceesCommit()&#123;</span><br><span class="line">    <span class="keyword">def</span> appUploadResult = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;$&#123;env.GIT_PREVIOUS_SUCCESSFUL_COMMIT&#125;&quot;</span> != <span class="string">&quot;null&quot;</span>)&#123;</span><br><span class="line">        appUploadResult = sh(<span class="attr">returnStdout:</span> <span class="literal">true</span>, <span class="attr">script:</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        git log $&#123;env.GIT_PREVIOUS_SUCCESSFUL_COMMIT&#125;...$&#123;env.GIT_COMMIT&#125; --pretty=format:&quot;[%cn] %s&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>).trim()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> appUploadResult</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h1&gt;&lt;p&gt;​	1. &lt;a href=&quot;https://www.jenkins.io/zh/blog/2018/01/08/moving</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    <category term="android studio" scheme="https://yndongyong.github.io/categories/android-studio/"/>
    
    <category term="flutter" scheme="https://yndongyong.github.io/categories/flutter/"/>
    
    <category term="compose" scheme="https://yndongyong.github.io/categories/compose/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>docker搭建Jenkins+Android构建环境</title>
    <link href="https://yndongyong.github.io/2023/02/15/docker%E6%90%AD%E5%BB%BAJenkins-Android%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    <id>https://yndongyong.github.io/2023/02/15/docker%E6%90%AD%E5%BB%BAJenkins-Android%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83/</id>
    <published>2023-02-15T09:29:18.000Z</published>
    <updated>2023-03-26T10:05:30.566Z</updated>
    
    <content type="html"><![CDATA[<p>通过docker file定制化jenkins容器，基于jenkins:lts-jdk11长期版本。</p><p>jenkins构建Android，需要JDK、android sdk、gradle。jenkins:lts中已经包含了jdk11，其余都已经安装并注入了环境变量</p><p><strong>需要注意的几个点：</strong></p><ul><li><code>jenkins-plugin-cli</code> 需要连接jenkins plugin.io，可能会下载plugin失败，jenkins启动之后需要检查一下对应的插件是否安装。</li><li><strong>jenkins已安装plugin</strong>： rebuild:1.34 gradle-daemon:0.1.0 gradle:2.3.1 build-name-setter:2.2.0 git-parameter:0.9.18 envinject:2.901.v0038b_6471582 thinBackup:1.15 pipeline-utility-steps:2.15.1 versionnumber:1.10 build-user-vars-plugin:1.9</li><li>androidsdk 已经安装了sdkmanager cli，并同意了license，jenkins 会自动下载需要的sdk版本。</li><li>flutter：已经配置了国内镜像</li></ul><p><strong>环境变量</strong></p><ul><li><strong>JAVA_HOME</strong>&#x3D; &#x2F;opt&#x2F;java&#x2F;openjdk </li><li><strong>ANDROID_HOME</strong>&#x3D;&#x2F;var&#x2F;jenkins_home&#x2F;android&#x2F;sdk</li><li><strong>FLUTTER_HOME</strong>&#x3D;&#x2F;var&#x2F;jenkins_home&#x2F;flutter</li><li><strong>GRADLE_USER_HOME</strong>&#x3D;&#x2F;var&#x2F;jenkins_home&#x2F;.gradle</li></ul><h1 id="1-通过dockerfile构建镜像"><a href="#1-通过dockerfile构建镜像" class="headerlink" title="1.通过dockerfile构建镜像"></a>1.通过dockerfile构建镜像</h1><p>1.创建Dockerfile文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> deploy_android</span><br><span class="line"><span class="built_in">cd</span> deploy_android</span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br></pre></td></tr></table></figure><p>2.Dockerfile内容，依据需求改动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">FROM jenkins/jenkins:lts-jdk11</span><br><span class="line">LABEL maintainer yndongyong@foxmail.com</span><br><span class="line"></span><br><span class="line">USER root</span><br><span class="line"></span><br><span class="line">ENV TZ=Asia/Shanghai </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置变量 JAVA_HOME 已经在path中</span></span><br><span class="line">ENV JAVA_HOME=&quot;/opt/java/openjdk&quot;</span><br><span class="line">ENV ANDROID_HOME=&quot;/var/jenkins_home/android/sdk&quot; \</span><br><span class="line">     SDK_TOOL_URL=&quot;https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip&quot; \</span><br><span class="line">     COS_CLI_URL=&quot;https://cosbrowser-1253960454.cos.ap-shanghai.myqcloud.com/software/coscli/coscli-linux&quot; \</span><br><span class="line">     FLUTTER_HOME=&quot;/var/jenkins_home/flutter&quot;\</span><br><span class="line">     FLUTTER_RELEASE_URL=&quot;https://storage.flutter-io.cn/flutter_infra_release/releases/stable/linux/flutter_linux_3.3.10-stable.tar.xz&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建android sdk目录,并下载 sdkmanager</span></span><br><span class="line">RUN mkdir -p $ANDROID_HOME \</span><br><span class="line">     &amp;&amp; cd $ANDROID_HOME \</span><br><span class="line">     &amp;&amp; curl -o sdk.zip $SDK_TOOL_URL \</span><br><span class="line">     &amp;&amp; unzip sdk.zip \</span><br><span class="line">     &amp;&amp; rm sdk.zip \</span><br><span class="line">     &amp;&amp; cd cmdline-tools \</span><br><span class="line">     &amp;&amp; mkdir latest \</span><br><span class="line">     &amp;&amp; mv bin/ latest \</span><br><span class="line">     &amp;&amp; mv lib/ latest \</span><br><span class="line">     &amp;&amp; mv NOTICE.txt latest \</span><br><span class="line">     &amp;&amp; mv source.properties latest </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装android sdk其他package, 输入y是因为此处会有一个licence,需要用户同意后才会安装</span> </span><br><span class="line">RUN echo y | $&#123;ANDROID_HOME&#125;/cmdline-tools/latest/bin/sdkmanager  --licenses \</span><br><span class="line">    &amp;&amp; echo y | $&#123;ANDROID_HOME&#125;/cmdline-tools/latest/bin/sdkmanager  &quot;platforms;android-29&quot; &quot;build-tools;29.0.3&quot;</span><br><span class="line"></span><br><span class="line">RUN chmod -R a+w $ANDROID_HOME  \</span><br><span class="line">    &amp;&amp; chown -R jenkins $ANDROID_HOME</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更换一个软件源</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装flutter需要的插件</span></span><br><span class="line">RUN sed -i -e &quot;s/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/&quot; /etc/apt/sources.list &amp;&amp; \ </span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y \</span><br><span class="line">       xz-utils \</span><br><span class="line">      &amp;&amp;  apt-get clean</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量: 把 android sdk 路径加入到 PATH 中</span></span><br><span class="line">ENV PATH=&quot;$PATH:$ANDROID_HOME:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$FLUTTER_HOME/bin:$FLUTTER_HOME/bin/cache/dart-sdk/bin&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">flutter</span></span><br><span class="line">RUN echo &quot;Flutter sdk&quot; &amp;&amp; \</span><br><span class="line">    cd /var/jenkins_home &amp;&amp; \</span><br><span class="line">    curl -o flutter.tar.xz $FLUTTER_RELEASE_URL &amp;&amp; \</span><br><span class="line">    tar xf flutter.tar.xz &amp;&amp; \</span><br><span class="line">    git config --global --add safe.directory $FLUTTER_HOME &amp;&amp; \</span><br><span class="line">    flutter config --no-analytics &amp;&amp; \ </span><br><span class="line">    rm -f flutter.tar.xz &amp;&amp; \ </span><br><span class="line">    chmod -R 775 flutter  </span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Flutter 设定镜像</span></span><br><span class="line">ENV PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">ENV FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建gradle_cache目录，由job指定项目的gradle缓存目录，否则cleanworkspace之后，缓存不在了,/var/jenkins_home被映射到host了，永久存在</span></span><br><span class="line">ENV GRADLE_USER_HOME=&quot;/var/jenkins_home/.gradle&quot;</span><br><span class="line"></span><br><span class="line">RUN mkdir -p $GRADLE_USER_HOME \</span><br><span class="line">     &amp;&amp; cd $GRADLE_USER_HOME \</span><br><span class="line">     &amp;&amp; chown -hR jenkins $GRADLE_USER_HOME \</span><br><span class="line">     &amp;&amp; chmod -R a+w $GRADLE_USER_HOME </span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将gradle全局属性拷贝到GRADLE_USER_HOME</span></span><br><span class="line">COPY ./init.gradle $GRADLE_USER_HOME</span><br><span class="line">COPY ./gradle.properties $GRADLE_USER_HOME</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将walle-cli等拷贝</span></span><br><span class="line">COPY ./lib/ /sdk </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">处理cos</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.cos.yaml 拷贝到 /sdk/cos <span class="comment">#检查cos</span></span></span><br><span class="line">COPY ./.cos.yaml /sdk/cos/</span><br><span class="line">RUN cd /sdk/cos \</span><br><span class="line">     &amp;&amp; curl -o coscli-linux $COS_CLI_URL \</span><br><span class="line">     &amp;&amp; mv coscli-linux coscli \</span><br><span class="line">     &amp;&amp; chown -R jenkins /sdk/cos \</span><br><span class="line">     &amp;&amp; chmod 755 coscli \</span><br><span class="line">     &amp;&amp; /sdk/cos/coscli ls cos://app-pkg-1254950508 -c /sdk/cos/.cos.yaml</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">里面有一些jar包</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">RUN <span class="built_in">chmod</span> -R 775 /sdk</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用内嵌的cli安装一些插件</span> </span><br><span class="line">RUN jenkins-plugin-cli --plugins rebuild:1.34 gradle-daemon:0.1.0 gradle:2.3.1 build-name-setter:2.2.0 git-parameter:0.9.18 envinject:2.901.v0038b_6471582 thinBackup:1.15 pipeline-utility-steps:2.15.1 versionnumber:1.10 build-user-vars-plugin:1.9</span><br><span class="line"></span><br><span class="line">USER jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-配置docker-compose-yml"><a href="#2-配置docker-compose-yml" class="headerlink" title="2.配置docker-compose.yml"></a>2.配置docker-compose.yml</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.4&quot;</span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    image: yndongyong/jenkins-android:v0.0.1</span><br><span class="line">    container_name: jenkins</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      JAVA_OPTS: &quot;-server -Djava.awt.headless=true -Duser.timezone=Asia/Shanghai&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:8080&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;jenkins-data:/var/jenkins_home&quot;</span><br><span class="line">      - &quot;./jenkins_backup:/var/jenkins_backup&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     - <span class="string">&quot;./lib:/sdk&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   deploy:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       resources:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">           limits:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             cpus: <span class="string">&quot;8&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             memory: 16G</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">           reservations:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             cpus: <span class="string">&quot;0.25&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             memory: 4g</span>  </span><br><span class="line">volumes:</span><br><span class="line">  jenkins-data:</span><br><span class="line">    external: true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#需要特别注意jenkins_backup的owner是docker用户，docker jenkins_home是Jenkins，需要权限设置</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#sudo chown -R 1000:1000 jenkins_backup</span></span></span><br></pre></td></tr></table></figure><p>这里使用了一个docker volumes “jenkins-data”.</p><p>可以提前创建好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name=jenkins-data</span><br></pre></td></tr></table></figure><p>同时还映射了一个host的jenkins_backup目录，thinBackup插件指定的备份数据存放到<code>/var/jenkins_backup</code>目录。方便备份数据拷贝存放，但是要注意目录权限问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R 1000:1000 jenkins_backup</span><br></pre></td></tr></table></figure><h1 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3.启动容器"></a>3.启动容器</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过docker file定制化jenkins容器，基于jenkins:lts-jdk11长期版本。&lt;/p&gt;
&lt;p&gt;jenkins构建Android，需要JDK、android sdk、gradle。jenkins:lts中已经包含了jdk11，其余都已经安装并注入了环境变</summary>
      
    
    
    
    <category term="linux" scheme="https://yndongyong.github.io/categories/linux/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
    <category term="ci" scheme="https://yndongyong.github.io/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu20.4安装docker</title>
    <link href="https://yndongyong.github.io/2023/02/12/Ubuntu20-4%E5%AE%89%E8%A3%85docker/"/>
    <id>https://yndongyong.github.io/2023/02/12/Ubuntu20-4%E5%AE%89%E8%A3%85docker/</id>
    <published>2023-02-12T07:05:35.000Z</published>
    <updated>2023-03-04T05:25:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 上安装 Docker 非常直接。启用 Docker 软件源，导入 GPG key，并且安装软件包。</p><ol><li>使用下面的 <code>curl</code>  导入源仓库的 GPG key：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL &lt;https://download.docker.com/linux/ubuntu/gpg&gt; | sudo apt-key add -</span><br></pre></td></tr></table></figure><ol start="2"><li>将 Docker APT 软件源添加到你的系统：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] &lt;https://download.docker.com/linux/ubuntu&gt; <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装 Docker docker-compose最新版本:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br><span class="line">sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><p>一旦安装完成，Docker 服务将会自动启动。你可以输入下面的命令，验证它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p><strong>以非 Root 用户身份执行 Docker</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>然后退出当前用户比如切换为root，再次切换为user。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">su dong</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Ubuntu 上安装 Docker 非常直接。启用 Docker 软件源，导入 GPG key，并且安装软件包。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用下面的 &lt;code&gt;curl&lt;/code&gt;  导入源仓库的 GPG key：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="linux" scheme="https://yndongyong.github.io/categories/linux/"/>
    
    <category term="Ubuntu" scheme="https://yndongyong.github.io/categories/Ubuntu/"/>
    
    
    <category term="linux" scheme="https://yndongyong.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>小米手机安装magisk获取root权限配置抓包证书</title>
    <link href="https://yndongyong.github.io/2023/02/11/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85magisk%E8%8E%B7%E5%8F%96root%E6%9D%83%E9%99%90/"/>
    <id>https://yndongyong.github.io/2023/02/11/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85magisk%E8%8E%B7%E5%8F%96root%E6%9D%83%E9%99%90/</id>
    <published>2023-02-11T06:59:14.000Z</published>
    <updated>2023-03-04T09:25:56.749Z</updated>
    
    <content type="html"><![CDATA[<p>之前手机已经刷机为pixelexperience 系统，为了root权限，折腾一下magisk。</p><h1 id="1-参考"><a href="#1-参考" class="headerlink" title="1.参考"></a>1.参考</h1><ul><li><a href="https://magiskmanager.com/">Download Magisk Manager Latest Version 25.2 For Android 2022</a> magisk官方介绍</li></ul><h1 id="2-magisk安装步骤："><a href="#2-magisk安装步骤：" class="headerlink" title="2.magisk安装步骤："></a>2.magisk安装步骤：</h1><ol><li><p>解锁bootloader，之前刷机时已经解锁了，解锁参考<a href="https://yndongyong.github.io/2023/03/03/%E7%BA%A2%E7%B1%B3note-8-pro-%E5%88%B7pixelexperience/">红米note 8 pro 刷pixelexperience | yndongyong‘s blog</a></p></li><li><p>从rom包提取boot.img，手机连接电脑 ，拷贝到手机sd卡根目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push boot.img /sdcard</span><br></pre></td></tr></table></figure><p>3.安装Magisk app，打开App，安装-&gt;下一步-&gt;选择并修补一个文件,从手机sd卡根目录选择boot.img 。“开始”生成补丁img</p></li><li><p>修补成功，会在sd卡根目录生成一个<strong>magisk_patched-版本_随机.img</strong></p></li><li><p>进入fastboot模式，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure></li><li><p>刷入magisk生成的img</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot magisk_patcerd_xxx.img</span><br></pre></td></tr></table></figure><ol start="7"><li>出现fish字样就是刷好了，然后重启进入手机，打开magisk app，会显示magsik的版本。</li></ol><p></p><h1 id="3-Magisk隐藏root"><a href="#3-Magisk隐藏root" class="headerlink" title="3.Magisk隐藏root"></a>3.Magisk隐藏root</h1><h2 id="1-magisk随机包名隐藏"><a href="#1-magisk随机包名隐藏" class="headerlink" title="1.magisk随机包名隐藏"></a>1.magisk随机包名隐藏</h2><p>magisk app 设置 –&gt; 隐藏Magisk应用 –&gt;  允许来自此来源的应用（开启）–&gt;  输入新应用名称 –&gt;成功修改包名 –&gt;继续安装。</p><h2 id="2-magisk隐藏root"><a href="#2-magisk隐藏root" class="headerlink" title="2.magisk隐藏root"></a>2.magisk隐藏root</h2><ol><li>安装shamiko模块，<a href="https://github.com/LSPosed/LSPosed.github.io/releases/tag/shamiko-126">Shamiko v0.6</a></li><li>magisk 右上角设置  -&gt; 打开 Zygisk选项-&gt;打开<code>配置排除列表</code> -&gt;选择需要隐藏root的app，需要把app下所有模块都选上。</li><li>重启手机。</li></ol><h1 id="4-抓包软件证书配置"><a href="#4-抓包软件证书配置" class="headerlink" title="4.抓包软件证书配置"></a>4.抓包软件证书配置</h1><ol><li><p>安装各种抓包软件（charles 、httpcanary）对应的证书，此时是安装在系统目录下。</p><p>用户目录</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/misc/user/0/cacerts-added/</span><br></pre></td></tr></table></figure><p>​系统目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/system/etc/security/cacerts</span><br></pre></td></tr></table></figure><ol start="2"><li><p>将用户证书移动到系统目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">申请root权限</span></span><br><span class="line">su root</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将系统文件系统重新挂载为可读写</span></span><br><span class="line">mount -o remount,rw /</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入用户证书目录</span></span><br><span class="line">cd /data/misc/user/0/cacerts-added</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移动证书到系统目录</span></span><br><span class="line">mv * /etc/security/cacerts/ </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将权限改为只读</span></span><br><span class="line">mount -o remount,ro /</span><br></pre></td></tr></table></figure></li><li><p>某些app采用固定证书时，还需要安装JustTrueMe模块。</p><ul><li>先安装LSPosed模块<a href="https://hub.fgit.ml/LSPosed/LSPosed/releases/latest">https://hub.fgit.ml/LSPosed/LSPosed/releases/latest</a></li><li>在安装JustTrustMe模块<a href="https://github.com/SekiBetu/JustTrustMe/releases">Releases · SekiBetu&#x2F;JustTrustMe (github.com)</a></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前手机已经刷机为pixelexperience 系统，为了root权限，折腾一下magisk。&lt;/p&gt;
&lt;h1 id=&quot;1-参考&quot;&gt;&lt;a href=&quot;#1-参考&quot; class=&quot;headerlink&quot; title=&quot;1.参考&quot;&gt;&lt;/a&gt;1.参考&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="刷机" scheme="https://yndongyong.github.io/tags/%E5%88%B7%E6%9C%BA/"/>
    
    <category term="root" scheme="https://yndongyong.github.io/tags/root/"/>
    
    <category term="magisk" scheme="https://yndongyong.github.io/tags/magisk/"/>
    
  </entry>
  
  <entry>
    <title>红米note 8 pro 刷pixelexperience</title>
    <link href="https://yndongyong.github.io/2023/02/10/%E7%BA%A2%E7%B1%B3note-8-pro-%E5%88%B7pixelexperience/"/>
    <id>https://yndongyong.github.io/2023/02/10/%E7%BA%A2%E7%B1%B3note-8-pro-%E5%88%B7pixelexperience/</id>
    <published>2023-02-10T09:43:22.000Z</published>
    <updated>2023-03-04T05:17:10.371Z</updated>
    
    <content type="html"><![CDATA[<p>这款手机官方的rom版本已经永久的停留在Android11，近期app的targetsdk已经升级到3（android12），没有一个android12 的手机属实不方便，便开始了刷机的折腾之路。</p><p><strong>pixelexperience</strong> 刷机包下载地址：<a href="https://get.pixelexperience.org/begonia">https://get.pixelexperience.org/begonia</a><br><strong>pixelexperience twrp下载地址：</strong><a href="https://get.pixelexperience.org/begonia">https://get.pixelexperience.org/begonia</a></p><p><strong>驱动安装</strong><br>刷机前请确保已近安装对应的驱动，或者通过安装小米手机助手PC安装驱动。<br>需先确保开发者选项开启，usb调试开启，本机有adb工具环境</p><p><strong>bootloader解锁</strong><br>参考官网解锁文档<a href="https://www.miui.com/unlock/index.html">https://www.miui.com/unlock/index.html</a><br>需要注册小米账号，绑定手机号，申请解锁（首次的申请的需要等待好久审核），申请通过之后在使用官方提供的解锁工具进行解锁，具体步骤：<br>1.进入“设置 -&gt; 开发者选项 -&gt; 设备解锁状态”中绑定账号和设备；<br>2.手动进入Bootloader模式（关机后，同时按住开机键和音量下键）；<br>3.通过USB连接手机，在解锁软件中点击 “解锁”按钮；</p><p><strong>刷入第三方recovery</strong></p><ol><li><p>pixelexperience 提供了专用的的twrp，下载地址：<a href="https://get.pixelexperience.org/begonia">https://get.pixelexperience.org/begonia</a></p></li><li><p>连接手机至电脑，关机状态下长按音量减+电源键进入fastboot模式，亦可通过下列命令进入</p><p><code>adb reboot bootloader</code></p></li><li><p>当手机进入fastboot模式，使用如下命令验证，正常的话会识别出可用设备，没有输出内容的话，大概率是驱动问题，可以去windows设备管理下看是否有android设备，处理驱动问题，小米提供的驱动文件在win11上安装不了，或者直接右键选择更新驱动设备，选择通用串口设备下的驱动。</p><p><code>fastboot devices</code></p></li><li><p>刷入recovery</p><p><code>fastboot flash recovery &lt;recovery_filename&gt;.img</code></p></li><li><p>当刷入recovery完成时，直接安装音量加+电源键，进入recovery模式，这一步千万不能直接进入系统，否者recovery又会被替换为官方的。</p></li></ol><p><strong>刷入rom</strong></p><ol><li><p>进入recovery后，清除数据 Factory Reset -&gt; Format data &#x2F; factory reset</p></li><li><p>返回主界面，通过“Apply Update”-&gt; “Apply from ADB” 刷入rom，执行以下命令：</p><p><code>adb sideload rom_name.zip</code></p></li><li><p>刷好之后，返回主界面选择 “Reboot system now ” 重启系统。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这款手机官方的rom版本已经永久的停留在Android11，近期app的targetsdk已经升级到3（android12），没有一个android12 的手机属实不方便，便开始了刷机的折腾之路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pixelexperience&lt;/strong</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>aosp编译环境搭建以及构建镜像</title>
    <link href="https://yndongyong.github.io/2023/02/06/aosp%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/"/>
    <id>https://yndongyong.github.io/2023/02/06/aosp%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/</id>
    <published>2023-02-06T07:58:50.000Z</published>
    <updated>2023-03-04T05:13:32.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-参考文档"><a href="#1-参考文档" class="headerlink" title="1. 参考文档"></a>1. 参考文档</h1><ul><li><a href="https://source.android.com/docs/setup/create/cuttlefish?hl=zh-cn">Cuttlefish 虚拟安卓设备  |  Android 开源项目  |  Android Open Source Project</a>  官网对cuttlefish的介绍以及搭建</li><li><a href="https://source.android.com/docs/setup/create/cuttlefish-restart?hl=zh-cn">墨鱼：重启和重置  |  Android 开源项目  |  Android Open Source Project</a> cutterfish相关操作命令</li><li><a href="https://source.android.com/docs/setup/start?hl=zh-cn">Android 开发者代码实验室  |  Android 开源项目  |  Android Open Source Project</a> 官网队aosp环境搭建介绍</li><li><a href="https://source.android.com/docs/setup/download/downloading?hl=zh-cn">下载源代码  |  Android 开源项目  |  Android Open Source Project</a> 官网源码下载的介绍</li></ul><h1 id="2-硬件要求"><a href="#2-硬件要求" class="headerlink" title="2.硬件要求"></a>2.硬件要求</h1><ul><li>需要 64 位环境linux</li><li>硬盘容量至少500G，代码检出（aosp-master分支：350G左右）与编译（150G左右）均需要大量硬盘空间，<del>最后综合考虑检出的是android10分支的代码，硬盘占用少（120G多），编译耗时也会相应减少。</del>后面发现使用cuttlefish模拟器在Android11&#x2F;12上才开始退出，又再次下载了Android12的r26分支，编译使用cuttlefish启动不了编译好的镜像，在android issue网站上看到队intel 11&#x2F;12th的cpu支持有问题，已经在master分支上修复，最终检出aosp-master分支，有从头开始编译，这又是另外一个悲伤的故事。</li><li>内存16G起步，越大越好，本机为24G（实际可用23G），在不配置swap的情况下，多次爆内存，表现为terminal闪退。</li></ul><blockquote><p>从 2021 年 6 月起，Google 使用 72 核机器，内置 RAM 为 64 GB，完整构建过程大约需要 40 分钟（增量构建只需几分钟时间，具体取决于修改了哪些文件）。相比之下，RAM 数量相近的 6 核机器执行完整构建过程需要 3 个小时。</p></blockquote><p>开发机时间数据：在cpu为Intel-i5 1135G（4核心8线程），24G内存+8G Swap，编译android13,过程大约持续4个小时。编译Android10大约耗时：3个半小时（3个小时20多分）</p><h1 id="3-软件要求"><a href="#3-软件要求" class="headerlink" title="3.软件要求"></a>3.软件要求</h1><ul><li><p>操作系统Ubuntu20.4，如果需要使用cuttlefish模拟器，在该版本下可以避免很多依赖问题。编译aosp可用在Ubuntu18.04、Ubuntu22版本下进行，经过实验都可以正常编译成功，但是cuttlefish在这些版本下的依赖有很多问题，cuttlefish的部署debhelper-compat的12以及以上，但在Ubuntu18下，debhelper-compat为11，无法升级。在Ubuntu22下，descripte依赖版本又太高，降级的话还把在桌面环境搞坏掉，因此强烈推荐在Ubuntu20下搭建编译环境。</p></li><li><p>验证 KVM 可用性,返回一个数值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c -w &quot;vmx\|svm&quot; /proc/cpuinfo</span><br></pre></td></tr></table></figure></li><li><p>编译所需要的依赖</p><p><code>sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig</code></p><p>aosp源码内包含了用于构建的jdk、python版本了。</p></li><li><p>swap配置，物理内存不足有爆内存的可能。</p><ul><li>创建swap文件,这里设置为8G</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停用 SWAP</span></span><br><span class="line">sudo swapoff -v /swapfile</span><br><span class="line"><span class="comment">#8g</span></span><br><span class="line">sudo <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1024M count=8</span><br><span class="line"><span class="comment">#设置读写权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line"><span class="comment">#标注swap区域</span></span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line"><span class="comment">#激活swap分区</span></span><br><span class="line">sudo swapon /swapfile</span><br><span class="line"><span class="comment">#查看swap是否工作</span></span><br><span class="line">sudo swapon --show</span><br><span class="line">sudo free -h</span><br><span class="line"><span class="comment">#将创建的 SWAP 分区设置为永久分区（开机自启）,将 SWAP 路径写入到/etc/fstab文件中</span></span><br><span class="line">/swapfile swap swap defaults 0 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他命令</span></span><br><span class="line"><span class="comment">#停用 SWAP</span></span><br><span class="line">sudo swapoff -v /swapfile</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">sudo <span class="built_in">rm</span> /swapfile</span><br></pre></td></tr></table></figure><p>实践看下来swap只占用了一般。</p></li></ul><h1 id="4-安装-Cuttlefish"><a href="#4-安装-Cuttlefish" class="headerlink" title="4.安装 Cuttlefish"></a>4.安装 Cuttlefish</h1><h2 id="4-1在终端窗口中，下载、构建和安装主机-Debian-软件包："><a href="#4-1在终端窗口中，下载、构建和安装主机-Debian-软件包：" class="headerlink" title="4.1在终端窗口中，下载、构建和安装主机 Debian 软件包："></a>4.1在终端窗口中，下载、构建和安装主机 Debian 软件包：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y git devscripts config-package-dev debhelper-compat golang curl</span><br><span class="line">git clone https://github.com/google/android-cuttlefish</span><br><span class="line">cd android-cuttlefish</span><br><span class="line">for dir in base frontend; do</span><br><span class="line">  cd $dir</span><br><span class="line">  debuild -i -us -uc -b -d</span><br><span class="line">  cd ..</span><br><span class="line">done</span><br><span class="line">sudo dpkg -i ./cuttlefish-base_*_*64.deb || sudo apt-get install -f</span><br><span class="line">sudo dpkg -i ./cuttlefish-user_*_*64.deb || sudo apt-get install -f</span><br><span class="line">sudo usermod -aG kvm,cvdnetwork,render $USER</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h1 id="5-编译aosp"><a href="#5-编译aosp" class="headerlink" title="5.编译aosp"></a>5.编译aosp</h1><h2 id="5-1安装repo"><a href="#5-1安装repo" class="headerlink" title="5.1安装repo"></a>5.1安装repo</h2><p>Android源码aosp包含了数百个git库，为了管理好这些git库，google开发repo工具，是一系列pythone脚本对git的封装，用来简化管理aosp的源码。</p><p>首要先安装git curl，python ubuntu20已近自带了，没有的话也需要安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git curl</span><br></pre></td></tr></table></figure><p>值得注意的地方Ubuntu20安装的是python3，需要将python链接到python3，repo环境下有影响。</p><p><code>sudo ln -s /usr/bin/python3 /usr/bin/python</code></p><p>接下来创建bin，并加入到PATH中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:$PATH</span><br></pre></td></tr></table></figure><p>下载repo并设置权限，这里使用的清华的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure><h2 id="5-2-下载源码"><a href="#5-2-下载源码" class="headerlink" title="5.2 下载源码"></a>5.2 下载源码</h2><p>建立工作目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir android_aosp</span><br><span class="line">cd android_aosp</span><br></pre></td></tr></table></figure><p>指定repo tuna的源用于更新自己，~&#x2F;.zshrc里添加：</p><p>指定repo更新 使用tuna的源 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> REPO_URL=<span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#x27;</span></span><br></pre></td></tr></table></figure><p>初始化仓库，可以通过-b指定版本,例如  -b android-12.1.0_r26</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest</span><br></pre></td></tr></table></figure><p>至于要下载哪些分支的源码，分支列表参见<a href="https://source.android.com/docs/setup/about/build-numbers?hl=zh-cn#source-code-tags-and-builds">代号、标记和 build 号  |  Android 开源项目  |  Android Open Source Project</a></p><p>同步源码:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo <span class="built_in">sync</span></span><br></pre></td></tr></table></figure><p>需要经过漫长的等等。晚上估计需要下载3,4个小时。</p><h1 id="6-编译镜像"><a href="#6-编译镜像" class="headerlink" title="6.编译镜像"></a>6.编译镜像</h1><p>使用 <code>envsetup.sh</code> 脚本初始化环境：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br></pre></td></tr></table></figure><p>使用lunch 选择要构建的目标,因为要使用cutterfish模拟器，所以使用_cf相关的，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lunch aosp_cf_x86_64_phone-userdebug</span><br></pre></td></tr></table></figure><p>userdebug代表构建类型，一共有三种构建类型，</p><table><thead><tr><th align="left">构建类型</th><th align="left">使用情况</th></tr></thead><tbody><tr><td align="left">user</td><td align="left">权限受限；适用于生产环境</td></tr><tr><td align="left">userdebug</td><td align="left">与“user”类似，但具有 root 权限和调试功能；是进行调试时的首选编译类型</td></tr><tr><td align="left">eng</td><td align="left">具有额外调试工具的开发配置</td></tr></tbody></table><p>构建代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m</span><br></pre></td></tr></table></figure><p>构建过程依据机器配置的不同，需要几个小时的时间。</p><p>构建产物生成目录</p><p><code>out/producte/</code></p><h2 id="6-1相关构建命令"><a href="#6-1相关构建命令" class="headerlink" title="6.1相关构建命令"></a>6.1相关构建命令</h2><p><strong>m</strong> - 从树的顶部运行构建系统，全量编译。</p><p><strong>mma</strong> - 构建当前目录中的所有模块及其依赖项。</p><p><strong>mmma</strong> - 构建提供的目录中的所有模块及其依赖项。</p><p><strong>croot</strong> - <code>cd</code> 到树顶部。</p><p><strong>clean</strong> - <code>m clean</code> 会删除此配置的所有输出和中间文件.</p><h1 id="7-使用cutterfish启动aosp构建"><a href="#7-使用cutterfish启动aosp构建" class="headerlink" title="7. 使用cutterfish启动aosp构建"></a>7. 使用cutterfish启动aosp构建</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launch_cvd --daemon --start_webrtc=true</span><br></pre></td></tr></table></figure><p>访问<strong><a href="https://localhost:8443/">https://localhost:8443</a></strong>与虚拟设备交互</p><h2 id="7-1cutterfisn先关命令"><a href="#7-1cutterfisn先关命令" class="headerlink" title="7.1cutterfisn先关命令"></a>7.1cutterfisn先关命令</h2><p><strong>launch_cvd</strong> - 启动设备</p><p><strong>powerwash_cvd</strong> -将一个 Cuttlefish 设备重置为其初始磁盘状态</p><p><strong>stop_cvd</strong> - 执行不正常关机并停止设备</p><p><strong>adb reboot</strong> - 使设备完成完整的关机过程，将更改同步到磁盘并确保进程关闭</p><p><strong>restart_cvd</strong> -立即关闭 Cuttlefish 设备执行不正常关机，相当于将电池断开并重新连接到物理设</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-参考文档&quot;&gt;&lt;a href=&quot;#1-参考文档&quot; class=&quot;headerlink&quot; title=&quot;1. 参考文档&quot;&gt;&lt;/a&gt;1. 参考文档&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://source.android.com/docs/setup</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="framework" scheme="https://yndongyong.github.io/categories/framework/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Adnroid gradle plugin 升级到7问题记录</title>
    <link href="https://yndongyong.github.io/2022/12/11/Adnroid-gradle-plugin-%E5%8D%87%E7%BA%A7%E5%88%B07%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://yndongyong.github.io/2022/12/11/Adnroid-gradle-plugin-%E5%8D%87%E7%BA%A7%E5%88%B07%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-11T03:18:54.000Z</published>
    <updated>2023-03-04T02:21:38.876Z</updated>
    
    <content type="html"><![CDATA[<p>问题1</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">FAILURE:</span> Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went <span class="attr">wrong:</span></span><br><span class="line">A problem occurred configuring root project <span class="string">&#x27;xxxxxx&#x27;</span>.</span><br><span class="line">&gt; Could not resolve all dependencies <span class="keyword">for</span> configuration <span class="string">&#x27;:classpath&#x27;</span>.</span><br><span class="line">   &gt; Using insecure protocols with repositories, without explicit opt-<span class="keyword">in</span>, is unsupported. Switch Maven repository <span class="string">&#x27;maven2(http://xxxxx/repository/xxxxandroid/)&#x27;</span> to redirect to a secure protocol (like HTTPS) or allow insecure protocols. See <span class="attr">https:</span><span class="comment">//docs.gradle.org/7.3.3/dsl/org.gradle.api.artifacts.repositories.UrlArtifactRepository.html#org.gradle.api.artifacts.repositories.UrlArtifactRepository:allowInsecureProtocol for more details. </span></span><br><span class="line"></span><br><span class="line">* <span class="attr">Try:</span></span><br><span class="line">&gt; Run with --info or --debug option to get more log output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置变更</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&quot;file://$rootDir/$&#123;local_mvn&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&quot;$&#123;ty_mvn&#125;&quot;</span></span><br><span class="line">            credentials &#123;</span><br><span class="line">                username xxx_name</span><br><span class="line">                password xxx_pwd</span><br><span class="line">            &#125;</span><br><span class="line">            allowInsecureProtocol = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 华为 maven 仓库地址</span></span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;http://developer.huawei.com/repo/&#x27;</span></span><br><span class="line">            allowInsecureProtocol = <span class="literal">true</span></span><br><span class="line">        &#125;    </span><br><span class="line">        maven &#123; url <span class="string">&quot;$&#123;ali_public&#125;&quot;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&quot;$&#123;ali_google&#125;&quot;</span> &#125;</span><br><span class="line">        google()</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入的该语句 <code>allowInsecureProtocol=true</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;问题1&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    <category term="android studio" scheme="https://yndongyong.github.io/categories/android-studio/"/>
    
    <category term="flutter" scheme="https://yndongyong.github.io/categories/flutter/"/>
    
    <category term="compose" scheme="https://yndongyong.github.io/categories/compose/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>gradle修改默认路径迁移</title>
    <link href="https://yndongyong.github.io/2022/11/07/gradle%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84%E8%BF%81%E7%A7%BB/"/>
    <id>https://yndongyong.github.io/2022/11/07/gradle%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84%E8%BF%81%E7%A7%BB/</id>
    <published>2022-11-07T06:12:13.000Z</published>
    <updated>2023-03-04T02:17:24.737Z</updated>
    
    <content type="html"><![CDATA[<p><code>gradle</code>文件夹会越来越膨胀，有全局缓存，依赖库文件、编译缓存。过不来多久c盘就红了，清理了好几次，过不了多久又再次变得很大；而且清理之后再次打开一些不常用的项目时，需要重新下载各种依赖和库，耽搁时间，所以有必要迁移到其他盘上。</p><ol><li>将<code>C:\Users\用户名\.gradle</code> 的目录复制到目标文件下，比如：<code>D:\.gradle</code></li><li>新建环境变量 <code>GRADLE_USER_HOME</code>，值为新的.gradle文件夹的路径</li><li><code>android studio</code> 更新<code>gradle user home</code> 的路径为新路径，若没有设置过，<code>android studio</code> 会自动以 <code>GRADLE_USER_HOME</code>  环境变量指定的为准</li><li>重启电脑，如果c盘下的文件迁移不干净，可以支持删除整个文件夹了</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;gradle&lt;/code&gt;文件夹会越来越膨胀，有全局缓存，依赖库文件、编译缓存。过不来多久c盘就红了，清理了好几次，过不了多久又再次变得很大；而且清理之后再次打开一些不常用的项目时，需要重新下载各种依赖和库，耽搁时间，所以有必要迁移到其他盘上。&lt;/p&gt;
&lt;ol&gt;</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    <category term="android studio" scheme="https://yndongyong.github.io/categories/android-studio/"/>
    
    <category term="flutter" scheme="https://yndongyong.github.io/categories/flutter/"/>
    
    <category term="compose" scheme="https://yndongyong.github.io/categories/compose/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android Plugin开发 idea的环境配置</title>
    <link href="https://yndongyong.github.io/2022/11/04/Android-Plugin%E5%BC%80%E5%8F%91-idea%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://yndongyong.github.io/2022/11/04/Android-Plugin%E5%BC%80%E5%8F%91-idea%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2022-11-04T02:07:31.000Z</published>
    <updated>2023-03-04T02:10:59.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1 环境配置"></a>1 环境配置</h3><p>插件的build.gradle的配置，一开始各种配置不对，后期研究了文档之后方向，两种可以正常编译运行的方式。</p><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java&#x27;</span><br><span class="line">    id &#x27;org.jetbrains.kotlin.jvm&#x27; version &#x27;1.6.0&#x27;</span><br><span class="line">    id &#x27;org.jetbrains.intellij&#x27; version &#x27;1.6.0&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group &#x27;com.github.Joehaivo&#x27;</span><br><span class="line">version &#x27;0.1.0-SNAPSHOT&#x27;</span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib:1.6.0&quot;</span><br><span class="line">    testImplementation &#x27;org.junit.jupiter:junit-jupiter-api:5.7.0&#x27;</span><br><span class="line">    testRuntimeOnly &#x27;org.junit.jupiter:junit-jupiter-engine:5.7.0&#x27;</span><br><span class="line"></span><br><span class="line">    // https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox</span><br><span class="line">    implementation &#x27;org.apache.pdfbox:fontbox:3.0.0-alpha2&#x27;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//jar &#123;</span><br><span class="line">//    from configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">// See https://github.com/JetBrains/gradle-intellij-plugin/</span><br><span class="line">intellij &#123;</span><br><span class="line">//    version = &#x27;2020.1&#x27;</span><br><span class="line">    version = &#x27;2021.2&#x27;</span><br><span class="line">//    localPath = project.hasProperty(&quot;StudioRunPath&quot;) ? StudioRunPath : StudioCompilePath</span><br><span class="line">    type = &quot;IC&quot;</span><br><span class="line">    plugins = [&quot;android&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runIde &#123;</span><br><span class="line">    // Absolute path to installed target 3.5 Android Studio to use as</span><br><span class="line">    // IDE Development Instance (the &quot;Contents&quot; directory is macOS specific):</span><br><span class="line">    ideDir = file(&quot;D:\\Android\\android-studio&quot;)</span><br><span class="line">&#125;</span><br><span class="line">buildSearchableOptions &#123;</span><br><span class="line">    enabled = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">patchPluginXml &#123;</span><br><span class="line">    changeNotes = &quot;&quot;&quot;</span><br><span class="line">      Add IconFontViewer plugin.&lt;br&gt;</span><br><span class="line">      &lt;em&gt;happy to used&lt;/em&gt;&quot;&quot;&quot;</span><br><span class="line">    sinceBuild = &#x27;191&#x27;</span><br><span class="line">    untilBuild = &#x27;222.*&#x27;</span><br><span class="line">&#125;</span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = &quot;UTF-8&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;org.jetbrains.kotlin.jvm&#x27;</span> version <span class="string">&#x27;1.6.0&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;org.jetbrains.intellij&#x27;</span> version <span class="string">&#x27;1.6.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;com.github.Joehaivo&#x27;</span></span><br><span class="line">version <span class="string">&#x27;0.1.0-SNAPSHOT&#x27;</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.6.0&quot;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.7.0&#x27;</span></span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.7.0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox</span></span><br><span class="line">    implementation <span class="string">&#x27;org.apache.pdfbox:fontbox:3.0.0-alpha2&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jar &#123;</span></span><br><span class="line"><span class="comment">//    from configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// See https://github.com/JetBrains/gradle-intellij-plugin/</span></span><br><span class="line">intellij &#123;</span><br><span class="line">    <span class="comment">//    version = &#x27;2020.1&#x27;</span></span><br><span class="line">    <span class="comment">//    version = &#x27;2021.2&#x27;</span></span><br><span class="line">    localPath = project.hasProperty(<span class="string">&quot;StudioRunPath&quot;</span>) ? StudioRunPath : StudioCompilePath</span><br><span class="line">    type = <span class="string">&quot;IC&quot;</span></span><br><span class="line">    plugins = [<span class="string">&quot;android&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*runIde &#123;</span></span><br><span class="line"><span class="comment">// Absolute path to installed target 3.5 Android Studio to use as</span></span><br><span class="line"><span class="comment">// IDE Development Instance (the &quot;Contents&quot; directory is macOS specific):</span></span><br><span class="line"><span class="comment">ideDir = file(&quot;D:\\Android\\android-studio&quot;)</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">buildSearchableOptions &#123;</span><br><span class="line">    enabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">patchPluginXml &#123;</span><br><span class="line">    changeNotes = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Add IconFontViewer plugin.&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;em&gt;happy to used&lt;/em&gt;&quot;&quot;&quot;</span></span><br><span class="line">    sinceBuild = <span class="string">&#x27;191&#x27;</span></span><br><span class="line">    untilBuild = <span class="string">&#x27;222.*&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外需要注意下：plugin.xml中需要如果有单独是针对Android 平台的相关的配置，是需要加入对Android平台的配置支持的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depends</span>&gt;</span>com.intellij.modules.platform<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depends</span>&gt;</span>com.intellij.modules.androidstudio<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depends</span>&gt;</span>org.jetbrains.android<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><p>在前期的过程中，需要如果gradle的使用的版本高于6.6 ，需要配合JDK11，否则编译过程中会报handler_shake xx的错误。是jdk的版本过低，本机就是java8.<br>要是还报错的话，的要挂梯子了。后面再次搭建环境，遇到了这个报错，通过换了不同的节点处理的，等编译过一遍之后还需要关闭梯子，否则会报其他的错误，不影响编译的问题。</p><p>对于引入了第三方的jar的插件，生成的plugin的格式是zip格式，在安装插件的时候要引入zip格式的。如果引入了jar包格式的，会不正常。<br>插件的生成目录是build&#x2F;distributions</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-环境配置&quot;&gt;&lt;a href=&quot;#1-环境配置&quot; class=&quot;headerlink&quot; title=&quot;1 环境配置&quot;&gt;&lt;/a&gt;1 环境配置&lt;/h3&gt;&lt;p&gt;插件的build.gradle的配置，一开始各种配置不对，后期研究了文档之后方向，两种可以正常编译运行的方式</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    <category term="android studio" scheme="https://yndongyong.github.io/categories/android-studio/"/>
    
    <category term="flutter" scheme="https://yndongyong.github.io/categories/flutter/"/>
    
    <category term="compose" scheme="https://yndongyong.github.io/categories/compose/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>EventBus源码分析</title>
    <link href="https://yndongyong.github.io/2022/10/18/EventBus%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://yndongyong.github.io/2022/10/18/EventBus%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2022-10-18T08:05:11.000Z</published>
    <updated>2022-11-08T09:43:07.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><blockquote><p>EventBus is a publish&#x2F;subscribe event bus for Android and Java.</p></blockquote><p>EventBus 是基于发布-订阅模式（也叫观察模式）的事件总线框架。在Android开发中，常用于组件之间的通信与数据传输，可以有效的进行组件之间的解耦。例如，Activity之间、与Fragment的参数传递，事件通知等。</p><h3 id="有什么特点"><a href="#有什么特点" class="headerlink" title="有什么特点"></a>有什么特点</h3><ul><li><p>使用简单，如果这也算一个优点的话。相比LocalBroadcastManager使用是真的简单。</p></li><li><p>有五种线程模式，支持订阅方法执行在指定的线程。</p></li><li><p>可以指定订阅者的优先级，按优先级处理事件，还可以拦截事件。</p></li><li><p>3.0版本之前使用的运行时的反射收集事件的订阅方法，有一定的性能损耗，但3.0之后使用了Apt技术，编译时期就完成了订阅事件的收集。</p></li></ul><h3 id="有什么缺点"><a href="#有什么缺点" class="headerlink" title="有什么缺点"></a>有什么缺点</h3><ul><li>没有生命周期感知的功能</li></ul><p>注册和反注册需要成对的出现，如果忘记反注册可能会导致内存泄漏的问题发生，特别是在Activity、Fragment中使用时。毕竟这个框架出现的时间可比LifeCycle出现的早很多了。</p><ul><li>不克制使用的话，会造成大量事件的满天飞，同时也导致POJO类的膨胀。</li></ul><p>需要为Event事件专门定义java类，针对数据传输的场景，难以复用Event。</p><h3 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h3><p>使用方式就不介绍了，参见官网：<a href="http://greenrobot.org/eventbus/">http://greenrobot.org/eventbus/</a></p><h3 id="是如何运行的"><a href="#是如何运行的" class="headerlink" title="是如何运行的"></a>是如何运行的</h3><p>基于3.6.0版本进行源码分析。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>Event ：事件，分为普通事件和粘性事件（StickyEvent），通常定义为一个键的pojo类。</li><li>Publisher：发布者，使用post方法发布事件。</li><li>Subscriber：订阅者，订阅关心的Event，在指定的线程执行。</li></ul><p>先贴出一下EventBus类中的几个关键的缓存map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class EventBus &#123;</span><br><span class="line"></span><br><span class="line">    static volatile EventBus defaultInstance;</span><br><span class="line"></span><br><span class="line">    private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();</span><br><span class="line">    //key:event class ,values:event class 已经event class的父类</span><br><span class="line">    private static final Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; eventTypesCache = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    //    key:event，values:订阅了某个事件的所有订阅者的集合</span><br><span class="line">    private final Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</span><br><span class="line">    //    key:订阅者，values:订阅的所有event class</span><br><span class="line">    private final Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</span><br><span class="line">    //粘性事件，key:eventType class ：事件对象 ，粘性消息重复添加的话，只会保存最后一个</span><br><span class="line">    private final Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents;</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册订阅者"><a href="#注册订阅者" class="headerlink" title="注册订阅者"></a>注册订阅者</h4><p>入口在Eventbus的register</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Object subscriber)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (AndroidDependenciesDetector.isAndroidSDKAvailable() &amp;&amp; !AndroidDependenciesDetector.areAndroidComponentsAvailable()) &#123;</span><br><span class="line">            <span class="comment">// Crash if the user (developer) has not imported the Android compatibility library.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;It looks like you are using EventBus on Android, &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;make sure to add the \&quot;eventbus\&quot; Android library to your dependencies.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class="line">    <span class="comment">//步骤1</span></span><br><span class="line">        List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">                <span class="comment">//步骤2</span></span><br><span class="line">                subscribe(subscriber, subscriberMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="收集事件订阅"><a href="#收集事件订阅" class="headerlink" title="收集事件订阅"></a>收集事件订阅</h4><p>拿到<code>subscriber</code>的class，使用<code>subscriberMethodFinder</code>找出当前class以及父类下的所有订阅方法，跟一下<code>findSubscriberMethods</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SubscriberMethod&gt; <span class="title function_">findSubscriberMethods</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> &#123;</span><br><span class="line"><span class="comment">//        从缓存中找 事件的处理方法集合</span></span><br><span class="line">        List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</span><br><span class="line">        <span class="keyword">if</span> (subscriberMethods != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//evebuts 3.0 之前逻辑,反射收集</span></span><br><span class="line">        <span class="keyword">if</span> (ignoreGeneratedIndex) &#123;</span><br><span class="line">            subscriberMethods = findUsingReflection(subscriberClass);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//3.0之后的版本使用apt，编译时就生成了索引类，</span></span><br><span class="line">            <span class="comment">//索引类的添加EventBus.builder().addIndex(new MyEventBusIndex()).installDefaultEventBus();</span></span><br><span class="line">            subscriberMethods = findUsingInfo(subscriberClass);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//进行了注册，但是没有@Subscriber的方法，就抛出异常。</span></span><br><span class="line">        <span class="keyword">if</span> (subscriberMethods.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EventBusException</span>(<span class="string">&quot;Subscriber &quot;</span> + subscriberClass</span><br><span class="line">                    + <span class="string">&quot; and its super classes have no public methods with the @Subscribe annotation&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            METHOD_CACHE.put(subscriberClass, subscriberMethods);</span><br><span class="line">            <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先看一下<code>HEAD_CACHE</code>的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//    key:订阅者类，values：某一事件的所有处理方法的集合</span><br><span class="line">    private static final Map&lt;Class&lt;?&gt;, List&lt;SubscriberMethod&gt;&gt; METHOD_CACHE = new ConcurrentHashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>查找时，先从<code>METHOD_CACHE</code>缓存中查找，在<code>METHOD_CACHE</code>缓存没有命中时，3.0之前的版本使用反射的方式查找，3.0的版本冲Apt时期生成的索引类中的查找。找到是放入<code>METHOD_CACHE</code>中。</p><p>在进行重复注册与反注册的场景，可以有效避免反复查找的问题，比如，一个事件只在<code>Activity</code>可见阶段才感兴趣的情况，就会在<code>onResume</code>生命周期进行注册，在<code>onPause</code>的生命周期进行反注册。这个空间换时间的缓存机制，就可以避免二次查找。</p><h5 id="3-0之前反射方式"><a href="#3-0之前反射方式" class="headerlink" title="3.0之前反射方式"></a>3.0之前反射方式</h5><p>看一下3.0之前的反射方式的，主要跟一下<code>findUsingReflection</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title function_">findUsingReflection</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> &#123;</span><br><span class="line"><span class="comment">//        prepareFindState object pool 防止频繁创建对象，</span></span><br><span class="line">        <span class="type">FindState</span> <span class="variable">findState</span> <span class="operator">=</span> prepareFindState();</span><br><span class="line">        findState.initForSubscriber(subscriberClass);</span><br><span class="line"><span class="comment">//        clazz 订阅者，或者订阅者的分类</span></span><br><span class="line">        <span class="keyword">while</span> (findState.clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//通过反射 收集订阅者的事件处理方法</span></span><br><span class="line">            findUsingReflectionInSingleClass(findState);</span><br><span class="line">            <span class="comment">//在父类中，收集一遍，直接系统类时，clazz = false,结束递归</span></span><br><span class="line">            findState.moveToSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回事件处理集合，并且重置findState，将尝试将findState放回对象池中</span></span><br><span class="line">        <span class="keyword">return</span> getMethodsAndRelease(findState);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用迭代的方式，收集订阅者以及父类中的订阅方法，直到找到系统类是退出迭代。</p><p><code>FindState</code>用于存放查找过程中的各种现相关信息，使用了对象池，避免频繁的对象创建，又再一次用空间换时间，同时也可以避免频繁的GC，造成内存抖动，引起卡顿。</p><p>该类的部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FindState</span> &#123;</span><br><span class="line">        <span class="comment">//当前订阅类以及父类中，事件的所有处理订阅方法</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;SubscriberMethod&gt; subscriberMethods = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//key：eventType,value: eventType的处理的方法</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;Class, Object&gt; anyMethodByEventType = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//key：处理方法的字符串化，value：订阅类</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Class&gt; subscriberClassByMethodKey = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">methodKeyBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅者</span></span><br><span class="line">        Class&lt;?&gt; subscriberClass;</span><br><span class="line"><span class="comment">//        订阅者的父类，有可能有</span></span><br><span class="line">        Class&lt;?&gt; clazz;</span><br><span class="line">        <span class="type">boolean</span> skipSuperClasses;</span><br><span class="line">     <span class="comment">//APT先关的索引信息</span></span><br><span class="line">        SubscriberInfo subscriberInfo;</span><br></pre></td></tr></table></figure><p>之后就到了<code>findUsingReflectionInSingleClass</code>方法。见名知意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findUsingReflectionInSingleClass</span><span class="params">(FindState findState)</span> &#123;</span><br><span class="line">        Method[] methods;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// This is faster than getMethods, especially when subscribers are fat classes like Activities</span></span><br><span class="line">            methods = findState.clazz.getDeclaredMethods();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">            <span class="comment">// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                methods = findState.clazz.getMethods();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LinkageError error) &#123; <span class="comment">// super class of NoClassDefFoundError to be a bit more broad...</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Could not inspect methods of &quot;</span> + findState.clazz.getName();</span><br><span class="line">                <span class="keyword">if</span> (ignoreGeneratedIndex) &#123;</span><br><span class="line">                    msg += <span class="string">&quot;. Please consider using EventBus annotation processor to avoid reflection.&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    msg += <span class="string">&quot;. Please make this class visible to EventBus annotation processor to avoid reflection.&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EventBusException</span>(msg, error);</span><br><span class="line">            &#125;</span><br><span class="line">            findState.skipSuperClasses = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        从这里可以看出来，为啥处理事件的方法需要是定义为public，已经方法参数只能有一个的要求，因为反射的查找的缘故。</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> method.getModifiers();</span><br><span class="line"><span class="comment">//            只能是public，非静态、非抽象类</span></span><br><span class="line">            <span class="keyword">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">                <span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">Subscribe</span> <span class="variable">subscribeAnnotation</span> <span class="operator">=</span> method.getAnnotation(Subscribe.class);</span><br><span class="line">                    <span class="keyword">if</span> (subscribeAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">                        Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//关键点1</span></span><br><span class="line">                        <span class="keyword">if</span> (findState.checkAdd(method, eventType)) &#123;</span><br><span class="line">                            <span class="type">ThreadMode</span> <span class="variable">threadMode</span> <span class="operator">=</span> subscribeAnnotation.threadMode();</span><br><span class="line">                            <span class="comment">//将方法、event、threadmod、优先级、是否是粘性包装到SubscriberMethod中</span></span><br><span class="line">                            findState.subscriberMethods.add(<span class="keyword">new</span> <span class="title class_">SubscriberMethod</span>(method, eventType, threadMode,</span><br><span class="line">                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span> + method.getName();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EventBusException</span>(<span class="string">&quot;@Subscribe method &quot;</span> + methodName +</span><br><span class="line">                            <span class="string">&quot;must have exactly 1 parameter but has &quot;</span> + parameterTypes.length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span> + method.getName();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EventBusException</span>(methodName +</span><br><span class="line">                        <span class="string">&quot; is a illegal @Subscribe method: must be public, non-static, and non-abstract&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>找到<code>@Subscribe</code>注解的非<code>static</code>的、<code>public</code>的，有且仅有一个参数的方法，包装到<code>SubscriberMethod</code>中，解析ThreadMode、优先级priority、是否是粘性事件。</p><p>其中<code>findState.checkAdd(method, eventType)</code>,处理了子类和父类中，是否存在订阅方法重新的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查了子类是否有重写重复的方法。有的话需要使用之类的方法。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">checkAdd</span><span class="params">(Method method, Class&lt;?&gt; eventType)</span> &#123;</span><br><span class="line">            <span class="comment">// 2 level check: 1st level with event type only (fast), 2nd level with complete signature when required.</span></span><br><span class="line">            <span class="comment">// Usually a subscriber doesn&#x27;t have methods listening to the same event type.</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">existing</span> <span class="operator">=</span> anyMethodByEventType.put(eventType, method);</span><br><span class="line">            <span class="keyword">if</span> (existing == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (existing <span class="keyword">instanceof</span> Method) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!checkAddWithMethodSignature((Method) existing, eventType)) &#123;</span><br><span class="line">                        <span class="comment">// Paranoia check</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Put any non-Method object to &quot;consume&quot; the existing Method</span></span><br><span class="line">                    anyMethodByEventType.put(eventType, <span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> checkAddWithMethodSignature(method, eventType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="3-0之后APT技术"><a href="#3-0之后APT技术" class="headerlink" title="3.0之后APT技术"></a>3.0之后APT技术</h5><p>​使用<code>EventBusAnnotationProcessor</code>在编译器，遍历所有的类 ，搜集订阅者与订阅方法，最终生成一个实现<code>SubscriberInfoIndex</code>的类，然后在EventBus初始化是调用addIndex方法使用。</p><p>使用findUsingInfo查找所有订阅者的订阅方法,思路和3.0之前的版本一直，但是多了一个降级策略.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title function_">findUsingInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> &#123;</span><br><span class="line">    <span class="type">FindState</span> <span class="variable">findState</span> <span class="operator">=</span> prepareFindState();</span><br><span class="line">    findState.initForSubscriber(subscriberClass);</span><br><span class="line">    <span class="keyword">while</span> (findState.clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">        findState.subscriberInfo = getSubscriberInfo(findState);</span><br><span class="line">        <span class="keyword">if</span> (findState.subscriberInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</span><br><span class="line">            <span class="keyword">for</span> (SubscriberMethod subscriberMethod : array) &#123;</span><br><span class="line">                <span class="keyword">if</span> (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</span><br><span class="line">                    findState.subscriberMethods.add(subscriberMethod);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//降级策略</span></span><br><span class="line">            findUsingReflectionInSingleClass(findState);</span><br><span class="line">        &#125;</span><br><span class="line">        findState.moveToSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getMethodsAndRelease(findState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="粘性事件分发"><a href="#粘性事件分发" class="headerlink" title="粘性事件分发"></a>粘性事件分发</h4><p>通过步骤 1， 拿到所有的事件订阅方法，然后进行订阅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">    <span class="comment">//步骤2</span></span><br><span class="line">    subscribe(subscriber, subscriberMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class="line">        <span class="type">Subscription</span> <span class="variable">newSubscription</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Subscription</span>(subscriber, subscriberMethod);</span><br><span class="line"><span class="comment">//        获取该事件的所有订阅者</span></span><br><span class="line">        CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line">        <span class="keyword">if</span> (subscriptions == <span class="literal">null</span>) &#123;</span><br><span class="line">            subscriptions = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">            subscriptionsByEventType.put(eventType, subscriptions);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不能重复注册</span></span><br><span class="line">            <span class="keyword">if</span> (subscriptions.contains(newSubscription)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EventBusException</span>(<span class="string">&quot;Subscriber &quot;</span> + subscriber.getClass() + <span class="string">&quot; already registered to event &quot;</span></span><br><span class="line">                        + eventType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> subscriptions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            <span class="comment">// 优先级高的放在前面，优先级的低放在最后</span></span><br><span class="line">            <span class="keyword">if</span> (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</span><br><span class="line">                subscriptions.add(i, newSubscription);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//订阅者-订阅的所有事件的 映射</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class="line">        <span class="keyword">if</span> (subscribedEvents == <span class="literal">null</span>) &#123;</span><br><span class="line">            subscribedEvents = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            typesBySubscriber.put(subscriber, subscribedEvents);</span><br><span class="line">        &#125;</span><br><span class="line">        subscribedEvents.add(eventType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.1 有粘性事件时，注册订阅者时直接分发</span></span><br><span class="line">        <span class="keyword">if</span> (subscriberMethod.sticky) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">                <span class="comment">// Existing sticky events of all subclasses of eventType have to be considered.</span></span><br><span class="line">                <span class="comment">// Note: Iterating over all events may be inefficient with lots of sticky events,</span></span><br><span class="line">                <span class="comment">// thus data structure should be changed to allow a more efficient lookup</span></span><br><span class="line">                <span class="comment">// (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span></span><br><span class="line">                Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</span><br><span class="line">                    Class&lt;?&gt; candidateEventType = entry.getKey();</span><br><span class="line">                    <span class="keyword">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">stickyEvent</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                        <span class="comment">//粘性事件分发</span></span><br><span class="line">                        checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//粘性事件分发</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">stickyEvent</span> <span class="operator">=</span> stickyEvents.get(eventType);</span><br><span class="line">                checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>粘性事件分发</p><p>有粘性事件是在注册阶段就判断了是否有响应的订阅者，有的话就<code>checkPostStickyEventToSubscription</code>最终调用到<code>postToSubscription</code>，普通事件的分发最终也是通过<code>postToSubscription</code>，该方法 ，具体的放到后面一起分析</p><h4 id="事件发布与分发"><a href="#事件发布与分发" class="headerlink" title="事件发布与分发"></a>事件发布与分发</h4><p>核心逻辑，就是找到事件的订阅者，执行相应的订阅方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6 发送event</span></span><br><span class="line">    <span class="comment">/** Posts the given event to the event bus. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">post</span><span class="params">(Object event)</span> &#123;</span><br><span class="line">        <span class="type">PostingThreadState</span> <span class="variable">postingState</span> <span class="operator">=</span> currentPostingThreadState.get();</span><br><span class="line">        List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">        eventQueue.add(event);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!postingState.isPosting) &#123;</span><br><span class="line">            postingState.isMainThread = isMainThread();</span><br><span class="line">            postingState.isPosting = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EventBusException</span>(<span class="string">&quot;Internal error. Abort state was not reset&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//遍历当前线程的事件队列，一个一个发送</span></span><br><span class="line">                <span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">                    postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.isPosting = <span class="literal">false</span>;</span><br><span class="line">                postingState.isMainThread = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>currentPostingThreadState</code>是一个ThreadLocal变量，它提供线程本地变量，如果创建一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个副本，在实际多线程操作的时候，操作的是自己本地内存中的变量，从而规避了线程安全问题。通常EventBus都是process-wide范围的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PostingThreadState</span> &#123;</span><br><span class="line">    <span class="comment">//存放事件</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;Object&gt; eventQueue = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span> isPosting;</span><br><span class="line">    <span class="comment">//是否是主线程post的</span></span><br><span class="line">    <span class="type">boolean</span> isMainThread;</span><br><span class="line">    <span class="comment">//订阅者和事件处理方法的包装类</span></span><br><span class="line">    Subscription subscription;</span><br><span class="line">    Object event;</span><br><span class="line">    <span class="type">boolean</span> canceled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历eventQueue，从数组头部开始分发，<code>postSingleEvent</code>之后调用到<code>postSingleEventForEventType</code>，取出所有的events(继承的情况)，之后再到<code>postSingleEventForEventType</code>，从缓存中找到所有的订阅者与订阅方法的包装类，使用CopyOnWriteArrayList存放subscriptions，避免遍历时对Suscriber的反注册引起的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6.1 发送单个event，已经找到了eventClass</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> &#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (subscriptions != <span class="literal">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">                postingState.event = event;</span><br><span class="line">                postingState.subscription = subscription;</span><br><span class="line">                <span class="type">boolean</span> aborted;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class="line">                    aborted = postingState.canceled;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    postingState.event = <span class="literal">null</span>;</span><br><span class="line">                    postingState.subscription = <span class="literal">null</span>;</span><br><span class="line">                    postingState.canceled = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (aborted) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>遍历分发，最终到<code>postToSubscription</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  7. 分发 event 到 suscription，</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="type">boolean</span> isMainThread)</span> &#123;</span><br><span class="line">        <span class="comment">//按线程模型分发</span></span><br><span class="line">        <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line"><span class="comment">//           在投递的线程处理，没有线程切换，在主线程post，invoke就在主线程</span></span><br><span class="line">            <span class="keyword">case</span> POSTING:</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MAIN:</span><br><span class="line"><span class="comment">//                当前线程是主线程直接调用</span></span><br><span class="line">                <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                    invokeSubscriber(subscription, event);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//                event 总是被排队执行</span></span><br><span class="line">            <span class="keyword">case</span> MAIN_ORDERED:</span><br><span class="line">                <span class="keyword">if</span> (mainThreadPoster != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// temporary: technically not correct as poster not decoupled from subscriber</span></span><br><span class="line">                    invokeSubscriber(subscription, event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BACKGROUND:</span><br><span class="line"><span class="comment">//                已经是后台线程就直接执行</span></span><br><span class="line">                <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line"><span class="comment">//                    Executors.newCachedThreadPool()</span></span><br><span class="line">                    backgroundPoster.enqueue(subscription, event);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    invokeSubscriber(subscription, event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ASYNC:</span><br><span class="line">                asyncPoster.enqueue(subscription, event);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unknown thread mode: &quot;</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>ThreadMode</code>中的<code>POSTING</code>、<code>MAIN</code>、<code>MAIN_ORDERED</code>、<code>BACKGROUND</code>，都可能阻塞post的所在线程，最好不要执行耗时操作。</p><p><code>mainThreadPoster</code>底层使用<code>Android</code>的<code>Handler</code>进行分发，<code>backgroundPoster</code>、<code>asyncPoster</code>都是依赖同一个<code>Executors.newCachedThreadPool()</code>进行分发，被分发之后在执行时都是通过<code>invokeSubscriber</code>进行调用。</p><p>其中<code>backgroundPoster</code>内部也使用了一个链表queue，使事件按post的顺序执行。</p><h4 id="取消注册"><a href="#取消注册" class="headerlink" title="取消注册"></a>取消注册</h4><p>​</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>框架整体考虑的非常的完善，各种级别的缓存，用空间换时间，避免二次查询，多处使用对象池，避免对象的频繁创建，通过DCL单例提供EventBus对象，使用Builder模式，优化使用大量参数进行初始化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;EventBus is a publish&amp;#x2F;subscribe event bus for An</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="EventBus" scheme="https://yndongyong.github.io/categories/EventBus/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>基于Kotlin Channel实现任务队列</title>
    <link href="https://yndongyong.github.io/2022/10/12/%E5%9F%BA%E4%BA%8EKotlin-Channel%E5%AE%9E%E7%8E%B0%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/"/>
    <id>https://yndongyong.github.io/2022/10/12/%E5%9F%BA%E4%BA%8EKotlin-Channel%E5%AE%9E%E7%8E%B0%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</id>
    <published>2022-10-12T01:22:35.000Z</published>
    <updated>2022-10-12T01:52:30.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>基于<code>kotlin coroutine</code>的<code>Channel</code>，实现的一个非阻塞式的任务队列，按先进先出的规则执行任务。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>适用于多个任务没有依赖关系，需要排队执行的情况。</p><p>比如：多个UI展示任务，需要排队一一展示的情况</p><ol><li>弹框任务编排，例如，app首页有多个弹框（隐私弹框、权限弹框、更新弹框、运营弹框），需要按一定顺序排队展示，一个接一个展示，并且上一个主动关闭之后才能下一个。</li><li>直播间打赏礼物展示，打赏礼物动画需要一个一个展示的场景，动画展示的时间固定的。</li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>库在<code>jitpack</code>上</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maven &#123; url <span class="string">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.github.yndongyong:taskqueue:v0.0.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>基于<code>kotlin coroutine</code>实现。</li><li>First-In,First-out处理任务</li><li>支持指定task执行在主线程或是子线程</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>创建任务队列管理类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mQueueManager = TaskQueueManager()</span><br></pre></td></tr></table></figure></li><li><p>添加任务（有固定执行时间的）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mQueueManager.sendTask(Task(<span class="number">3000</span>) &#123;</span><br><span class="line">ToastUtils.showShort(<span class="string">&quot;btn click: <span class="variable">$curCount</span> ,counts&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>添加执行时间不固定的任务(展示一个弹框)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mQueueManager.sendTask(Task &#123;</span><br><span class="line">PopTip.show(<span class="string">&quot;弹框提示: <span class="variable">$curCount</span>&quot;</span>, <span class="string">&quot;关闭&quot;</span>).noAutoDismiss()</span><br><span class="line">    .setButton &#123; popTip, v -&gt; <span class="comment">//点击“撤回”按钮回调</span></span><br><span class="line">         <span class="comment">//延迟1s展示下一个任务</span></span><br><span class="line">         <span class="keyword">this</span><span class="symbol">@MainActivity</span>.mViewBinding.btnShot.postDelayed(<span class="number">1000</span>) &#123;</span><br><span class="line">             doNextTask()</span><br><span class="line">         &#125;</span><br><span class="line">          <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>执行时间不确定的任务,需要在任务执行完后主动调用 <code>doNextTask()</code> 方法去执行下一个task，否则消费者会一直挂起。</p><p>注意：还提供了一个全局单例<code>TaskQueueManager.instance</code></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="task定义"><a href="#task定义" class="headerlink" title="task定义"></a>task定义</h4><p>一类<code>task</code>是有固定执行时间的，比如展示一个<code>toast</code>，每次都是展示2s；一类<code>task</code>是没有固定的执行时间的，比如，app首页各种类型的弹框，权限弹框没有依赖信息，直接展示，如果不关闭的话，会一直展示，表示任务一直在执行中，只有当用户手动关闭弹框时，任务才结束。<code>task</code>可以执行在主线程，也可以执行在子线程处理耗时任务。执行完当前任务之后会执行下一个任务。</p><p><code>task</code>支持指定要执行在主线程（默认），还是子线程，如果是执行时间固定的支持指定执行时间，默认是执行时间不固定。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yndongyong on 2022/10/11.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 任务队列中的任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> durationTimeMillis Long 任务执行的时间，0：表示任务执行时间不固定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> block [<span class="doctag">@kotlin</span>.ExtensionFunctionType] Function1&lt;Task, Unit&gt; 执行块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> durationTimeMillis: <span class="built_in">Long</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> callInMainThread: <span class="built_in">Boolean</span> = <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> block: Task.() -&gt; <span class="built_in">Unit</span></span><br><span class="line">) : AbsTask() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doTask</span><span class="params">()</span></span> &#123;</span><br><span class="line">        block.invoke(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列处理"><a href="#队列处理" class="headerlink" title="队列处理"></a>队列处理</h4><p>使用<code>channel</code>构造的生产者，消费者的多对一模型，消费者在消费<code>task</code>时，生产者被挂起。使用<code>RENDEZVOUS</code>类型的<code>channel</code>，没有缓冲区，同一时刻只能执行一个<code>task</code>，当执行<code>taks</code>，挂起<code>send</code>操作。执行<code>task</code>时切换到指定的<code>Dispatchers.MAIN</code>或者<code>Dispatchers.IO</code>协程上下文执行，如果task是执行时间不固定，使用<code>Mutex</code>挂起<code>channel</code>的<code>receive</code>操作所在的<code>coroutine</code>，当<code>task</code>执行完毕的恢复<code>channel</code>的<code>receive</code>操作所在的<code>coroutine</code>，同时<code>send</code>操作所在<code>coroutine</code>被恢复执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;基于&lt;code&gt;kotlin coroutine&lt;/code&gt;的&lt;code&gt;Channel&lt;/code&gt;，实现的一个非阻塞式的任务队列，按先</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
    <category term="kotlin" scheme="https://yndongyong.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>App minSdk升级为24之后的问题</title>
    <link href="https://yndongyong.github.io/2022/10/08/App-minSdk%E5%8D%87%E7%BA%A7%E4%B8%BA24%E4%B9%8B%E5%90%8E%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://yndongyong.github.io/2022/10/08/App-minSdk%E5%8D%87%E7%BA%A7%E4%B8%BA24%E4%B9%8B%E5%90%8E%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-10-08T03:35:01.000Z</published>
    <updated>2022-10-08T05:02:33.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="升级的原因"><a href="#升级的原因" class="headerlink" title="升级的原因"></a>升级的原因</h3><p>最近，因为vivo商店的审核问题，将App的<code>minSdk</code>从21升级到24，下限支持为Android7。<code>ci</code>上打包的<code>apk</code>，发给测试之后，测试反馈打开之后就闪退。</p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>排查日志，有一个<code>SIGE（11）</code>相关的日志，使用未加固的包安装测试，发现正常。因而认为是加固引起的问题。此前的加固策略里有一条是签名检测，加固包签名检测到不一致时，会退出App。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这里是<code>build.gradle</code>中签名相关的配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        storeFile file(<span class="string">&quot;../xxx.jks&quot;</span>)</span><br><span class="line">        storePassword <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        keyAlias <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        keyPassword <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怀疑大概率是签名机制的问题，<code>Android7</code>及以上默认是使用v2签名。</p><p><code>minSdk</code>是21时：包构建时使用v1签名打包，然后加固，最后重新使用v1+v2签名。</p><p><code>minSdk</code>升级为24之后：包构建时使用v2签名打包，然后加固，最后重新使用v1+v2签名。</p><p>两种行为之下，在加固的签名校验环节任务签名不一致了，主动关闭App了。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p><code>minSdk24</code>的情况下，构建包时，配置使用使用<code>v1</code>进行签名，<code>v2</code>签名需要关闭（默认是打开的），加固之后使用<code>v1+v2</code>方式重新签名</p><p>配置如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        storeFile file(<span class="string">&quot;../xxx.jks&quot;</span>)</span><br><span class="line">        storePassword <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        keyAlias <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        keyPassword <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        v2SigningEnabled <span class="literal">false</span></span><br><span class="line">        v1SigningEnabled <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出现新问题"><a href="#出现新问题" class="headerlink" title="出现新问题"></a>出现新问题</h3><p>打个某个页面会出现闪退，sentry上也有关于改崩溃的大量记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: couldn<span class="string">&#x27;t find DSO to load: libgifimage.so caused by: Dynamic section string-table not found result: 0</span></span><br><span class="line"><span class="string">    at com.facebook.soloader.SoLoader.doLoadLibraryBySoName(TbsSdkJava:825)</span></span><br><span class="line"><span class="string">    at com.facebook.soloader.SoLoader.loadLibraryBySoName(TbsSdkJava:673)</span></span><br><span class="line"><span class="string">    at com.facebook.soloader.SoLoader.loadLibrary(TbsSdkJava:611)</span></span><br><span class="line"><span class="string">    at com.facebook.soloader.SoLoader.loadLibrary(TbsSdkJava:559)</span></span><br><span class="line"><span class="string">    at com.facebook.soloader.NativeLoaderToSoLoaderDelegate.loadLibrary(TbsSdkJava:25)</span></span><br><span class="line"><span class="string">    at com.facebook.soloader.nativeloader.NativeLoader.loadLibrary(TbsSdkJava:44)</span></span><br><span class="line"><span class="string">    at com.facebook.animated.gif.GifImage.ensure(TbsSdkJava:42)</span></span><br><span class="line"><span class="string">    at com.facebook.animated.gif.GifImage.createFromNativeMemory(TbsSdkJava:88)</span></span><br><span class="line"><span class="string">    at com.facebook.animated.gif.GifImage.decodeFromNativeMemory(TbsSdkJava:110)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl.decodeGif(TbsSdkJava:88)</span></span><br><span class="line"><span class="string">    at com.facebook.fresco.animation.factory.AnimatedFactoryV2Impl$1.decode(TbsSdkJava:88)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.decoder.DefaultImageDecoder.decodeGif(TbsSdkJava:139)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.decoder.DefaultImageDecoder$1.decode(TbsSdkJava:60)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.decoder.DefaultImageDecoder.decode(TbsSdkJava:120)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder.doDecode(TbsSdkJava:316)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder.access$300(TbsSdkJava:136)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder$1.run(TbsSdkJava:186)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.producers.JobScheduler.doJob(TbsSdkJava:224)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.producers.JobScheduler.access$000(TbsSdkJava:24)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.producers.JobScheduler$1.run(TbsSdkJava:90)</span></span><br><span class="line"><span class="string">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)</span></span><br><span class="line"><span class="string">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)</span></span><br><span class="line"><span class="string">    at com.facebook.imagepipeline.core.PriorityThreadFactory$1.run(TbsSdkJava:50)</span></span><br><span class="line"><span class="string">    at java.lang.Thread.run(Thread.java:919)</span></span><br></pre></td></tr></table></figure><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>发现是页面上有个gif动态图，使用的fresco-git先关的库展示的，<code>libgifimage.so</code>等相关的so库是有<code>fresco</code>的引入的。<code>fresco</code>有自己的一套<code>soloader</code>机制，加固之后so加载不到了。</p><p>最终在加固策略中排除<code>fresco</code>相关的一系列so库，不对这部分so库加固，就能解决问题。</p><p>相关so库有</p><ul><li><code>libnative-imagetranscoder.so</code></li><li><code>libimagepipeline.so</code></li><li><code>libnative-filters.so</code></li><li><code>libgifimage.so</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;升级的原因&quot;&gt;&lt;a href=&quot;#升级的原因&quot; class=&quot;headerlink&quot; title=&quot;升级的原因&quot;&gt;&lt;/a&gt;升级的原因&lt;/h3&gt;&lt;p&gt;最近，因为vivo商店的审核问题，将App的&lt;code&gt;minSdk&lt;/code&gt;从21升级到24，下限支持为And</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    
    <category term="android minSdk" scheme="https://yndongyong.github.io/tags/android-minSdk/"/>
    
  </entry>
  
  <entry>
    <title>jenkins 插件推荐</title>
    <link href="https://yndongyong.github.io/2022/08/20/jenkins-%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>https://yndongyong.github.io/2022/08/20/jenkins-%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</id>
    <published>2022-08-20T06:16:38.000Z</published>
    <updated>2023-03-04T03:27:58.421Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下有用的插件，方便以后重装时了解必装的插件。</p><h3 id="build-user-vars-plugin-1-9"><a href="#build-user-vars-plugin-1-9" class="headerlink" title="build-user-vars-plugin:1.9"></a>build-user-vars-plugin:1.9</h3><p>会在环境变量里，注入启动job的用户的相关的信息，方便获取构建者，支持BUILD_USER_ID，BUILD_USER_NAME等信息。</p><p>pipeline使用方式：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wrap([<span class="attr">$class:</span> <span class="string">&#x27;BuildUser&#x27;</span>]) &#123;</span><br><span class="line">    script &#123;</span><br><span class="line">        BUILD_USER = <span class="string">&quot;$&#123;env.BUILD_USER&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>貌似最新的版本里，可以直接通过env.BUILD_USER拿到了。</p><h3 id="build-name-setter-2-2-0"><a href="#build-name-setter-2-2-0" class="headerlink" title="build-name-setter:2.2.0"></a>build-name-setter:2.2.0</h3><p>设置构建名称,pipeline step中设置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buildName <span class="string">&quot;#$&#123;BUILD_NUMBER&#125;-$&#123;params.BUILD_TYPE_SELECT&#125;-$&#123;env.BUILD_USER&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="git-parameter-0-9-17"><a href="#git-parameter-0-9-17" class="headerlink" title="git-parameter:0.9.17"></a>git-parameter:0.9.17</h3><p>支持git 的参数化构建，分支，tag等过滤选择。</p><p>pipeline parameters</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitParameter( <span class="attr">branchFilter:</span> <span class="string">&#x27;origin/release/.*&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&quot;origin/release/v$__VERSION_NAME&quot;</span>, <span class="attr">name:</span> <span class="string">&#x27;BUILD_GIT_BRANCH&#x27;</span>, <span class="attr">type:</span> <span class="string">&#x27;PT_BRANCH&#x27;</span>, <span class="attr">selectedValue:</span> <span class="string">&#x27;TOP&#x27;</span>, <span class="attr">sortMode:</span> <span class="string">&#x27;DESCENDING_SMART&#x27;</span>, <span class="attr">useRepository:</span> <span class="string">&quot;$__GIT_REPO&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="envinject-2-875-v9b-9e962da-a-ec"><a href="#envinject-2-875-v9b-9e962da-a-ec" class="headerlink" title="envinject:2.875.v9b_9e962da_a_ec"></a>envinject:2.875.v9b_9e962da_a_ec</h3><p>环境变量参数注入</p><h3 id="thinBackup-1-10"><a href="#thinBackup-1-10" class="headerlink" title="thinBackup:1.10"></a>thinBackup:1.10</h3><p>用于jenkins备份,相关配置</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img/20230304111117.png" alt="thinBackup备份设置"></p><p>回复时，需要执行该操作，让jenkins重新读取数据</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img/20230304111229.png" alt="重新读取配置数据"></p><p>注意： 备份恢复之后，因为是文件的所有者是root，jenkins的docker的用户是jenkins，访问恢复的文件就存在权限问题</p><p>解决方案,给目录的拥有者uid 1000：sudo chown -R 1000 _data ，还是设置了一下文件夹的权限（非必需）。</p><h3 id="versionnumber-1-9"><a href="#versionnumber-1-9" class="headerlink" title="versionnumber:1.9"></a>versionnumber:1.9</h3><p>方便设置构建的时候的版本号。支持有BUILD_OF_WEEK 、BUILD_OF_DAY等信息</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__versionNumberOfToday = VersionNumber(<span class="attr">versionNumberString:</span> <span class="string">&#x27;$&#123;BUILD_DATE_FORMATTED,&quot;yyyy-MM-dd&quot;&#125;.$&#123;BUILDS_TODAY&#125;&#x27;</span>,<span class="attr">worstResultForIncrement:</span> <span class="string">&#x27;SUCCESS&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="rebuild-1-34"><a href="#rebuild-1-34" class="headerlink" title="rebuild:1.34"></a>rebuild:1.34</h3><p>方便使用同样的参数，进行再次构建。这个很有用，在上一次构建失败的情况或者多次执行相同参数构建的情况下。</p><h3 id="pipeline-utility-steps-2-13-0"><a href="#pipeline-utility-steps-2-13-0" class="headerlink" title="pipeline-utility-steps:2.13.0"></a>pipeline-utility-steps:2.13.0</h3><p>pipeline下提供一些有用的方法，比如fileExit、readJson、cleanWs等方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一下有用的插件，方便以后重装时了解必装的插件。&lt;/p&gt;
&lt;h3 id=&quot;build-user-vars-plugin-1-9&quot;&gt;&lt;a href=&quot;#build-user-vars-plugin-1-9&quot; class=&quot;headerlink&quot; title=&quot;build-u</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="jenkins" scheme="https://yndongyong.github.io/categories/jenkins/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
    <category term="jenkins" scheme="https://yndongyong.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>记一次App提审隐私协议h5页面打不开的问题排查</title>
    <link href="https://yndongyong.github.io/2022/04/29/%E8%AE%B0%E4%B8%80%E6%AC%A1App%E6%8F%90%E5%AE%A1%E9%9A%90%E7%A7%81%E5%8D%8F%E8%AE%AEh5%E9%A1%B5%E9%9D%A2%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://yndongyong.github.io/2022/04/29/%E8%AE%B0%E4%B8%80%E6%AC%A1App%E6%8F%90%E5%AE%A1%E9%9A%90%E7%A7%81%E5%8D%8F%E8%AE%AEh5%E9%A1%B5%E9%9D%A2%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</id>
    <published>2022-04-29T08:28:00.000Z</published>
    <updated>2022-10-08T02:59:18.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>在vivo应用商店上传应用，被拒，提示64、32位的应用隐私协议h5打开之后都是白屏，看拒审通知，两款设备一新一旧，系统版本有Android11、android6。这个h5在本地用个各种浏览器、手机访问都很正常。但是连续多次的提审都因为打开之后白屏被拒。</p><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>用电脑浏览器、测试手机、手机浏览器打开都很正常，后面只能找前端一起排查问题，h5也是很简单的静态页面，没有用到任何的jsb。之后通过关键字<code>vivo 打开网页白屏</code> 网络搜索发现似乎也有很多人遇到，也是反馈vivo系统问题，也没有什么实质性的线索，暂时认为是审核时的网络问题，抱着侥幸的心里，又再一次提审了，结果又一次悲剧了。</p><p>之后通过了分析了h5页面，发现引入了几个第三方cnd服务器上的js，基本是vue相关的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js</span><br><span class="line">https://cdn.jsdelivr.net/npm/vue-router@3.5.2/dist/vue-router.min.js</span><br><span class="line">https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.min.js</span><br><span class="line">https://cdn.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js</span><br><span class="line">https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.min.js</span><br></pre></td></tr></table></figure><p>一开始看很正常，甚至每个连接在云南访问都是很正常，排查webview相关配置异常的问题。但是审核时，网页就是白屏，开始怀疑时审核地那边的网络问题加载不出，vue写的页面，js加载不成功的是不会进行网页的渲染的。再之后通过 <code>https://tool.chinaz.com/speedtest</code>站长之家的测速工具发现广东、深圳这一片都无法访问这个域名<code>cdn.jsdelivr.net</code> ，同时网上信息表示<code>jsdelivr</code>的域名过期了，等我搜索到这一信息的时候，证书已经替换了，但是广东这一片还是访问<code>jsdeliver</code>还是超时，破案了。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>最终将上诉的vuejs相关的引入替换为自家服务服务器的js。之后提审正常通过。</p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>好紧不长，之后按要求将App拆为32位、64位的包，之后再在vivo商店上传审核32应用时，总是被拒，提示隐私协议h5打开后展示白屏，发现设备是一款比较老的手机，系统为Android6，webview的内核为58.x。</p><h3 id="排查-1"><a href="#排查-1" class="headerlink" title="排查"></a>排查</h3><p>之后在本地使用模拟器（Android6.0的系统）复现了同样的问题，app内的所有网页都是打不开的，由于正式包，能够拦截排查的日志也有限,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">12</span>)] <span class="string">&quot;The key &quot;</span>viewport-fit<span class="string">&quot; is not recognized and ignored.&quot;</span>, <span class="attr">source</span>: <span class="attr">https</span>:<span class="comment">//static.ybsjyyn.com/app/about.html#/about/service (12)</span></span><br><span class="line"> [chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">164</span>)] <span class="string">&quot;Uncaught SyntaxError: Unexpected token *&quot;</span>, <span class="attr">source</span>: <span class="attr">https</span>:<span class="comment">//static.ybsjyyn.com/app/js/chunk-vendors.1e681edf.js (164)</span></span><br><span class="line">[chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">12</span>)] <span class="string">&quot;The key &quot;</span>viewport-fit<span class="string">&quot; is not recognized and ignored.&quot;</span>, <span class="attr">source</span>: <span class="attr">https</span>:<span class="comment">//static.ybsjyyn.com/app/about.html#/about/service (12)</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">1</span>)] <span class="string">&quot;Uncaught TypeError: window._handleMessageFromNative is not a function&quot;</span>, <span class="attr">source</span>:  (<span class="number">1</span>)</span><br><span class="line">[chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">0</span>)] <span class="string">&quot;Unrecognized Content-Security-Policy directive &#x27;worker-src&#x27;.</span></span><br><span class="line"><span class="string">[chromium] : [INFO:CONSOLE(2)] &quot;</span><span class="title class_">Uncaught</span> <span class="title class_">TypeError</span>: <span class="title class_">Object</span>.<span class="property">values</span> is not a <span class="keyword">function</span><span class="string">&quot;, source: https://txc.gtimg.com/static/6756/index.e7d6f3d0.js (2)</span></span><br><span class="line"><span class="string">[chromium] : [INFO:CONSOLE(1)] &quot;</span><span class="title class_">Uncaught</span> <span class="title class_">TypeError</span>: <span class="variable language_">window</span>.<span class="property">_handleMessageFromNative</span> is not a <span class="keyword">function</span><span class="string">&quot;, source:  (1)</span></span><br><span class="line"><span class="string">[chromium] : [INFO:CONSOLE(1)] &quot;</span><span class="title class_">The</span> key <span class="string">&quot;viewport-fit&quot;</span> is not recognized and ignored.<span class="string">&quot;, source: https://support.qq.com/embed/phone/30476 (1)</span></span><br><span class="line"><span class="string">[chromium] : [INFO:CONSOLE(2)] &quot;</span><span class="title class_">Uncaught</span> <span class="title class_">TypeError</span>: <span class="title class_">Object</span>.<span class="property">values</span> is not a <span class="keyword">function</span><span class="string">&quot;, source: https://txc.gtimg.com/static/6756/index.e7d6f3d0.js (2)</span></span><br></pre></td></tr></table></figure><p>虽然<code>vue</code>的文档上说支持Android4.4以上，但是还是怀疑是<code>vue</code>的兼容性，一些新的<code>js</code>、<code>css</code>属性，再低版本系统上缺失。</p><p>由于App内的所有网页使用的都是<code>vue</code> 让前端团队在这个时候来处理兼容性的已经是不现实了。之后通过分分析<code>android5，6</code>的用户只占比0.02%了，将App对android版本支持的下限从<code>Android5</code>升级为<code>Android7</code>。</p><p>再次提审，完美避开了旧版本，正常通过审核。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h3&gt;&lt;p&gt;在vivo应用商店上传应用，被拒，提示64、32位的应用隐私协议h5打开之后都是白屏，看拒审通知，两款设备一新一旧，系统版本有And</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android Apk大小优化</title>
    <link href="https://yndongyong.github.io/2022/04/19/Android-apk%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/"/>
    <id>https://yndongyong.github.io/2022/04/19/Android-apk%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/</id>
    <published>2022-04-19T08:37:58.000Z</published>
    <updated>2022-04-21T06:59:15.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着App工程的长时间维护，项目里堆积了一些曾经有用的、但随着升级迭代逐渐没有使用到的资源，比如<code>Activity</code> 、<code>Fragment</code>、<code>RecyclerView</code>的<code>ItemView</code>等的布局<code>xml</code>资源，各种背景<code>Shape</code>的<code>xml</code>资源，以及图标图片等。虽然在<code>Release</code>包的构建配置中设置了<code>shrinkResources true</code>的配置,但并没有将这些资源真正的删除，而是替换为一个个的空文件，仍然会参与编译构建，最终导致。</p><p>长此以往，造成了三个主要问题：</p><ol><li>工程代码包括资源的膨胀。</li><li><code>Apk</code>的包大小越来越大的问题，此前v5.5.0版本的armv8a的包大小已经达到<code>69M</code>。进行包大小优化有助于提高下载转化率。</li><li>编译耗时增加，目前的工程本地一次完整的<code>debug</code>包的全量编译需要耗时七八分钟之久（编译环境win11,corei5-1135g7，24g内存，m.2 ssd）。从编译速度的角度考虑，无用资源的移除也是很有必要的。</li></ol><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><p>为了处理上述的三个问题，优化<code>Apk</code>包大小，主要采用以下三种手段</p><ol><li><code>android lint</code> 移除无用资源</li><li>移除<code>drawable-xhpi</code>图片资源文件夹中的无用图片资源</li><li>使用图片压缩工具将<code>drawable-xxhpi</code>图片资源文件夹中的尺寸比较的图片资源进行压缩减小图片大小。</li></ol><h3 id="一、android-lint-移除无用资源"><a href="#一、android-lint-移除无用资源" class="headerlink" title="一、android lint 移除无用资源"></a>一、<code>android lint</code> 移除无用资源</h3><p>在<code>Android studio</code>可以通过lint检查分析那些没有使用到的资源，操作路径为： <code>Analyze</code>-&gt;<code>Run INspection by Name</code> 输入<code>unused resources</code>对分析出的资源文件加以清理。</p><p>如果直接删除<code>lint</code>分析出来的文件列表，可能会存在误删除的情况，比如<code>raw</code>文件中的文件，和通过反射方式以及<code>getResources().getIdentifier</code>的方法使用的资源<code>lint</code>是无法区分的，需要我们提前进行梳理，使用白名单进行保留，可以新建一个resource的xml文件，列出要保留的文件，防止误删。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:keep</span>=<span class="string">&quot;@drawable/ic_reoad_event_*,@drawable/ic_reoad_marker_*,@drawable/ic_reoad_marker_big_*,</span></span></span><br><span class="line"><span class="string"><span class="tag">    @dimen/status_bar_height,@dimen/navigation_bar_height,@raw/bg_video_login,@raw/roll,@string/MI_APP_ID,@string/MI_APP_KEY&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在移除资源的过程需要各个小项仔细区分，防止避免误删除。建议整个工程都在git的版本管理之下再执行该操作。</p><p>此外，在实际执行<code>Remove All Unused Resource</code>的过程中还出现了删除各种布局的控件id的情况，也需要避免，我们通过在<code>App moudle</code>的lint.xml文件中，定制扫描规则进行忽略。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;SpUsage&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;ignore&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;SmallSp&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;ignore&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;ContentDescription&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;ignore&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加上可以避免布局中的控件id被删除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;UnusedIds&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;ignore&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">lint</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种<code>lint</code>方式也存在一定的缺陷，它是一个静态扫描工具，并没有考虑到<code>ProGuard</code>工程中删除的无用代码，<code>lint</code>检查不出这些无用代码所引用的无用资源。</p><h3 id="二、drawable-xhpi中的无用资源移除"><a href="#二、drawable-xhpi中的无用资源移除" class="headerlink" title="二、drawable-xhpi中的无用资源移除"></a>二、<code>drawable-xhpi</code>中的无用资源移除</h3><p>对于<code>drawable-xhpi</code>的优化，我在App（目前的月活大概是数十万量级）中进行埋点，经过两个月的数据沉淀，通过分析埋点数据发现98%的设备的屏幕分辨率都是<code>1080*1920</code>以及之上的，还有1%的720P。基于以上的埋点数据来看<code>drawable-xhpi</code>的文件夹已经没有存在的必要了，但是为了防止之前导入图片只放一份在<code>drawable-xhpi</code>的情况，需要对比<code>drawable-xhpi</code>文件夹和<code>drawable-xxhpi</code>，将那些存在与<code>xxhdpi</code>也存在与<code>xhpi</code>的图片从<code>drawable-xxhpi</code>文件中删除，防止误删除情况的发生。</p><p>使用了<code>python</code>编写了一个简单的脚本达到上诉目的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">top = os.getcwd()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;scan top: &#x27;</span> + top</span><br><span class="line">xDpi = os.path.join(top,<span class="string">&quot;drawable-xhdpi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;scan xDpi dir: &#x27;</span> + xDpi</span><br><span class="line"></span><br><span class="line">xxDpi = os.path.join(top,<span class="string">&quot;drawable-xxhdpi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;scan xxDpi dir: &#x27;</span> + xxDpi</span><br><span class="line"></span><br><span class="line">xxList = []</span><br><span class="line">xList = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> os.listdir(xxDpi):</span><br><span class="line">apps = os.path.join(xxDpi, path)</span><br><span class="line">xxList.append(path)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;xxList: &#x27;</span></span><br><span class="line"><span class="built_in">print</span> xxList </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> os.listdir(xDpi):</span><br><span class="line">apps = os.path.join(xDpi, path)</span><br><span class="line">xList.append(path)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;xList: &#x27;</span></span><br><span class="line"><span class="built_in">print</span> xList </span><br><span class="line"></span><br><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> xList <span class="keyword">if</span> x <span class="keyword">in</span> xxList]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;删除xh中与xxh中的相同元素: &#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> a:</span><br><span class="line">filePath = os.path.join(xDpi, path)</span><br><span class="line">os.remove(filePath)</span><br></pre></td></tr></table></figure><p>此外，依据埋点数据的结论，在团队中推行，图片只用放一份到<code>xxhdpi</code>文件夹中的开发规范。</p><h3 id="三、大图压缩"><a href="#三、大图压缩" class="headerlink" title="三、大图压缩"></a>三、大图压缩</h3><p>对于剩余的<code>drawable-xxhpi</code>中的图片资源，使用一款名叫鸭鸭压缩软件进行批量压缩，至于压缩效果前期已经找到UI老师进行确认。</p><h2 id="优化效果"><a href="#优化效果" class="headerlink" title="优化效果"></a>优化效果</h2><ol><li>移除<code>drawable-xhpi</code>中的无用图片资源820份</li><li>移除布局 135份 ；移除<code>shape drawable</code> 131； 移除<code>drawable-xxhpi</code>未使用的图片400多份，以及各类<code>string</code>、<code>color</code>资源500多份</li><li>v5.5.0版本的armv8a的包大小从<code>69.5M</code>包大小降低至<code>63.08M</code>，包大小减少<code>6.42M</code></li></ol><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img/202204211417724.png?token=ACWZC7FJXPTKPHNL6QD6WS3CMD3TY" alt="附图基于v5.5.0版本进行优化的包大小对比"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;随着App工程的长时间维护，项目里堆积了一些曾经有用的、但随着升级迭代逐渐没有使用到的资源，比如&lt;code&gt;Activity&lt;/code&gt; </summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android端代码分支管理规范</title>
    <link href="https://yndongyong.github.io/2022/03/29/Android%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <id>https://yndongyong.github.io/2022/03/29/Android%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/</id>
    <published>2022-03-29T01:43:08.000Z</published>
    <updated>2022-04-01T15:41:10.386Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>目前，App的发版呈现发版频率增加的趋势，以及面临各种紧急需求临时发版或者临时修复线上严重问题导致频繁发版的情况。总体来说是发版频率增加了，由原本的一月一次（或者一月两次）提升到多次的情况，现在的代码分支管理策略已经不能适应目前项目的规模和发版节奏相匹配 了。</p><p>原来的分支管理，是按照App迭代版本号创建与迭代同名的主分支加上若干特性分支方式。，例如，规划了下个迭代发布2.0.0版本，那么就基于线上版本对应的v1.0.0分支创建一个v2.0.0的主分支（用于线上bug修复），以及若干的其他feature分支，等到开发完成需要提测时，会将确认要提测的所有的feature分支合并到的v2.0.0主分支，后续提测问题的修复都将v2.0.0分支进行，并最终基于这个分支进行打包上线。 这种方式适合版本维护比较单一，迭代周期固定的项目。</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img202203291110534.png?token=GHSAT0AAAAAABRNWEVXKAJLADMHSQ3RXBBQYSHDSWQ" alt="1"></p><p>在频繁发版的情况下，这种模式存在以下几个比较难以解决的的问题。</p><ul><li>问题1，在临近上线前，由于某个特性功能由于延期或者其他原因不需要上线了， 这个时候噩梦开始，在主干分支上剥离某个特新分支的代码是非常困难，git的日志上会存在大量剔除代码的记录，同时由于对应的特性feature分支上有没有bug修复记录，难以继续在该分支上维护。尤其在多版本并行开发的时候，这个问题会更加突出。</li><li>问题2， 在需要临时发版2.0.0版本上线其他需求时， 分支v2.0.0已经被占用，只能取其他的名字，这样的情况次数多了以后，会造成版本记录混乱，功能点不明确。</li></ul><h4 id="新的方案"><a href="#新的方案" class="headerlink" title="新的方案"></a><strong>新的方案</strong></h4><p>参考阿里<strong>AoneFlow</strong>方案，这种方案下使用四种分支类型， 1个master主干分支+1个hotfix分支+N个特性分支+N个发布分支 </p><p><strong>规则一：</strong> 开始工作前，从master创建1个hotfix分支与N个feature分支。<br>从代表最新已发布版本的master分支上，创建hotfix分支修改线上版本问题，创建以<strong>feature&#x2F;</strong> 前缀命名的若干特性分支，进行特性功能的开发和以及提测问题的修复，每个功能模块对应一个特性分支。</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img202203291112562.png?token=GHSAT0AAAAAABRNWEVXNBBTAVSXK3UZEQ34YSHDTXQ" alt="2"></p><p><strong>规则二：</strong> 通过合并feature分支，形成release分支。<br>从master分支上拉出以**release&#x2F;**前缀命名的新分支，将本次要集成或者发布的feature、hotfix分支依次合并过去。</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img202203291113966.png?token=GHSAT0AAAAAABRNWEVWDSMS3J6NJOF547AAYSHDUDA" alt="3"></p><p>优势：</p><ol><li>多个特性分支可同步开发</li><li>发布分支的特性是动态组成的，调整起来是非常容易的。要上线哪些feature不上线哪些feature，重新分布分支只用将原来的发布分支删除掉，从主干分支拉出新的同名分支，再将需要上线的分支合并过来，很好的避免了原来方案的弊端。</li></ol><p><strong>规则三：</strong>  使用release分支发布到线上正式环境后，合并相应的release分支到master分支，在master分支上添加tag，同时删除该release分支关联的feature分支。</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img202203291114069.png?token=GHSAT0AAAAAABRNWEVWLTCATX25LZREFRW6YSHDULA" alt="4"></p><p> 版本发布后需要将这条发布分支合并到主干分支，主干分支的最新版本始终与线上版本一致，如果需要回溯历史版本，只需要在主干分支上找到对应的版本标签。<br>为了避免在代码仓库里堆积大量历史特性分支，还应该清理掉已经上线历史的部分特性分支 。</p><h4 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h4><p> 每个分支的创建 简单合并步骤使用单纯的 Git 命令就能玩转，但还是将这些常规化操作工具化了，避免重复这些日常琐事的命令操作。<br>目前在Jenkins提供了两个Job，</p><ul><li>YYN_CREATE_BRANCHS:用于操作hotfix,feature分支创建（目前删除远程分支的操作还是交由团队个人）</li><li>YYN_MERGE_BRANCHS:拉release发布分支以及合并hotfix、feature分支Job。</li></ul><h4 id="其他约定"><a href="#其他约定" class="headerlink" title="其他约定"></a><strong>其他约定</strong></h4><ul><li>master分支开发人员不允许直接提交代码，已经设置分支保护。</li><li>定期清理历史release发布分支。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;目前，App的发版呈现发版频率增加的趋势，以及面临各种紧急需求临时发版或者临时修复线上严重问题导致频繁发版的情况。总体来说是发版频率增加了，</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="分支管理" scheme="https://yndongyong.github.io/tags/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>vscode 使用wepy框架开发小程序的环境配置以及全局配置</title>
    <link href="https://yndongyong.github.io/2021/08/08/vscode-%E4%BD%BF%E7%94%A8wepy%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/"/>
    <id>https://yndongyong.github.io/2021/08/08/vscode-%E4%BD%BF%E7%94%A8wepy%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/</id>
    <published>2021-08-08T08:29:14.000Z</published>
    <updated>2023-03-04T02:27:15.181Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h3 id="代码高亮部分按照wepy的提示设置"><a href="#代码高亮部分按照wepy的提示设置" class="headerlink" title="代码高亮部分按照wepy的提示设置"></a>代码高亮部分按照wepy的提示设置</h3></li><li><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ol><li>minapp <ul><li>template 节点配置lang&#x3D;”wxml” miniapp&#x3D;”wepy” 实现wxml的语法提示和部分wepy的方法的提示,需要输入&lt;之后才能有提示，搭配空格键使用</li><li>配置引入全局的样式表 实现css资源的提示 src&#x2F;components&#x2F;comm.less（自己的全局的）</li></ul></li><li>Easy LESS 使用了less</li><li>Vetur</li><li>Wepy</li><li>wepy snippets 代码提示，输入wepy</li><li>wpy-beautify 实现代码格式化</li><li>Vetur-wepy  实现js方法跳转的支持，依赖4组件</li></ol></li><li><h3 id="一些全局配置"><a href="#一些全局配置" class="headerlink" title="一些全局配置"></a>一些全局配置</h3><ol><li>app.wpy中config配置全局引入的组件</li></ol></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">usingComponents<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      &#x27;van-icon&#x27;<span class="punctuation">:</span> &#x27;/components/van/icon/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-row&#x27;<span class="punctuation">:</span> &#x27;/components/van/row/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-col&#x27;<span class="punctuation">:</span> &#x27;/components/van/col/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-cell&#x27;<span class="punctuation">:</span> &#x27;/components/van/cell/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-cell-group&#x27;<span class="punctuation">:</span> &#x27;/components/van/cell-group/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-field&#x27;<span class="punctuation">:</span> &#x27;/components/van/field/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-button&#x27;<span class="punctuation">:</span> &#x27;/components/van/button/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-tag&#x27;<span class="punctuation">:</span> &#x27;/components/van/tag/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-grid&#x27;<span class="punctuation">:</span> &#x27;/components/van/grid/index&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;van-grid-item&#x27;<span class="punctuation">:</span> &#x27;/components/van/grid-item/index&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol start="2"><li>app.wpy中style模块引入全局样式文件，其他页面就可以直接使用类名了，可以集合插件1 实现提示</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;/components/comm.less&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>app.wpy中style模块，配置全局的盒子模型</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">view &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;代码高亮部分按照wepy的提示设置&quot;&gt;&lt;a href=&quot;#代码高亮部分按照wepy的提示设置&quot; class=&quot;headerlink&quot; title=&quot;代码高亮部分按照wepy的提示设置&quot;&gt;&lt;/a&gt;代码高亮部分按照wepy的提示设置&lt;/h3&gt;&lt;/li</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    <category term="android studio" scheme="https://yndongyong.github.io/categories/android-studio/"/>
    
    <category term="flutter" scheme="https://yndongyong.github.io/categories/flutter/"/>
    
    <category term="compose" scheme="https://yndongyong.github.io/categories/compose/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>使用NON-UI—FRAGMENT优化startActivityForResult代码</title>
    <link href="https://yndongyong.github.io/2018/08/30/%E4%BD%BF%E7%94%A8NON-UI%E2%80%94FRAGMENT%E4%BC%98%E5%8C%96startActivityForResult%E4%BB%A3%E7%A0%81/"/>
    <id>https://yndongyong.github.io/2018/08/30/%E4%BD%BF%E7%94%A8NON-UI%E2%80%94FRAGMENT%E4%BC%98%E5%8C%96startActivityForResult%E4%BB%A3%E7%A0%81/</id>
    <published>2018-08-30T02:30:58.000Z</published>
    <updated>2022-03-28T15:27:56.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用NON-UI-FRAGMENT优化startActivityForResult"><a href="#使用NON-UI-FRAGMENT优化startActivityForResult" class="headerlink" title="使用NON-UI-FRAGMENT优化startActivityForResult"></a>使用NON-UI-FRAGMENT优化startActivityForResult</h2><p>一般地，要使用AActivity.startActivityForResult(BActivity)需要在Activity中覆盖父类的onActivityForResult（）回调方法。</p><p>如果一个Activity需要调用多个Activity并且获取返回结果，会造成调用处和回调处彼此分离，逻辑不清晰、代码混乱的的问题。有没有一种较为优雅的方式，打破这种惯性。</p><p>回答是肯定的，即本文的NON-UI-FRAGMENT，使用无UI的fragment，将部分业务代码封装到fragment中，再通过callback将最终结果回调给Activity，原本的Activity再也不用复写父类的startActivityForResult，传递一个回调即可。</p><p>使用这种方式，可以封装那些共性较多的类，将原本需要通过继承和复写的逻辑放到fragment中，体现了软件开发中的一大设计原则——使用组合替代继承。</p><p>本文中的startActivityForResult的替代优化仅是NON-UI-FRAGMENT的一种实现使用，NON-UI-FRAGMENT的可以做的更多，一些简单的使用场景：譬如封装权限申请、登录判断跳转，第三方登录等、截屏等等，其他待自己拓展。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><pre><code>ActivityResultHelper resultHelper = ActivityResultHelper.attach(this);resultHelper.startForResult(intent, 0x10, new ActivityResultHelper.CallBack() &#123;    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;        if (requestCode == 101 &amp;&amp; resultCode == RESULT_OK) &#123;            Log.d(&quot;DONG&quot;, &quot;true&quot;);        &#125; else &#123;            Log.d(&quot;DONG&quot;, &quot;false&quot;);        &#125;    &#125;&#125;);</code></pre><p>再也不用将调用入口和返回结果处理的代码分开了。 </p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre><code> public class ActivityResultHelper extends Fragment &#123;    private static final String FRAG_TAG = ActivityResultHelper.class.getCanonicalName();    private Activity mContext;    private CallBack mListener;    public interface CallBack &#123;        void onActivityResult(int requestCode, int resultCode, Intent data);    &#125;    public static &lt;ParentFrag extends Fragment&gt; ActivityResultHelper attach(ParentFrag parent) &#123;        return attach(parent.getChildFragmentManager());    &#125;    public static &lt;ParentActivity extends FragmentActivity&gt; ActivityResultHelper attach(ParentActivity parent) &#123;        return attach(parent.getSupportFragmentManager());    &#125;    private static ActivityResultHelper attach(FragmentManager fragmentManager) &#123;        ActivityResultHelper frag = (ActivityResultHelper) fragmentManager.findFragmentByTag(FRAG_TAG);        if (frag == null) &#123;            frag = new ActivityResultHelper();            fragmentManager.beginTransaction().add(frag, FRAG_TAG).commit();            //TODO fragment在Activity的onCreate中被attach之后就立即调用fragment的一些方法，需要如下代码，否则不需要            fragmentManager.executePendingTransactions();        &#125;        return frag;    &#125;    @Override    public void onAttach(Context context) &#123;        super.onAttach(context);        mContext = (Activity) context;    &#125;    @Override    public void onDetach() &#123;        super.onDetach();        mContext = null;    &#125;    public Activity getContext() &#123;        return mContext;    &#125;    public void startForResult(Intent intent, int requestCode, CallBack listener) &#123;        this.mListener = listener;        startActivityForResult(intent, requestCode);    &#125;    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;        if (mListener != null) &#123;            mListener.onActivityResult(requestCode, resultCode, data);        &#125;    &#125;&#125;      </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用NON-UI-FRAGMENT优化startActivityForResult&quot;&gt;&lt;a href=&quot;#使用NON-UI-FRAGMENT优化startActivityForResult&quot; class=&quot;headerlink&quot; title=&quot;使用NON-UI-F</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="non-ui-framgment headlessfragment" scheme="https://yndongyong.github.io/tags/non-ui-framgment-headlessfragment/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义View实现功能引导页</title>
    <link href="https://yndongyong.github.io/2018/08/01/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD%E5%BC%95%E5%AF%BC%E9%A1%B5/"/>
    <id>https://yndongyong.github.io/2018/08/01/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD%E5%BC%95%E5%AF%BC%E9%A1%B5/</id>
    <published>2018-08-01T08:43:28.000Z</published>
    <updated>2022-03-28T15:37:13.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="库地址"><a href="#库地址" class="headerlink" title="库地址"></a><a href="https://github.com/yndongyong/GuideView">库地址</a></h3><p><a href="https://github.com/yndongyong/GuideView/blob/master/dest/app_guideview-debug.apk">demo</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>实现页面引导，提示用户操作。用户引导结合场景，以图层的形式叠加到对应的View上。高亮效果支持矩形、圆角矩形、圆形、椭圆四种形状，以及支持高斯模糊的效果。</p><p>效果预览图</p><p><img src="http://oav23hfp9.bkt.clouddn.com/18-8-1/91135939.jpg" alt="功能引导"></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>使用自定义view实现，显示时机控制为界面绘制完成后的下一个帧</li><li>以图层的形式叠加到UI控件上</li><li>高亮效果支持矩形、圆角矩形、圆形、椭圆四种</li><li>支持高斯模糊效果</li><li>提示布局方向支持左、上、右、下四个方向的居中，支持扩展</li><li>支持全部一起显示，或是一个接一个的显示方式</li></ol><h3 id="changelog"><a href="#changelog" class="headerlink" title="changelog"></a>changelog</h3><p><strong>v0.0.1</strong></p><p>实现效果，可用</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol start="0"><li>收集要高亮显示的view的左上点坐标、宽高信息</li><li>取到Activity的decorview，添加一层FrameLayout布局</li><li>自定义view(GuideView)中根据高亮显示的view的坐标宽高信息，使用PorterDuffXfermode 的Mode.XOR，画出镂空效果，同一个坐标上正常的画一次，Mode.XOR的模式绘制第二次即可以实现镂空的效果</li><li>在GuideView中根据高亮view的坐标 addView（功能提示的view），代码中处理了addView 以及requestLayout之后布局会闪烁的问题。</li></ol><p>PorterDuffXfermode 的Mode.XOR 原理参见：</p><p><img src="https://upload-images.jianshu.io/upload_images/2041548-d964105abf4be5d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/312" alt="图像合成"></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new GuideViewHelper.Builder()</span><br><span class="line">      .addView(id_switch_1, new BottomCenterItemDecoration(R.layout.item_decoration_0))</span><br><span class="line">      .padding(5)</span><br><span class="line">      .setHighLightShape(HighLightShape.TYPE_CIRCULAR)</span><br><span class="line">      .showAll(true)</span><br><span class="line">      .build()</span><br><span class="line">      .show(this);</span><br><span class="line">                </span><br></pre></td></tr></table></figure><blockquote><p>注：支持直接onCreate方法中调用show方法</p></blockquote><h4 id="1、提供的对齐方式"><a href="#1、提供的对齐方式" class="headerlink" title="1、提供的对齐方式"></a>1、提供的对齐方式</h4><p>提示布局方向支持左、上、右、下四个方向上的居中对齐显示</p><p>显示在左边与高亮view在水平方向居中对齐</p><p><code>LeftCenterItemDecoration</code></p><p>显示在上方与高亮view在垂直方向居中对齐</p><p><code>TopCenterItemDecoration</code></p><p>显示在右方与高亮view在水平方向居中对齐</p><p><code>RightCenterItemDecoration</code></p><p>显示在下方与高亮view在垂直方向居中对齐</p><p><code>BottomCenterItemDecoration</code></p><h4 id="2、-扩展对齐方式"><a href="#2、-扩展对齐方式" class="headerlink" title="2、 扩展对齐方式"></a>2、 扩展对齐方式</h4><p>提供的对齐方式若不满足需求，可以继承ItemDecoration扩展，实现如下的方法：</p><p><code>public abstract int[] getOffsetLeftAndTop(CutoutViewInfo cutoutViewInfo, int offsetX, int offsetY);</code></p><p>该方法返回一个int[] 数组，存放功能提示view的left 和 top 坐标</p><h4 id="5、暴露的回调方法-OnGuideViewDismissListener"><a href="#5、暴露的回调方法-OnGuideViewDismissListener" class="headerlink" title="5、暴露的回调方法 OnGuideViewDismissListener"></a>5、暴露的回调方法 OnGuideViewDismissListener</h4><p>回调时机：当功能提示view全部显示完关闭时</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">guideViewHelper.show(MainActivity.this, new GuideView.OnGuideViewDismissListener() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void onDisMiss() &#123;</span><br><span class="line">                       Toast.makeText(MainActivity.this, &quot;guide view dismiss&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;库地址&quot;&gt;&lt;a href=&quot;#库地址&quot; class=&quot;headerlink&quot; title=&quot;库地址&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/yndongyong/GuideView&quot;&gt;库地址&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="自定义View" scheme="https://yndongyong.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
</feed>
