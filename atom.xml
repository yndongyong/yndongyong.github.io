<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yndongyong‘s blog</title>
  
  <subtitle>生命不息，学习不止！</subtitle>
  <link href="https://yndongyong.github.io/atom.xml" rel="self"/>
  
  <link href="https://yndongyong.github.io/"/>
  <updated>2022-10-08T03:53:58.601Z</updated>
  <id>https://yndongyong.github.io/</id>
  
  <author>
    <name>yndongyong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>App minSdk升级为24之后的问题</title>
    <link href="https://yndongyong.github.io/2022/10/08/App-minSdk%E5%8D%87%E7%BA%A7%E4%B8%BA24%E4%B9%8B%E5%90%8E%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://yndongyong.github.io/2022/10/08/App-minSdk%E5%8D%87%E7%BA%A7%E4%B8%BA24%E4%B9%8B%E5%90%8E%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-10-08T03:35:01.000Z</published>
    <updated>2022-10-08T03:53:58.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="升级的原因"><a href="#升级的原因" class="headerlink" title="升级的原因"></a>升级的原因</h3><p>最近，因为vivo商店的审核问题，将App的minSdk从21升级到24，下限支持为Android7。ci上打包的apk，发给测试之后，测试反馈打开之后就闪退。</p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>排查日志，有一个<code>SIGE（11）</code>相关的日志，使用未加固的包安装测试，发现正常。因而认为是加固引起的问题。此前的加固策略里有两条，一条是签名检测、一条是so加固。签名检测到不一致时，会退出App。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这里是<code>build.gradle</code>中签名相关的配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        storeFile file(<span class="string">&quot;../xxx.jks&quot;</span>)</span><br><span class="line">        storePassword <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        keyAlias <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        keyPassword <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怀疑大概率是签名机制的问题，Android7及以上默认是使用v2签名。</p><p>minSdk是21时：包构建时使用v1签名打包，然后加固，最后重新使用v1+v2签名。</p><p>minSdk升级为24之后：包构建时使用v2签名打包，然后加固，最后重新使用v1+v2签名。</p><p>两种行为之下，在加固的签名校验环节任务签名不一致了，主动关闭App了。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>minSdk24的情况下，构建包时，配置使用使用v1进行签名，v2签名需要关闭（默认是打开的），加固之后使用v1+v2方式重新签名</p><p>配置如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        storeFile file(<span class="string">&quot;../xxx.jks&quot;</span>)</span><br><span class="line">        storePassword <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        keyAlias <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        keyPassword <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">        v2SigningEnabled <span class="literal">false</span></span><br><span class="line">        v1SigningEnabled <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;升级的原因&quot;&gt;&lt;a href=&quot;#升级的原因&quot; class=&quot;headerlink&quot; title=&quot;升级的原因&quot;&gt;&lt;/a&gt;升级的原因&lt;/h3&gt;&lt;p&gt;最近，因为vivo商店的审核问题，将App的minSdk从21升级到24，下限支持为Android7。ci上打包的a</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    <category term="android studio" scheme="https://yndongyong.github.io/categories/android-studio/"/>
    
    
    <category term="android minSdk" scheme="https://yndongyong.github.io/tags/android-minSdk/"/>
    
  </entry>
  
  <entry>
    <title>记一次App提审隐私协议h5页面打不开的问题排查</title>
    <link href="https://yndongyong.github.io/2022/04/29/%E8%AE%B0%E4%B8%80%E6%AC%A1App%E6%8F%90%E5%AE%A1%E9%9A%90%E7%A7%81%E5%8D%8F%E8%AE%AEh5%E9%A1%B5%E9%9D%A2%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://yndongyong.github.io/2022/04/29/%E8%AE%B0%E4%B8%80%E6%AC%A1App%E6%8F%90%E5%AE%A1%E9%9A%90%E7%A7%81%E5%8D%8F%E8%AE%AEh5%E9%A1%B5%E9%9D%A2%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</id>
    <published>2022-04-29T08:28:00.000Z</published>
    <updated>2022-10-08T02:59:18.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>在vivo应用商店上传应用，被拒，提示64、32位的应用隐私协议h5打开之后都是白屏，看拒审通知，两款设备一新一旧，系统版本有Android11、android6。这个h5在本地用个各种浏览器、手机访问都很正常。但是连续多次的提审都因为打开之后白屏被拒。</p><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>用电脑浏览器、测试手机、手机浏览器打开都很正常，后面只能找前端一起排查问题，h5也是很简单的静态页面，没有用到任何的jsb。之后通过关键字<code>vivo 打开网页白屏</code> 网络搜索发现似乎也有很多人遇到，也是反馈vivo系统问题，也没有什么实质性的线索，暂时认为是审核时的网络问题，抱着侥幸的心里，又再一次提审了，结果又一次悲剧了。</p><p>之后通过了分析了h5页面，发现引入了几个第三方cnd服务器上的js，基本是vue相关的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js</span><br><span class="line">https://cdn.jsdelivr.net/npm/vue-router@3.5.2/dist/vue-router.min.js</span><br><span class="line">https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.min.js</span><br><span class="line">https://cdn.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js</span><br><span class="line">https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.min.js</span><br></pre></td></tr></table></figure><p>一开始看很正常，甚至每个连接在云南访问都是很正常，排查webview相关配置异常的问题。但是审核时，网页就是白屏，开始怀疑时审核地那边的网络问题加载不出，vue写的页面，js加载不成功的是不会进行网页的渲染的。再之后通过 <code>https://tool.chinaz.com/speedtest</code>站长之家的测速工具发现广东、深圳这一片都无法访问这个域名<code>cdn.jsdelivr.net</code> ，同时网上信息表示<code>jsdelivr</code>的域名过期了，等我搜索到这一信息的时候，证书已经替换了，但是广东这一片还是访问<code>jsdeliver</code>还是超时，破案了。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>最终将上诉的vuejs相关的引入替换为自家服务服务器的js。之后提审正常通过。</p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>好紧不长，之后按要求将App拆为32位、64位的包，之后再在vivo商店上传审核32应用时，总是被拒，提示隐私协议h5打开后展示白屏，发现设备是一款比较老的手机，系统为Android6，webview的内核为58.x。</p><h3 id="排查-1"><a href="#排查-1" class="headerlink" title="排查"></a>排查</h3><p>之后在本地使用模拟器（Android6.0的系统）复现了同样的问题，app内的所有网页都是打不开的，由于正式包，能够拦截排查的日志也有限,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">12</span>)] <span class="string">&quot;The key &quot;</span>viewport-fit<span class="string">&quot; is not recognized and ignored.&quot;</span>, <span class="attr">source</span>: <span class="attr">https</span>:<span class="comment">//static.ybsjyyn.com/app/about.html#/about/service (12)</span></span><br><span class="line"> [chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">164</span>)] <span class="string">&quot;Uncaught SyntaxError: Unexpected token *&quot;</span>, <span class="attr">source</span>: <span class="attr">https</span>:<span class="comment">//static.ybsjyyn.com/app/js/chunk-vendors.1e681edf.js (164)</span></span><br><span class="line">[chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">12</span>)] <span class="string">&quot;The key &quot;</span>viewport-fit<span class="string">&quot; is not recognized and ignored.&quot;</span>, <span class="attr">source</span>: <span class="attr">https</span>:<span class="comment">//static.ybsjyyn.com/app/about.html#/about/service (12)</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">1</span>)] <span class="string">&quot;Uncaught TypeError: window._handleMessageFromNative is not a function&quot;</span>, <span class="attr">source</span>:  (<span class="number">1</span>)</span><br><span class="line">[chromium] : [<span class="attr">INFO</span>:<span class="title function_">CONSOLE</span>(<span class="number">0</span>)] <span class="string">&quot;Unrecognized Content-Security-Policy directive &#x27;worker-src&#x27;.</span></span><br><span class="line"><span class="string">[chromium] : [INFO:CONSOLE(2)] &quot;</span><span class="title class_">Uncaught</span> <span class="title class_">TypeError</span>: <span class="title class_">Object</span>.<span class="property">values</span> is not a <span class="keyword">function</span><span class="string">&quot;, source: https://txc.gtimg.com/static/6756/index.e7d6f3d0.js (2)</span></span><br><span class="line"><span class="string">[chromium] : [INFO:CONSOLE(1)] &quot;</span><span class="title class_">Uncaught</span> <span class="title class_">TypeError</span>: <span class="variable language_">window</span>.<span class="property">_handleMessageFromNative</span> is not a <span class="keyword">function</span><span class="string">&quot;, source:  (1)</span></span><br><span class="line"><span class="string">[chromium] : [INFO:CONSOLE(1)] &quot;</span><span class="title class_">The</span> key <span class="string">&quot;viewport-fit&quot;</span> is not recognized and ignored.<span class="string">&quot;, source: https://support.qq.com/embed/phone/30476 (1)</span></span><br><span class="line"><span class="string">[chromium] : [INFO:CONSOLE(2)] &quot;</span><span class="title class_">Uncaught</span> <span class="title class_">TypeError</span>: <span class="title class_">Object</span>.<span class="property">values</span> is not a <span class="keyword">function</span><span class="string">&quot;, source: https://txc.gtimg.com/static/6756/index.e7d6f3d0.js (2)</span></span><br></pre></td></tr></table></figure><p>虽然<code>vue</code>的文档上说支持Android4.4以上，但是还是怀疑是<code>vue</code>的兼容性，一些新的<code>js</code>、<code>css</code>属性，再低版本系统上缺失。</p><p>由于App内的所有网页使用的都是<code>vue</code> 让前端团队在这个时候来处理兼容性的已经是不现实了。之后通过分分析<code>android5，6</code>的用户只占比0.02%了，将App对android版本支持的下限从<code>Android5</code>升级为<code>Android7</code>。</p><p>再次提审，完美避开了旧版本，正常通过审核。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h3&gt;&lt;p&gt;在vivo应用商店上传应用，被拒，提示64、32位的应用隐私协议h5打开之后都是白屏，看拒审通知，两款设备一新一旧，系统版本有And</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    <category term="android线上填坑" scheme="https://yndongyong.github.io/categories/android%E7%BA%BF%E4%B8%8A%E5%A1%AB%E5%9D%91/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android Apk大小优化</title>
    <link href="https://yndongyong.github.io/2022/04/19/Android-apk%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/"/>
    <id>https://yndongyong.github.io/2022/04/19/Android-apk%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/</id>
    <published>2022-04-19T08:37:58.000Z</published>
    <updated>2022-04-21T06:59:15.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着App工程的长时间维护，项目里堆积了一些曾经有用的、但随着升级迭代逐渐没有使用到的资源，比如<code>Activity</code> 、<code>Fragment</code>、<code>RecyclerView</code>的<code>ItemView</code>等的布局<code>xml</code>资源，各种背景<code>Shape</code>的<code>xml</code>资源，以及图标图片等。虽然在<code>Release</code>包的构建配置中设置了<code>shrinkResources true</code>的配置,但并没有将这些资源真正的删除，而是替换为一个个的空文件，仍然会参与编译构建，最终导致。</p><p>长此以往，造成了三个主要问题：</p><ol><li>工程代码包括资源的膨胀。</li><li><code>Apk</code>的包大小越来越大的问题，此前v5.5.0版本的armv8a的包大小已经达到<code>69M</code>。进行包大小优化有助于提高下载转化率。</li><li>编译耗时增加，目前的工程本地一次完整的<code>debug</code>包的全量编译需要耗时七八分钟之久（编译环境win11,corei5-1135g7，24g内存，m.2 ssd）。从编译速度的角度考虑，无用资源的移除也是很有必要的。</li></ol><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><p>为了处理上述的三个问题，优化<code>Apk</code>包大小，主要采用以下三种手段</p><ol><li><code>android lint</code> 移除无用资源</li><li>移除<code>drawable-xhpi</code>图片资源文件夹中的无用图片资源</li><li>使用图片压缩工具将<code>drawable-xxhpi</code>图片资源文件夹中的尺寸比较的图片资源进行压缩减小图片大小。</li></ol><h3 id="一、android-lint-移除无用资源"><a href="#一、android-lint-移除无用资源" class="headerlink" title="一、android lint 移除无用资源"></a>一、<code>android lint</code> 移除无用资源</h3><p>在<code>Android studio</code>可以通过lint检查分析那些没有使用到的资源，操作路径为： <code>Analyze</code>-&gt;<code>Run INspection by Name</code> 输入<code>unused resources</code>对分析出的资源文件加以清理。</p><p>如果直接删除<code>lint</code>分析出来的文件列表，可能会存在误删除的情况，比如<code>raw</code>文件中的文件，和通过反射方式以及<code>getResources().getIdentifier</code>的方法使用的资源<code>lint</code>是无法区分的，需要我们提前进行梳理，使用白名单进行保留，可以新建一个resource的xml文件，列出要保留的文件，防止误删。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:keep</span>=<span class="string">&quot;@drawable/ic_reoad_event_*,@drawable/ic_reoad_marker_*,@drawable/ic_reoad_marker_big_*,</span></span></span><br><span class="line"><span class="string"><span class="tag">    @dimen/status_bar_height,@dimen/navigation_bar_height,@raw/bg_video_login,@raw/roll,@string/MI_APP_ID,@string/MI_APP_KEY&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在移除资源的过程需要各个小项仔细区分，防止避免误删除。建议整个工程都在git的版本管理之下再执行该操作。</p><p>此外，在实际执行<code>Remove All Unused Resource</code>的过程中还出现了删除各种布局的控件id的情况，也需要避免，我们通过在<code>App moudle</code>的lint.xml文件中，定制扫描规则进行忽略。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;SpUsage&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;ignore&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;SmallSp&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;ignore&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;ContentDescription&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;ignore&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加上可以避免布局中的控件id被删除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">&quot;UnusedIds&quot;</span> <span class="attr">severity</span>=<span class="string">&quot;ignore&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">lint</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种<code>lint</code>方式也存在一定的缺陷，它是一个静态扫描工具，并没有考虑到<code>ProGuard</code>工程中删除的无用代码，<code>lint</code>检查不出这些无用代码所引用的无用资源。</p><h3 id="二、drawable-xhpi中的无用资源移除"><a href="#二、drawable-xhpi中的无用资源移除" class="headerlink" title="二、drawable-xhpi中的无用资源移除"></a>二、<code>drawable-xhpi</code>中的无用资源移除</h3><p>对于<code>drawable-xhpi</code>的优化，我在App（目前的月活大概是数十万量级）中进行埋点，经过两个月的数据沉淀，通过分析埋点数据发现98%的设备的屏幕分辨率都是<code>1080*1920</code>以及之上的，还有1%的720P。基于以上的埋点数据来看<code>drawable-xhpi</code>的文件夹已经没有存在的必要了，但是为了防止之前导入图片只放一份在<code>drawable-xhpi</code>的情况，需要对比<code>drawable-xhpi</code>文件夹和<code>drawable-xxhpi</code>，将那些存在与<code>xxhdpi</code>也存在与<code>xhpi</code>的图片从<code>drawable-xxhpi</code>文件中删除，防止误删除情况的发生。</p><p>使用了<code>python</code>编写了一个简单的脚本达到上诉目的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">top = os.getcwd()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;scan top: &#x27;</span> + top</span><br><span class="line">xDpi = os.path.join(top,<span class="string">&quot;drawable-xhdpi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;scan xDpi dir: &#x27;</span> + xDpi</span><br><span class="line"></span><br><span class="line">xxDpi = os.path.join(top,<span class="string">&quot;drawable-xxhdpi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;scan xxDpi dir: &#x27;</span> + xxDpi</span><br><span class="line"></span><br><span class="line">xxList = []</span><br><span class="line">xList = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> os.listdir(xxDpi):</span><br><span class="line">apps = os.path.join(xxDpi, path)</span><br><span class="line">xxList.append(path)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;xxList: &#x27;</span></span><br><span class="line"><span class="built_in">print</span> xxList </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> os.listdir(xDpi):</span><br><span class="line">apps = os.path.join(xDpi, path)</span><br><span class="line">xList.append(path)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;xList: &#x27;</span></span><br><span class="line"><span class="built_in">print</span> xList </span><br><span class="line"></span><br><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> xList <span class="keyword">if</span> x <span class="keyword">in</span> xxList]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;删除xh中与xxh中的相同元素: &#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> a:</span><br><span class="line">filePath = os.path.join(xDpi, path)</span><br><span class="line">os.remove(filePath)</span><br></pre></td></tr></table></figure><p>此外，依据埋点数据的结论，在团队中推行，图片只用放一份到<code>xxhdpi</code>文件夹中的开发规范。</p><h3 id="三、大图压缩"><a href="#三、大图压缩" class="headerlink" title="三、大图压缩"></a>三、大图压缩</h3><p>对于剩余的<code>drawable-xxhpi</code>中的图片资源，使用一款名叫鸭鸭压缩软件进行批量压缩，至于压缩效果前期已经找到UI老师进行确认。</p><h2 id="优化效果"><a href="#优化效果" class="headerlink" title="优化效果"></a>优化效果</h2><ol><li>移除<code>drawable-xhpi</code>中的无用图片资源820份</li><li>移除布局 135份 ；移除<code>shape drawable</code> 131； 移除<code>drawable-xxhpi</code>未使用的图片400多份，以及各类<code>string</code>、<code>color</code>资源500多份</li><li>v5.5.0版本的armv8a的包大小从<code>69.5M</code>包大小降低至<code>63.08M</code>，包大小减少<code>6.42M</code></li></ol><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img/202204211417724.png?token=ACWZC7FJXPTKPHNL6QD6WS3CMD3TY" alt="附图基于v5.5.0版本进行优化的包大小对比"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;随着App工程的长时间维护，项目里堆积了一些曾经有用的、但随着升级迭代逐渐没有使用到的资源，比如&lt;code&gt;Activity&lt;/code&gt; </summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://yndongyong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android端代码分支管理规范</title>
    <link href="https://yndongyong.github.io/2022/03/29/Android%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <id>https://yndongyong.github.io/2022/03/29/Android%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/</id>
    <published>2022-03-29T01:43:08.000Z</published>
    <updated>2022-04-01T15:41:10.386Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>目前，App的发版呈现发版频率增加的趋势，以及面临各种紧急需求临时发版或者临时修复线上严重问题导致频繁发版的情况。总体来说是发版频率增加了，由原本的一月一次（或者一月两次）提升到多次的情况，现在的代码分支管理策略已经不能适应目前项目的规模和发版节奏相匹配 了。</p><p>原来的分支管理，是按照App迭代版本号创建与迭代同名的主分支加上若干特性分支方式。，例如，规划了下个迭代发布2.0.0版本，那么就基于线上版本对应的v1.0.0分支创建一个v2.0.0的主分支（用于线上bug修复），以及若干的其他feature分支，等到开发完成需要提测时，会将确认要提测的所有的feature分支合并到的v2.0.0主分支，后续提测问题的修复都将v2.0.0分支进行，并最终基于这个分支进行打包上线。 这种方式适合版本维护比较单一，迭代周期固定的项目。</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img202203291110534.png?token=GHSAT0AAAAAABRNWEVXKAJLADMHSQ3RXBBQYSHDSWQ" alt="1"></p><p>在频繁发版的情况下，这种模式存在以下几个比较难以解决的的问题。</p><ul><li>问题1，在临近上线前，由于某个特性功能由于延期或者其他原因不需要上线了， 这个时候噩梦开始，在主干分支上剥离某个特新分支的代码是非常困难，git的日志上会存在大量剔除代码的记录，同时由于对应的特性feature分支上有没有bug修复记录，难以继续在该分支上维护。尤其在多版本并行开发的时候，这个问题会更加突出。</li><li>问题2， 在需要临时发版2.0.0版本上线其他需求时， 分支v2.0.0已经被占用，只能取其他的名字，这样的情况次数多了以后，会造成版本记录混乱，功能点不明确。</li></ul><h4 id="新的方案"><a href="#新的方案" class="headerlink" title="新的方案"></a><strong>新的方案</strong></h4><p>参考阿里<strong>AoneFlow</strong>方案，这种方案下使用四种分支类型， 1个master主干分支+1个hotfix分支+N个特性分支+N个发布分支 </p><p><strong>规则一：</strong> 开始工作前，从master创建1个hotfix分支与N个feature分支。<br>从代表最新已发布版本的master分支上，创建hotfix分支修改线上版本问题，创建以<strong>feature&#x2F;</strong> 前缀命名的若干特性分支，进行特性功能的开发和以及提测问题的修复，每个功能模块对应一个特性分支。</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img202203291112562.png?token=GHSAT0AAAAAABRNWEVXNBBTAVSXK3UZEQ34YSHDTXQ" alt="2"></p><p><strong>规则二：</strong> 通过合并feature分支，形成release分支。<br>从master分支上拉出以**release&#x2F;**前缀命名的新分支，将本次要集成或者发布的feature、hotfix分支依次合并过去。</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img202203291113966.png?token=GHSAT0AAAAAABRNWEVWDSMS3J6NJOF547AAYSHDUDA" alt="3"></p><p>优势：</p><ol><li>多个特性分支可同步开发</li><li>发布分支的特性是动态组成的，调整起来是非常容易的。要上线哪些feature不上线哪些feature，重新分布分支只用将原来的发布分支删除掉，从主干分支拉出新的同名分支，再将需要上线的分支合并过来，很好的避免了原来方案的弊端。</li></ol><p><strong>规则三：</strong>  使用release分支发布到线上正式环境后，合并相应的release分支到master分支，在master分支上添加tag，同时删除该release分支关联的feature分支。</p><p><img src="https://raw.githubusercontent.com/yndongyong/picBed/master/img202203291114069.png?token=GHSAT0AAAAAABRNWEVWLTCATX25LZREFRW6YSHDULA" alt="4"></p><p> 版本发布后需要将这条发布分支合并到主干分支，主干分支的最新版本始终与线上版本一致，如果需要回溯历史版本，只需要在主干分支上找到对应的版本标签。<br>为了避免在代码仓库里堆积大量历史特性分支，还应该清理掉已经上线历史的部分特性分支 。</p><h4 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h4><p> 每个分支的创建 简单合并步骤使用单纯的 Git 命令就能玩转，但还是将这些常规化操作工具化了，避免重复这些日常琐事的命令操作。<br>目前在Jenkins提供了两个Job，</p><ul><li>YYN_CREATE_BRANCHS:用于操作hotfix,feature分支创建（目前删除远程分支的操作还是交由团队个人）</li><li>YYN_MERGE_BRANCHS:拉release发布分支以及合并hotfix、feature分支Job。</li></ul><h4 id="其他约定"><a href="#其他约定" class="headerlink" title="其他约定"></a><strong>其他约定</strong></h4><ul><li>master分支开发人员不允许直接提交代码，已经设置分支保护。</li><li>定期清理历史release发布分支。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;目前，App的发版呈现发版频率增加的趋势，以及面临各种紧急需求临时发版或者临时修复线上严重问题导致频繁发版的情况。总体来说是发版频率增加了，</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="分支管理" scheme="https://yndongyong.github.io/tags/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>使用NON-UI—FRAGMENT优化startActivityForResult代码</title>
    <link href="https://yndongyong.github.io/2018/08/30/%E4%BD%BF%E7%94%A8NON-UI%E2%80%94FRAGMENT%E4%BC%98%E5%8C%96startActivityForResult%E4%BB%A3%E7%A0%81/"/>
    <id>https://yndongyong.github.io/2018/08/30/%E4%BD%BF%E7%94%A8NON-UI%E2%80%94FRAGMENT%E4%BC%98%E5%8C%96startActivityForResult%E4%BB%A3%E7%A0%81/</id>
    <published>2018-08-30T02:30:58.000Z</published>
    <updated>2022-03-28T15:27:56.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用NON-UI-FRAGMENT优化startActivityForResult"><a href="#使用NON-UI-FRAGMENT优化startActivityForResult" class="headerlink" title="使用NON-UI-FRAGMENT优化startActivityForResult"></a>使用NON-UI-FRAGMENT优化startActivityForResult</h2><p>一般地，要使用AActivity.startActivityForResult(BActivity)需要在Activity中覆盖父类的onActivityForResult（）回调方法。</p><p>如果一个Activity需要调用多个Activity并且获取返回结果，会造成调用处和回调处彼此分离，逻辑不清晰、代码混乱的的问题。有没有一种较为优雅的方式，打破这种惯性。</p><p>回答是肯定的，即本文的NON-UI-FRAGMENT，使用无UI的fragment，将部分业务代码封装到fragment中，再通过callback将最终结果回调给Activity，原本的Activity再也不用复写父类的startActivityForResult，传递一个回调即可。</p><p>使用这种方式，可以封装那些共性较多的类，将原本需要通过继承和复写的逻辑放到fragment中，体现了软件开发中的一大设计原则——使用组合替代继承。</p><p>本文中的startActivityForResult的替代优化仅是NON-UI-FRAGMENT的一种实现使用，NON-UI-FRAGMENT的可以做的更多，一些简单的使用场景：譬如封装权限申请、登录判断跳转，第三方登录等、截屏等等，其他待自己拓展。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><pre><code>ActivityResultHelper resultHelper = ActivityResultHelper.attach(this);resultHelper.startForResult(intent, 0x10, new ActivityResultHelper.CallBack() &#123;    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;        if (requestCode == 101 &amp;&amp; resultCode == RESULT_OK) &#123;            Log.d(&quot;DONG&quot;, &quot;true&quot;);        &#125; else &#123;            Log.d(&quot;DONG&quot;, &quot;false&quot;);        &#125;    &#125;&#125;);</code></pre><p>再也不用将调用入口和返回结果处理的代码分开了。 </p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre><code> public class ActivityResultHelper extends Fragment &#123;    private static final String FRAG_TAG = ActivityResultHelper.class.getCanonicalName();    private Activity mContext;    private CallBack mListener;    public interface CallBack &#123;        void onActivityResult(int requestCode, int resultCode, Intent data);    &#125;    public static &lt;ParentFrag extends Fragment&gt; ActivityResultHelper attach(ParentFrag parent) &#123;        return attach(parent.getChildFragmentManager());    &#125;    public static &lt;ParentActivity extends FragmentActivity&gt; ActivityResultHelper attach(ParentActivity parent) &#123;        return attach(parent.getSupportFragmentManager());    &#125;    private static ActivityResultHelper attach(FragmentManager fragmentManager) &#123;        ActivityResultHelper frag = (ActivityResultHelper) fragmentManager.findFragmentByTag(FRAG_TAG);        if (frag == null) &#123;            frag = new ActivityResultHelper();            fragmentManager.beginTransaction().add(frag, FRAG_TAG).commit();            //TODO fragment在Activity的onCreate中被attach之后就立即调用fragment的一些方法，需要如下代码，否则不需要            fragmentManager.executePendingTransactions();        &#125;        return frag;    &#125;    @Override    public void onAttach(Context context) &#123;        super.onAttach(context);        mContext = (Activity) context;    &#125;    @Override    public void onDetach() &#123;        super.onDetach();        mContext = null;    &#125;    public Activity getContext() &#123;        return mContext;    &#125;    public void startForResult(Intent intent, int requestCode, CallBack listener) &#123;        this.mListener = listener;        startActivityForResult(intent, requestCode);    &#125;    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;        if (mListener != null) &#123;            mListener.onActivityResult(requestCode, resultCode, data);        &#125;    &#125;&#125;      </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用NON-UI-FRAGMENT优化startActivityForResult&quot;&gt;&lt;a href=&quot;#使用NON-UI-FRAGMENT优化startActivityForResult&quot; class=&quot;headerlink&quot; title=&quot;使用NON-UI-F</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="non-ui-framgment headlessfragment" scheme="https://yndongyong.github.io/tags/non-ui-framgment-headlessfragment/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义View实现功能引导页</title>
    <link href="https://yndongyong.github.io/2018/08/01/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD%E5%BC%95%E5%AF%BC%E9%A1%B5/"/>
    <id>https://yndongyong.github.io/2018/08/01/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD%E5%BC%95%E5%AF%BC%E9%A1%B5/</id>
    <published>2018-08-01T08:43:28.000Z</published>
    <updated>2022-03-28T15:37:13.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="库地址"><a href="#库地址" class="headerlink" title="库地址"></a><a href="https://github.com/yndongyong/GuideView">库地址</a></h3><p><a href="https://github.com/yndongyong/GuideView/blob/master/dest/app_guideview-debug.apk">demo</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>实现页面引导，提示用户操作。用户引导结合场景，以图层的形式叠加到对应的View上。高亮效果支持矩形、圆角矩形、圆形、椭圆四种形状，以及支持高斯模糊的效果。</p><p>效果预览图</p><p><img src="http://oav23hfp9.bkt.clouddn.com/18-8-1/91135939.jpg" alt="功能引导"></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>使用自定义view实现，显示时机控制为界面绘制完成后的下一个帧</li><li>以图层的形式叠加到UI控件上</li><li>高亮效果支持矩形、圆角矩形、圆形、椭圆四种</li><li>支持高斯模糊效果</li><li>提示布局方向支持左、上、右、下四个方向的居中，支持扩展</li><li>支持全部一起显示，或是一个接一个的显示方式</li></ol><h3 id="changelog"><a href="#changelog" class="headerlink" title="changelog"></a>changelog</h3><p><strong>v0.0.1</strong></p><p>实现效果，可用</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol start="0"><li>收集要高亮显示的view的左上点坐标、宽高信息</li><li>取到Activity的decorview，添加一层FrameLayout布局</li><li>自定义view(GuideView)中根据高亮显示的view的坐标宽高信息，使用PorterDuffXfermode 的Mode.XOR，画出镂空效果，同一个坐标上正常的画一次，Mode.XOR的模式绘制第二次即可以实现镂空的效果</li><li>在GuideView中根据高亮view的坐标 addView（功能提示的view），代码中处理了addView 以及requestLayout之后布局会闪烁的问题。</li></ol><p>PorterDuffXfermode 的Mode.XOR 原理参见：</p><p><img src="https://upload-images.jianshu.io/upload_images/2041548-d964105abf4be5d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/312" alt="图像合成"></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new GuideViewHelper.Builder()</span><br><span class="line">      .addView(id_switch_1, new BottomCenterItemDecoration(R.layout.item_decoration_0))</span><br><span class="line">      .padding(5)</span><br><span class="line">      .setHighLightShape(HighLightShape.TYPE_CIRCULAR)</span><br><span class="line">      .showAll(true)</span><br><span class="line">      .build()</span><br><span class="line">      .show(this);</span><br><span class="line">                </span><br></pre></td></tr></table></figure><blockquote><p>注：支持直接onCreate方法中调用show方法</p></blockquote><h4 id="1、提供的对齐方式"><a href="#1、提供的对齐方式" class="headerlink" title="1、提供的对齐方式"></a>1、提供的对齐方式</h4><p>提示布局方向支持左、上、右、下四个方向上的居中对齐显示</p><p>显示在左边与高亮view在水平方向居中对齐</p><p><code>LeftCenterItemDecoration</code></p><p>显示在上方与高亮view在垂直方向居中对齐</p><p><code>TopCenterItemDecoration</code></p><p>显示在右方与高亮view在水平方向居中对齐</p><p><code>RightCenterItemDecoration</code></p><p>显示在下方与高亮view在垂直方向居中对齐</p><p><code>BottomCenterItemDecoration</code></p><h4 id="2、-扩展对齐方式"><a href="#2、-扩展对齐方式" class="headerlink" title="2、 扩展对齐方式"></a>2、 扩展对齐方式</h4><p>提供的对齐方式若不满足需求，可以继承ItemDecoration扩展，实现如下的方法：</p><p><code>public abstract int[] getOffsetLeftAndTop(CutoutViewInfo cutoutViewInfo, int offsetX, int offsetY);</code></p><p>该方法返回一个int[] 数组，存放功能提示view的left 和 top 坐标</p><h4 id="5、暴露的回调方法-OnGuideViewDismissListener"><a href="#5、暴露的回调方法-OnGuideViewDismissListener" class="headerlink" title="5、暴露的回调方法 OnGuideViewDismissListener"></a>5、暴露的回调方法 OnGuideViewDismissListener</h4><p>回调时机：当功能提示view全部显示完关闭时</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">guideViewHelper.show(MainActivity.this, new GuideView.OnGuideViewDismissListener() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void onDisMiss() &#123;</span><br><span class="line">                       Toast.makeText(MainActivity.this, &quot;guide view dismiss&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;库地址&quot;&gt;&lt;a href=&quot;#库地址&quot; class=&quot;headerlink&quot; title=&quot;库地址&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/yndongyong/GuideView&quot;&gt;库地址&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="android" scheme="https://yndongyong.github.io/categories/android/"/>
    
    
    <category term="自定义View" scheme="https://yndongyong.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView 通用Adapter支持多种布局</title>
    <link href="https://yndongyong.github.io/2018/06/03/RecyclerView-%E9%80%9A%E7%94%A8Adapter%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E5%B8%83%E5%B1%80/"/>
    <id>https://yndongyong.github.io/2018/06/03/RecyclerView-%E9%80%9A%E7%94%A8Adapter%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E5%B8%83%E5%B1%80/</id>
    <published>2018-06-03T04:43:16.000Z</published>
    <updated>2018-06-03T04:46:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>库地址：<a href="https://github.com/yndongyong/multiitemview/tree/ontomany_0.0.3">https://github.com/yndongyong/multiitemview/tree/ontomany_0.0.3</a></p><p>作用：简化adapter中涉及多种ItemView布局的写法，使用对象池存放布局对象(ItemViewProvider)，每一个布局委托一个ItemViewProvider，并在其中封装布局与对象绑定相关的逻辑，简化Adapter。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>极少的类文件</li><li>简化Adapter的写法，直接使用SimpleAdapter</li><li>支持多种布局类型，扩展方便</li><li>每一种布局相关逻辑均写在对应的委托类中</li><li>支持一种数据类型对应多种布局</li></ul><h3 id="主要涉及的类"><a href="#主要涉及的类" class="headerlink" title="主要涉及的类"></a>主要涉及的类</h3><h4 id="SimpleAdapter"><a href="#SimpleAdapter" class="headerlink" title="SimpleAdapter"></a>SimpleAdapter</h4><p>继承RecylerView的adapter，简化多类型Item的Adapter写法。</p><h4 id="ItemViewProvider"><a href="#ItemViewProvider" class="headerlink" title="ItemViewProvider"></a>ItemViewProvider</h4><p>针对每一种布局Item的委托类，onCreateViewHolder和onBindViewHolder都由其委托，在其中完成布局的解析和对象的绑定和该布局相关的逻辑，向外暴露两个方法，一个是返回布局id,一个用于ViewHolder和实体对象的绑定。</p><pre><code>int getLayoutId()//布局文件idvoid onBindViewHolder(SimpleViewHolder holder, T entity);//绑定UI和值</code></pre><h4 id="Items"><a href="#Items" class="headerlink" title="Items"></a>Items</h4><p>用于存放数据集</p><h3 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h3><ul><li>使用一个SparseArray来保存viewType(即是getItemViewType的返回值)和ItemViewProvider的对应关系</li><li>使用一个SparseArray来保存viewType和Model（实体类型）的对应关系</li></ul><p>对应关系举例如下表所示：</p><table><thead><tr><th align="center">viewType</th><th align="center">Model</th><th align="left">ItemViewProvider</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">Category</td><td align="left">CategoryStyle1ItemViewProvider</td></tr><tr><td align="center">1</td><td align="center">News</td><td align="left">NewsItemViewProvider</td></tr><tr><td align="center">2</td><td align="center">Category</td><td align="left">CategoryStyle2ItemViewProvider</td></tr></tbody></table><p>Adapter的getItemViewType方法的思路举例如下：</p><p>对应的实体类型是News，先找到他的viewType，为1，在通过viewType找到对应的ItemViewProvider,对应的ItemViewProvider只有一个，getItemViewType则立即放回ViewType</p><p>对应的实体类型是Category，先找到他的viewType为0，2，再通过viewType找到的对应的ItemViewViewProvider为多个，最终通过ItemViewProvider的accept方法判断由哪个具体的ItemViewViewProvider处理，最中返回其viewType的值。 </p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre><code>//准备数据 items.add(&quot;头部1 -- type1&quot;);items.add(new CategoryEntry(&quot;http://pic.58pic.com/58pic/14/27/45/71r58PICmDM_1024.jpg&quot;, &quot;风景图片1&quot;));items.add(new CategoryEntry(&quot;http://img0.imgtn.bdimg.com/it/u=1610953019,3012342313&amp;fm=214&amp;gp=0.jpg&quot;, &quot;风景图片2&quot;));items.add(&quot;头部2 -- type2&quot;);items.add(new CategoryEntry(&quot;http://pic.58pic.com/58pic/14/27/45/71r58PICmDM_1024.jpg&quot;, &quot;风景图片4&quot;, 2));items.add(new CategoryEntry(&quot;http://img0.imgtn.bdimg.com/it/u=1610953019,3012342313&amp;fm=214&amp;gp=0.jpg&quot;, &quot;风景图片5&quot;, 2));multiTypeAdapter = SimpleAdapter.create(this)            .addNewData(items)            .register(new HeaderItemViewProvider())            .register(new Category1EntryItemViewProvider())            .register(new Category2EntryItemViewProvider())            .register(new Category3EntryItemViewProvider())            .attachToRecyclerView(rv_list);</code></pre><p>效果图中一共实现了4中布局类型：</p><p><img src="http://oav23hfp9.bkt.clouddn.com/18-6-3/25785972.jpg" alt="多种布局"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;库地址：&lt;a href=&quot;https://github.com/yndongyong/multiitemview/tree/ontomany_0.0.3&quot;&gt;https://github.com/yndongyong/multiitemview/tree/ontomany_0</summary>
      
    
    
    
    
    <category term="RecyclerView Adapter" scheme="https://yndongyong.github.io/tags/RecyclerView-Adapter/"/>
    
  </entry>
  
  <entry>
    <title>使用RecyclerView实现分组的展开与收缩</title>
    <link href="https://yndongyong.github.io/2018/01/27/%E4%BD%BF%E7%94%A8RecyclerView%E5%AE%9E%E7%8E%B0%E5%88%86%E7%BB%84%E7%9A%84%E5%B1%95%E5%BC%80%E4%B8%8E%E6%94%B6%E7%BC%A9/"/>
    <id>https://yndongyong.github.io/2018/01/27/%E4%BD%BF%E7%94%A8RecyclerView%E5%AE%9E%E7%8E%B0%E5%88%86%E7%BB%84%E7%9A%84%E5%B1%95%E5%BC%80%E4%B8%8E%E6%94%B6%E7%BC%A9/</id>
    <published>2018-01-27T10:05:12.000Z</published>
    <updated>2018-05-07T07:38:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用RecyclerView实现分组的折叠和展开的显示效果，先上效果图：<br><img src="http://oav23hfp9.bkt.clouddn.com/18-5-7/87674041.jpg" alt="效果图"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如图中所示，有多个Section，每个Section对应着一组数据。可以直接点击Section或者Section的箭头来展开显示当前Section下的数据，或者收起当前Section。项目中使用RecyclerView实现这种效果。主要的思路是：使用两种viewtype实现对应的Section和下层的Entity布局，当展开和折叠操作触发时动态计算RecyclerView对应的Adapter应该包含的数据集，该数据集包含Section数据集和Entity数据集，之后再触犯RecyclerView刷新。</p><p>Adapter的数据集计算规则如下举例:</p><ul><li>Section都是折叠效果的时，Adapter对应的数据集是：list.addAll(所有Section)</li><li>第一个Section展开时的Adapter对应的数据集是：list.add(第一个Setction),list.addAll(第一个Section下的Entity数据集),list.add(其他Section)</li></ul><p> </p><p> <br>定义Section实体</p><pre><code>public class Section &#123;    private String id;    //title    private String name;    //subtitle    private String subTitle;    //Section是否是展开状态 true：展开    private boolean isExpanded;        &lt;!--其他属性和getter/setter方法--&gt;&#125; </code></pre><p>定义第二层的实体ProgramEntity</p><pre><code>public class ProgramEntity &#123;    private String id;    private String name;    private String abumId;    private String content;    &lt;!--其他属性和getter/setter方法--&gt;&#125;</code></pre><p>项目中的使用的Adapter是之前的封装的Adapter,其思想同代码家的MultiType</p><p>在Adapter中为项目注册类型和布局提供者的关系</p><pre><code>mSectionedExpandableGridAdapter = new ExpandableGridAdapter(context, mDataArrayList);&lt;!--对应Section布局--&gt;    mSectionedExpandableGridAdapter.register(Section.class, new SectionItemViewProvider(sectionStateChangeListener));&lt;!--对应Entity布局--&gt;    ProgramStyle2ItemViewProvider programStyle2ItemViewProvider            = new ProgramStyle2ItemViewProvider();    mSectionedExpandableGridAdapter.register(ProgramEntity.class, programStyle2ItemViewProvider);    recyclerView.setAdapter(mSectionedExpandableGridAdapter);    </code></pre><p>当Section被点击是时会回调SectionStateChangeListener，在回调方法中重新计算Adapter数据集中应包含的数据，在触发Recyclerview的刷新。</p><p>核心代码</p><pre><code>//data listprivate LinkedHashMap&lt;Section, List&lt;ProgramEntity&gt;&gt; mSectionDataMap = new LinkedHashMap&lt;Section, List&lt;ProgramEntity&gt;&gt;();private Items mDataArrayList = new Items();public void notifyDataSetChanged() &#123;    //先清空原本的数据    mDataArrayList.clear();    for (Map.Entry&lt;Section, List&lt;ProgramEntity&gt;&gt; entry : mSectionDataMap.entrySet()) &#123;        Section key;        //将Section添加到数据容器中        mDataArrayList.add((key = entry.getKey()));        //Section是展开状态将Section对应的Entity数据集添加到数据容器中        if (key.isExpanded())            mDataArrayList.addAll(entry.getValue());    &#125;    mSectionedExpandableGridAdapter.notifyDataSetChanged();&#125;      </code></pre><p>如果Section下的数据展示是多列，Recyclerview还可以使用GridLayoutManager，通过SpanSizeLookup控制Section单独显示一行，而二层数据显示为多列。</p><pre><code>gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() &#123;        @Override        public int getSpanSize(int i) &#123;            return !isSection(i)?gridLayoutManager.getSpanCount():1;        &#125;    &#125;);    </code></pre><p>如图所示的效果，仅为演示，UI就不再单独处理。</p><p><img src="http://oav23hfp9.bkt.clouddn.com/18-5-7/15510048.jpg" alt="Section单独占一行，二级为gride的效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用RecyclerView实现分组的折叠和展开的显示效果，先上效果图：&lt;br&gt;&lt;img src=&quot;http://oav23hfp9.bkt.clouddn.com/18-5-7/87674041.jpg&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="Android RecycleView 分组 Section" scheme="https://yndongyong.github.io/tags/Android-RecycleView-%E5%88%86%E7%BB%84-Section/"/>
    
  </entry>
  
  <entry>
    <title>使用Behavior实现Toolbar的透明度跟随页面滑动进行变换</title>
    <link href="https://yndongyong.github.io/2018/01/11/%E4%BD%BF%E7%94%A8Behavior%E5%AE%9E%E7%8E%B0Toolbar%E7%9A%84%E9%80%8F%E6%98%8E%E5%BA%A6%E8%B7%9F%E9%9A%8F%E9%A1%B5%E9%9D%A2%E6%BB%91%E5%8A%A8%E8%BF%9B%E8%A1%8C%E5%8F%98%E6%8D%A2/"/>
    <id>https://yndongyong.github.io/2018/01/11/%E4%BD%BF%E7%94%A8Behavior%E5%AE%9E%E7%8E%B0Toolbar%E7%9A%84%E9%80%8F%E6%98%8E%E5%BA%A6%E8%B7%9F%E9%9A%8F%E9%A1%B5%E9%9D%A2%E6%BB%91%E5%8A%A8%E8%BF%9B%E8%A1%8C%E5%8F%98%E6%8D%A2/</id>
    <published>2018-01-11T08:43:07.000Z</published>
    <updated>2018-04-27T09:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Behavior实现Toolbar的透明度跟随页面上下滑动从不透明到透明以及反向的一个显示效果，如下图：</p><p><img src="http://oav23hfp9.bkt.clouddn.com/18-4-27/40610293.jpg" alt="`Toobar`的显示与隐藏"></p><p>###一、实现的效果</p><ol><li>界面上滑过程中，Toolbar逐渐显示出来，直到完全显示</li><li>界面下滑过程中，Toolbar逐渐隐藏，直到完全不可见</li></ol><p>###二、常规思路</p><p>如图所示的效果，常规的做法是为AppBarLayout添加一个OnOffsetChangedListener来监听appbarlayout的滑动的过程，用当前滑动的距离和slideDistance某个固定值计算一个比例，比如图中红色背景块作为锚点，slideDistance就是这个view的高度，通过比例计算出当前的Toolbar的背景颜色的透明值。</p><p>1.上滑过程中滑动距离从 0 到 slideDistance 变化，背景颜色根据滑动距离百分比改变颜色透明度，这个过程颜色透明度从 0 到 255。</p><p>2.下滑过程：即上滑过程的逆向。</p><p>通常情况下，slideDistance 是某个UI元素的高度，这个高度还需要动态的拿到。一般的做法是在Activity的onCreated方法中使用View.post(runnable),或者添加个一个addOnGlobalLayoutListener监听器待界面绘制完成后得到view的高度。</p><p>OnOffsetChangedListener的核心代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AppBarLayout.OnOffsetChangedListener offsetChangedListener = new AppBarLayout.OnOffsetChangedListener() &#123;</span><br><span class="line">        @RequiresApi(api = Build.VERSION_CODES.M)</span><br><span class="line">        @Override</span><br><span class="line">        public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) &#123;</span><br><span class="line">            float fraction = Math.abs(verticalOffset * 1.0f) / slideDistance;</span><br><span class="line">            fraction = Math.min(fraction, 1);</span><br><span class="line">            bgColor = changeAlpha(getResources().getColor(R.color.white), fraction);</span><br><span class="line">            header_toolbar.setBackgroundColor(bgColor);</span><br><span class="line">            tv_toolbar_title.setAlpha(fraction);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、优化后的思路"><a href="#三、优化后的思路" class="headerlink" title="三、优化后的思路"></a>三、优化后的思路</h3><p>由于项目中的多个详情界面都需要实现这样的效果，造成了代码的多次拷贝，如果将来UI需要改变的话，散落在项目各个角落的代码也将难以维护。此外，在每个界面中Toobar显示隐藏参考的view元素也不同的。</p><p>基于以上这些缺点项目最终废弃了常规的做法，使用AppBarLayout.Behavior将这一效果封装、抽象。<br>在需要使用的地方直接引用自定义的Behavior就行。通过Behavior，以一种非侵入的方式为view添加<br>行为。</p><p>核心代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class ChangeToolbarAlphaBehavior extends AppBarLayout.Behavior &#123;</span><br><span class="line"></span><br><span class="line">    //锚点view</span><br><span class="line">    private static final String TAG_ANCHOR_VIEW = &quot;anchorView&quot;;</span><br><span class="line">    //title</span><br><span class="line">    private static final String TAG_TOOLBAR_TITLE = &quot;toolbarTitle&quot;;</span><br><span class="line">    //toolbar</span><br><span class="line">    private static final String TAG_TOOLBAR = &quot;toolbar&quot;;</span><br><span class="line"></span><br><span class="line">    private TextView header_title;</span><br><span class="line">    private View anchorView;</span><br><span class="line">    private android.support.v7.widget.Toolbar toolbar;</span><br><span class="line"></span><br><span class="line">    float slideDistance = 0f;</span><br><span class="line"></span><br><span class="line">    private int bgColor;</span><br><span class="line"></span><br><span class="line">    private int mainColor = 0;</span><br><span class="line"></span><br><span class="line">    public ChangeToolbarAlphaBehavior(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * AppBarLayout布局时调用</span><br><span class="line">     * @param parent</span><br><span class="line">     * @param abl</span><br><span class="line">     * @param layoutDirection</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onLayoutChild(CoordinatorLayout parent, AppBarLayout abl, int layoutDirection) &#123;</span><br><span class="line"></span><br><span class="line">        //拿到toolbar</span><br><span class="line">        if (toolbar == null) &#123;</span><br><span class="line">            toolbar = parent.findViewWithTag(TAG_TOOLBAR);</span><br><span class="line">        &#125;</span><br><span class="line">        //拿到title</span><br><span class="line">        if (header_title == null) &#123;</span><br><span class="line">            header_title = parent.findViewWithTag(TAG_TOOLBAR_TITLE);</span><br><span class="line">        &#125;</span><br><span class="line">        //拿到锚点View，以锚点view的高度作为完全显示或者隐藏的临界值</span><br><span class="line">        if (anchorView == null) &#123;</span><br><span class="line">            anchorView = parent.findViewWithTag(TAG_ANCHOR_VIEW);</span><br><span class="line">        &#125;</span><br><span class="line">        if (anchorView == null || toolbar == null) &#123;</span><br><span class="line">            return super.onLayoutChild(parent, abl, layoutDirection);</span><br><span class="line">        &#125;</span><br><span class="line">        //临界值</span><br><span class="line">        if (slideDistance == 0f) &#123;</span><br><span class="line">            slideDistance = anchorView.getBottom() - toolbar.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line">        if (mainColor == 0) &#123;</span><br><span class="line">            mainColor = ContextCompat.getColor(parent.getContext(), R.color.white);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        abl.addOnOffsetChangedListener(new AppBarLayout.OnOffsetChangedListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) &#123;</span><br><span class="line">                float fraction = Math.abs(verticalOffset * 1.0f) / slideDistance;</span><br><span class="line">                fraction = Math.min(fraction, 1);</span><br><span class="line"></span><br><span class="line">                bgColor = changeAlpha(mainColor, fraction);</span><br><span class="line">                toolbar.setBackgroundColor(bgColor);</span><br><span class="line">                header_title.setAlpha(fraction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        return super.onLayoutChild(parent, abl, layoutDirection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据百分比改变颜色透明度</span><br><span class="line">     */</span><br><span class="line">    public int changeAlpha(int color, float fraction) &#123;</span><br><span class="line">        int red = Color.red(color);</span><br><span class="line">        int green = Color.green(color);</span><br><span class="line">        int blue = Color.blue(color);</span><br><span class="line">        int alpha = (int) (Color.alpha(color) * fraction);</span><br><span class="line">        return Color.argb(alpha, red, green, blue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用方式</p><p>1、直接在xml里为AppbarLayout添加自定义的behavior</p><p><code>app:layout_behavior=&quot;packagename.ChangeToolbarAlphaBehavior&quot;</code></p><p>2、为toolbar添加tag</p><p><code>android:tag=&quot;toolbar&quot;</code></p><p>3、 为锚点view添加tag</p><p><code>android:tag=&quot;anchorView&quot;</code></p><p>3、 为toolbar中有相同动作的view添加tag</p><p>比如此处的title<br><code>android:tag=&quot;toolbarTitle&quot;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用Behavior实现Toolbar的透明度跟随页面上下滑动从不透明到透明以及反向的一个显示效果，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oav23hfp9.bkt.clouddn.com/18-4-27/40610293.jpg&quot; alt=&quot;`Toob</summary>
      
    
    
    
    
    <category term="Android Toolbar Behavior" scheme="https://yndongyong.github.io/tags/Android-Toolbar-Behavior/"/>
    
  </entry>
  
  <entry>
    <title>iOS应用生命周期小节</title>
    <link href="https://yndongyong.github.io/2017/12/17/iOS%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%B0%8F%E8%8A%82/"/>
    <id>https://yndongyong.github.io/2017/12/17/iOS%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%B0%8F%E8%8A%82/</id>
    <published>2017-12-17T05:13:27.000Z</published>
    <updated>2017-12-17T07:19:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS生命周期状态"><a href="#iOS生命周期状态" class="headerlink" title="iOS生命周期状态"></a>iOS生命周期状态</h3><p>iOS应用的生命周期状态分为如下几种：</p><ul><li>Not Running （非运行状态） 应用尚未运行或者被系统终止</li><li>Inactive （前台非运行状态） 应用正在进入前台状态，还不能接受事件处理</li><li>Active (前台运行状态) 应用进入前台运行状态，可以接受用户事件处理</li><li>Background （后台运行状态） 应用进入后台，依然能够执行代码。执行完之后将进入挂起状态</li><li>Suspended（挂起状态） 被挂起的应用进入一种“冷冻状态” ，不能执行代码，若系统内存不足，应用会被终止。</li></ul><p><img src="http://oav23hfp9.bkt.clouddn.com/17-12-17/35088222.jpg" alt="iOS应用的5中状态"></p><p>在iOS应用的各种状态转换的过程中，iOS系统会回调应用程序的委托对象AppDelegate中的方法，并且能够发送相应的通知。主要的方法和通知如下：</p><table><thead><tr><th>方法</th><th>通知</th><th>说明</th></tr></thead><tbody><tr><td>application:didFinishLaunchingWithOptions:</td><td>UIApplicationDidFinishLaunchingNotification</td><td>应用启动初始化时会调用该方法并发出通知，这个阶段会实例化根视图控制器</td></tr><tr><td>applictaionDidBecomeActive:</td><td>UIApplicationDidBecomeActiveNotification</td><td>应用进入前台并且出去活动状态时调用该方法并发出通知，可以在这个方法里恢复UI的状态</td></tr><tr><td>applicationWillResignActive：</td><td>UIApplicationWillResignActiveNotification</td><td>应用从活动状态进入到非活动状态是调用该方法并发出通知。可以在这个方法里保存UI状态</td></tr><tr><td>applicationDidEnterBackground:</td><td>UIApplicationDidEnterBackgroundNotification</td><td>应用进入后台时调用该方法并发出通知，可以在这里保存用户数据，释放资源如数据库资源</td></tr><tr><td>applicationWillEnterForegound:</td><td>UIApplicationWillEnterForegoundNotification</td><td>应用进入到前台，但是处于非活动状态会调用该方法，这个阶段可以恢复用户数据</td></tr><tr><td>applicationWillTerminate:</td><td>UIApplicationWillTerminateNotification</td><td>应用被终止时调用该方法并发出通知，但是内存清除除外，可以在这里释放资源 或者保存用户数据</td></tr></tbody></table><p>iOS应用各种状态切换的方法回调说明见下图<br><img src="http://oav23hfp9.bkt.clouddn.com/17-12-17/33791198.jpg" alt="iOS 生命周期"></p><h3 id="应用启动时的状态切换，对应图中的红线"><a href="#应用启动时的状态切换，对应图中的红线" class="headerlink" title="应用启动时的状态切换，对应图中的红线"></a>应用启动时的状态切换，对应图中的红线</h3><p>Not Running -&gt; Inactive -&gt; Active</p><h3 id="点击home键退出应用时的状态切换，对应图中的绿线"><a href="#点击home键退出应用时的状态切换，对应图中的绿线" class="headerlink" title="点击home键退出应用时的状态切换，对应图中的绿线"></a>点击home键退出应用时的状态切换，对应图中的绿线</h3><p>应用不可以后台执行时<br>Active -&gt; Inactive -&gt; Background -&gt; Suspended -&gt; Not Running</p><p>应用可以后台执行时<br>Active -&gt; Inactive -&gt; Background -&gt; Suspended </p><h3 id="挂起从新运行场景，对应图中的蓝线"><a href="#挂起从新运行场景，对应图中的蓝线" class="headerlink" title="挂起从新运行场景，对应图中的蓝线"></a>挂起从新运行场景，对应图中的蓝线</h3><p>Suspended -&gt; Background -&gt; Inactive -&gt; Active </p><h3 id="应用挂起后被清除时不会调用任何回调方法"><a href="#应用挂起后被清除时不会调用任何回调方法" class="headerlink" title="应用挂起后被清除时不会调用任何回调方法"></a>应用挂起后被清除时不会调用任何回调方法</h3><p>清除包括系统内存不足的系统清除 和 用户从多任务列表中清除</p><p>注意：</p><ul><li>应用是否可以在后台运行和挂起，由info.plist的属性Application dose not run in bakground属性决定，对应的键是UIApplicationExitsonSuspended。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;iOS生命周期状态&quot;&gt;&lt;a href=&quot;#iOS生命周期状态&quot; class=&quot;headerlink&quot; title=&quot;iOS生命周期状态&quot;&gt;&lt;/a&gt;iOS生命周期状态&lt;/h3&gt;&lt;p&gt;iOS应用的生命周期状态分为如下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not Runni</summary>
      
    
    
    
    
    <category term="iOS 生命周期" scheme="https://yndongyong.github.io/tags/iOS-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>TinyBus Intellij plugin</title>
    <link href="https://yndongyong.github.io/2017/10/14/TinyBus-Intellij-plugin/"/>
    <id>https://yndongyong.github.io/2017/10/14/TinyBus-Intellij-plugin/</id>
    <published>2017-10-14T04:12:56.000Z</published>
    <updated>2017-10-14T04:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目里使用到了TinyBus事件总线库，想要post方法到subscribe方法的互相导航，在网上搜索了一圈之后，找不到类似eventbus-interllij-plugin的插件，自己简单的更改了 eventbus-interllij-plugin的代码，实现了tinybus-interllij-plugin。该插件并没有修改plugin id，所以不能和eventbus-interllij-plugin同时安装，感谢eventbus-interllij-plugin作者的开源。</p><p>先上图</p><p><img src="http://oav23hfp9.bkt.clouddn.com/17-10-13/40809369.jpg" alt="tinybus-intellij-plugin"></p><p>目前只支持如下几种导航</p><ul><li><p><code>TinyBus.post</code> to <code>@Subscribe</code> or <code>onXxxEvent</code></p></li><li><p><code>TinyBus.postDelay</code> to <code>@Subscribe</code> or <code>onXxxEvent</code></p></li><li><p><code>@Subscribe</code> to <code>TinyBus.post</code></p></li><li><p>不支持<code>@Subscribe</code> to <code>TinyBus.postDelay</code></p></li></ul><p><a href="http://oav23hfp9.bkt.clouddn.com/tinybus-intellij-plugin.jar">插件下载地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于项目里使用到了TinyBus事件总线库，想要post方法到subscribe方法的互相导航，在网上搜索了一圈之后，找不到类似eventbus-interllij-plugin的插件，自己简单的更改了 eventbus-interllij-plugin的代码，实现了tin</summary>
      
    
    
    
    
    <category term="TinyBus IntellijPlugin eventbus" scheme="https://yndongyong.github.io/tags/TinyBus-IntellijPlugin-eventbus/"/>
    
  </entry>
  
  <entry>
    <title>Android 6 运行时权限小节</title>
    <link href="https://yndongyong.github.io/2017/08/15/Android-6-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E5%B0%8F%E8%8A%82/"/>
    <id>https://yndongyong.github.io/2017/08/15/Android-6-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E5%B0%8F%E8%8A%82/</id>
    <published>2017-08-15T13:31:00.000Z</published>
    <updated>2018-08-30T03:24:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重大更改"><a href="#重大更改" class="headerlink" title="重大更改"></a>重大更改</h2><p>过了很久来找个Util类，发现已经找不到了，于是使用NON-UI-fragment重新实现了一遍。之前的Util需要5个步骤集成，使用了fragment之后，开箱即用。见使用方式。完整代码见最后。</p><ul><li><p>使用方式</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br><span class="line">permissionHelper = PermissionHelper.attach(this);</span><br><span class="line">//申请权限</span><br><span class="line">permissionHelper.applyPermission(new String[]&#123;Manifest.permission.READ_CONTACTS&#125;, 101, new PermissionHelper.IPermissionCallback() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onPermissionsGranted(int requestCode, String[] permissions) &#123;</span><br><span class="line">               Toast.makeText(MainActivity.this, &quot;onPermissionsGranted&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onPermissionsDenied(int requestCode, String[] permissions) &#123;</span><br><span class="line">               Toast.makeText(MainActivity.this, &quot;onPermissionsDenied&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Android-6-运行时权限小结"><a href="#Android-6-运行时权限小结" class="headerlink" title="Android 6 运行时权限小结"></a>Android 6 运行时权限小结</h2><p>用了很多的第三方权限框架，都不是很顺手。由于最近项目里使用的框架存在一些问题，于是自己阅读了官方的文档，梳理了运行时权限相关的知识点，并形成了一个工具类供复用。</p><h3 id="权限的几种分类"><a href="#权限的几种分类" class="headerlink" title="权限的几种分类"></a>权限的几种分类</h3><p>在Android 6上系统将权限分为两种，一种是normal权限，另一种是dangerous权限。</p><p>对于normal权限 不会直接或者间接的涉及用户的隐私数据。申请这类权限直接在AndroidManifest.xml文件中声明。</p><p>dangerous权限，将会直接涉及到用户的隐私、敏感数据，在使用户的这类数据时，需要在程序运行时，向用户申请，只用当用户同意时才可以读取、访问用户的相关数据。</p><p>运行时申请的危险权限还需要在AndroidManifest.xml文件中，如果不声明的话，申请权限系统将会立刻拒绝。<br>如果使用运行时权限申请，而恰好AndroidManifest.xml文件中，一个权限都为声明，系统就会抛出错误，造成闪退，这应该是系统的一个强制性措施吧。</p><h4 id="权限分组"><a href="#权限分组" class="headerlink" title="权限分组"></a>权限分组</h4><pre><code>    //读写 日历    CALENDAR = new String[]&#123;            Manifest.permission.READ_CALENDAR,            Manifest.permission.WRITE_CALENDAR&#125;;    //摄像头    CAMERA = new String[]&#123;            Manifest.permission.CAMERA&#125;;     // 读取联系人 写入联系人    CONTACTS = new String[]&#123;            Manifest.permission.READ_CONTACTS,            Manifest.permission.WRITE_CONTACTS,            Manifest.permission.GET_ACCOUNTS&#125;;        //位置信息    LOCATION = new String[]&#123;            Manifest.permission.ACCESS_FINE_LOCATION,            Manifest.permission.ACCESS_COARSE_LOCATION&#125;;        //麦克风    MICROPHONE = new String[]&#123;            Manifest.permission.RECORD_AUDIO&#125;;        //读取电话状态 打电话 读写通话记录 处理来电    PHONE = new String[]&#123;            Manifest.permission.READ_PHONE_STATE,            Manifest.permission.CALL_PHONE,            Manifest.permission.READ_CALL_LOG,            Manifest.permission.WRITE_CALL_LOG,            Manifest.permission.USE_SIP,            Manifest.permission.PROCESS_OUTGOING_CALLS&#125;;     // 传感器    SENSORS = new String[]&#123;            Manifest.permission.BODY_SENSORS&#125;;     // 读写短信 收发短信    SMS = new String[]&#123;            Manifest.permission.SEND_SMS,            Manifest.permission.RECEIVE_SMS,            Manifest.permission.READ_SMS,            Manifest.permission.RECEIVE_WAP_PUSH,            Manifest.permission.RECEIVE_MMS&#125;;    //读写存储    STORAGE = new String[]&#123;            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;;</code></pre><h3 id="值得注意的地方"><a href="#值得注意的地方" class="headerlink" title="值得注意的地方"></a>值得注意的地方</h3><ul><li><p>特别需要targetSDKVersion的版本指定。当targetSDKVersion&lt;&#x3D;22时，无论程序是跑在Android 6以及高版本的手机上，还是还是 5版本的手机上，运行时权限申请都将被通过。只用targetSDKVersion&gt;&#x3D;23版本时，运行时权限才起作用。</p></li><li><p>用户上一分钟授予了某一个权限，并不代表用户这一分钟依然具有这一个权限！！！</p></li></ul><h3 id="Android-6-和-Android-O上的差异"><a href="#Android-6-和-Android-O上的差异" class="headerlink" title="Android 6 和 Android O上的差异"></a>Android 6 和 Android O上的差异</h3><p>在Android 6 系统版本上，如果申请了某一个组内的其中给一个权限，该组内所有的权限都被授予了程序。例如，用户授予程序READ_EXTERNAL_STORAGE 的权限，组内的WRITE_EXTERNAL_STORAGE也也一同被授予，如果程序在得到了READ_EXTERNAL_STORAGE权限之后去写入SD数据，直接写入是可行的，直到Android o，这种机制被系统推翻了。在Android O中程序程序在得到了READ_EXTERNAL_STORAGE权限之后需要往SD卡写入数据时，必须主动去申请WRITE_EXTERNAL_STORAGE<br>权限，此时，系统不会弹出让用户授权的对话框，系统将立刻授予程序该程序，如果不申请权限直接就写入的话，系统会抛出异常。</p><h3 id="Util类的使用"><a href="#Util类的使用" class="headerlink" title="Util类的使用"></a>Util类的使用</h3><h4 id="step-0"><a href="#step-0" class="headerlink" title="step 0"></a>step 0</h4><p>需要Activity 或者fragment实现util类中的回调PermissionCallback</p><pre><code> interface PermissionCallback &#123;    //用户授予了所有的权限    void onPermissionsGranted(int requestCode, String permissions[]);    //用户拒绝了权限申请    void onPermissionsDenied(int requestCode, String permissions[]);&#125;</code></pre><h4 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h4><p>检查是否需要向用户解释为什么需要申请该权限，只有当这个权限被用户拒绝授予过，而且未勾选“不再询问”的复选框时，该方法的返回值才会为true</p><pre><code>PermissionCompat.shouldShowRequestPermissionRationale(    this，    PermissionCompat.STORAGE）</code></pre><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>当上一个步骤的返回值为true时，表明用户已经拒绝授予某个权限，且未勾选不在询问的复选框，此时程序需要向用户解释说明为什么需要这个权限，例如，向用户弹个框解释，当用户点击了确定按钮时，去申请去权限。<br>如果上一个步骤的返回值为false，则可以直接去申请权限</p><pre><code>PermissionCompat.requestPermissions(this, requestCode,PermissionCompat.STORAGE);</code></pre><h4 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h4><p>实现Activity 或者fragment的onRequestPermissionsResult方法，并使用Util类中的方法分发返回结果。</p><pre><code>@Overridepublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123;    super.onRequestPermissionsResult(requestCode, permissions, grantResults);    PermissionCompat.onRequestPermissionsResult(this,requestCode,permissions,grantResults);&#125;</code></pre><h4 id="step-4"><a href="#step-4" class="headerlink" title="step 4"></a>step 4</h4><ul><li><p>当用户授予了权限时，在PermissionCallback的onPermissionsGranted回调方法中处理要做的工作。</p></li><li><p>当用户拒绝了某一个权限授予时，会回调PermissionCallback的onPermissionsDenied方法，可以在这个方法中检测，用户是否勾选了“不再询问”的复选框，如果用户勾选了，需要向用户解释需要改权限的理由，同时引导用户跳转到《设置》下的应用程序权限设置，给用户一个设置再次开启权限的入口。例如弹个框，当用户点击确定按钮时，跳转到用程序权限设置界面。</p><pre><code>PermissionCompat.showAppSetting(MainActivity.this,requestCode);</code></pre></li></ul><h4 id="step-5"><a href="#step-5" class="headerlink" title="step 5"></a>step 5</h4><p>在Activity 或者fragment的onActivityResult方法回调用处理应用权限的开启情况。 </p><p>需要注意的是，当用户在应用的权限设置界面打开某一个程序之后跳转到当前应用程序时（一直按返回键）会直接回调到onActivityResult，如果存在用户关闭某一个权限的情况下，再跳转回当前应用程序时（一直按返回键），会先导致当前应用的Activity重启，最后依然会回调到onActivityResult方法。</p><p>  demo地址</p><h2 id="最新版本代码："><a href="#最新版本代码：" class="headerlink" title="最新版本代码："></a>最新版本代码：</h2><pre><code>public class PermissionHelper extends Fragment &#123;private static final String FRAG_TAG = PermissionHelper.class.getCanonicalName();public static final String[] CALENDAR, CAMERA, CONTACTS, LOCATION, MICROPHONE, PHONE, SENSORS, SMS, STORAGE;static &#123;    //读写 日历    CALENDAR = new String[]&#123;            Manifest.permission.READ_CALENDAR,            Manifest.permission.WRITE_CALENDAR&#125;;    //摄像头    CAMERA = new String[]&#123;            Manifest.permission.CAMERA&#125;;    // 读取联系人 写入联系人    CONTACTS = new String[]&#123;            Manifest.permission.READ_CONTACTS,            Manifest.permission.WRITE_CONTACTS,            Manifest.permission.GET_ACCOUNTS&#125;;    //位置信息    LOCATION = new String[]&#123;            Manifest.permission.ACCESS_FINE_LOCATION,            Manifest.permission.ACCESS_COARSE_LOCATION&#125;;    //麦克风    MICROPHONE = new String[]&#123;            Manifest.permission.RECORD_AUDIO&#125;;    //读取电话状态 打电话 读写通话记录 处理来电    PHONE = new String[]&#123;            Manifest.permission.READ_PHONE_STATE,            Manifest.permission.CALL_PHONE,            Manifest.permission.READ_CALL_LOG,            Manifest.permission.WRITE_CALL_LOG,            Manifest.permission.USE_SIP,            Manifest.permission.PROCESS_OUTGOING_CALLS&#125;;    // 传感器    SENSORS = new String[]&#123;            Manifest.permission.BODY_SENSORS&#125;;    // 读写短信 收发短信    SMS = new String[]&#123;            Manifest.permission.SEND_SMS,            Manifest.permission.RECEIVE_SMS,            Manifest.permission.READ_SMS,            Manifest.permission.RECEIVE_WAP_PUSH,            Manifest.permission.RECEIVE_MMS&#125;;    //读写存储    STORAGE = new String[]&#123;            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;;&#125;private Activity mContext;private int mRequestCode;private IPermissionCallback mPermissionListener;public static &lt;ParentFrag extends Fragment &gt; PermissionHelper attach(ParentFrag parent) &#123;    return attach(parent.getChildFragmentManager());&#125;public static &lt;ParentActivity extends FragmentActivity &gt; PermissionHelper attach(ParentActivity parent) &#123;    return attach(parent.getSupportFragmentManager());&#125;private static PermissionHelper attach(FragmentManager fragmentManager) &#123;    PermissionHelper frag = (PermissionHelper) fragmentManager.findFragmentByTag(FRAG_TAG);    if (frag == null) &#123;        frag = new PermissionHelper();        fragmentManager.beginTransaction().add(frag, FRAG_TAG).commit();        //fragment在Activity的onreate中被attach之后就立即调用fragment的一些方法，需要如下代码，否则不需要        fragmentManager.executePendingTransactions();    &#125;    return frag;&#125;protected IPermissionCallback getParent() &#123;    Fragment parentFragment = getParentFragment();    if (parentFragment instanceof IPermissionCallback) &#123;        return (IPermissionCallback) parentFragment;    &#125; else &#123;        Activity activity = getActivity();        if (activity instanceof IPermissionCallback) &#123;            return (IPermissionCallback) activity;        &#125;    &#125;    return null;&#125;public void applyPermission(final String[] permissions, final int requestCode, final IPermissionCallback listener) &#123;    //版本检测    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) &#123;        listener.onPermissionsGranted(requestCode, permissions);        return;    &#125;    //被拒的权限    final List&lt;String&gt; deniedPermissions = findDeniedPermissions(permissions);    if (deniedPermissions.size() == 0) &#123;        listener.onPermissionsGranted(requestCode, permissions);        return;    &#125;    this.mRequestCode = requestCode;    this.mPermissionListener = listener;    //需要解释    List&lt;String&gt; rationalePermissions = hasShowRequestPermissionRationale(permissions);    if (rationalePermissions.size() == 0) &#123;        requestPermissions(deniedPermissions.toArray(new String[deniedPermissions.size()]), requestCode);    &#125; else &#123;        // TODO: 被用户拒绝过但是没有勾选再也不提示的checkbox，需要向用户解释说明为什么需要权限        AlertDialog dialog = new AlertDialog.Builder(mContext).setTitle(&quot;权限申请提示&quot;).setMessage(&quot;需要使用权限才能正常使用，是否授权？&quot;)                .setNegativeButton(&quot;cancle&quot;, new DialogInterface.OnClickListener() &#123;                    @Override                    public void onClick(DialogInterface dialog, int which) &#123;                        if (mPermissionListener != null) &#123;                            mPermissionListener.onPermissionsDenied(requestCode, permissions);                        &#125;                    &#125;                &#125;)                .setPositiveButton(&quot;confirm&quot;, new DialogInterface.OnClickListener() &#123;                    @Override                    public void onClick(DialogInterface dialog, int which) &#123;                        requestPermissions(deniedPermissions.toArray(new String[deniedPermissions.size()]), requestCode);                    &#125;                &#125;).create();        dialog.show();    &#125;&#125;private List&lt;String&gt; hasShowRequestPermissionRationale(String... permission) &#123;    List&lt;String&gt; rationalePermissions = new ArrayList&lt;&gt;();    for (String value : permission) &#123;        if (shouldShowRequestPermissionRationale(value)) &#123;            rationalePermissions.add(value);        &#125;    &#125;    return rationalePermissions;&#125;private List&lt;String&gt; findDeniedPermissions(String... permission) &#123;    List&lt;String&gt; denyPermissions = new ArrayList&lt;&gt;();    for (String value : permission) &#123;        if (ContextCompat.checkSelfPermission(mContext, value) != PackageManager.PERMISSION_GRANTED) &#123;            denyPermissions.add(value);        &#125;    &#125;    return denyPermissions;&#125;@Overridepublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123;    if (requestCode == this.mRequestCode) &#123;        List&lt;String&gt; grantPermissions = new ArrayList&lt;&gt;();        List&lt;String&gt; deniedPermissions = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; grantResults.length; i++) &#123;            if (grantResults[i] != PackageManager.PERMISSION_GRANTED) &#123;                deniedPermissions.add(permissions[i]);            &#125; else &#123;                grantPermissions.add(permissions[i]);            &#125;        &#125;        if (deniedPermissions.size() == 0) &#123;            if (mPermissionListener != null) &#123;                mPermissionListener.onPermissionsGranted(requestCode, grantPermissions.toArray(new String[grantPermissions.size()]));            &#125;        &#125; else &#123;            if (mPermissionListener != null) &#123;                mPermissionListener.onPermissionsDenied(requestCode, deniedPermissions.toArray(new String[deniedPermissions.size()]));            &#125;        &#125;    &#125;&#125;@Overridepublic void onAttach(Context context) &#123;    super.onAttach(context);    mContext = (Activity) context;&#125;@Overridepublic void onDetach() &#123;    super.onDetach();    mContext = null;    mPermissionListener = null;&#125;public interface IPermissionCallback &#123;    //授予了所有的权限    void onPermissionsGranted(int requestCode, String permissions[]);    //拒绝的权限 考虑再该回调中指引用户打开系统设置界面，引导用户打开权限    void onPermissionsDenied(int requestCode, String permissions[]);&#125;&#125;                                </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;重大更改&quot;&gt;&lt;a href=&quot;#重大更改&quot; class=&quot;headerlink&quot; title=&quot;重大更改&quot;&gt;&lt;/a&gt;重大更改&lt;/h2&gt;&lt;p&gt;过了很久来找个Util类，发现已经找不到了，于是使用NON-UI-fragment重新实现了一遍。之前的Util需要5个步骤</summary>
      
    
    
    
    
    <category term="non-ui-framgment headlessfragment 动态权限" scheme="https://yndongyong.github.io/tags/non-ui-framgment-headlessfragment-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Android异步消息通信小节</title>
    <link href="https://yndongyong.github.io/2017/07/09/Android%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1%E5%B0%8F%E8%8A%82/"/>
    <id>https://yndongyong.github.io/2017/07/09/Android%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1%E5%B0%8F%E8%8A%82/</id>
    <published>2017-07-09T14:05:35.000Z</published>
    <updated>2017-07-09T14:11:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>试着从整体的角度上去简述Handler、Looper、MessageQueue<br>三者之间的关系，以及使用这三者构建的Android系统的异步消息通信机制。</p><p>三者之间的关系,一图胜千言。</p><p><img src="http://image.lxway.com/upload/1/36/136c06769c6d0a67f1f05d6fc8e504ac.png" alt="Handler与Looper与MessageQueue的关系"></p><p>一些术语：</p><ul><li>Message : 线程间通信的消息载体，存储于MessageQueue中。</li><li>MessageQueue : 负责存储Message对象，每个线程只能关联一个MessageQueue。</li><li>Looper :无限消息循环，不停的检索MessageQueue，每个线程只能关联一个Looper。</li><li>Handler：负责消息的分发（将message添加到MessageQueue中）和处理。每个线程可以关联多个Handler。</li></ul><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Android 应用初始化的时候，会创建一个主线，通常称为Main Thread,亦或是UI线程。在UI线程的初始化过程中，会创建一个Looper， 同时将此Looper与UI线程绑定，该Looper负责管理应用程序对象包括Activity、以及Activity的window、BroadcastReciver等的通信，一个线程只会有一个Looper实例。</p><p>在Looper实例的创建过程中，又会创建一个MessageQueue对象。MessageQueue 负责存储Message，但是Message的添加不是直接通过MessageQueue，而是通过与Looper对象的相关联的Handler。<br>MessageQueue是消息存储的场所，</p><p>Looper无线循环的检索MessageQueue中是否有需要处理的消息，检索到有message时，执行message的target(即Handler)的dispatchMessage方法。</p><p>Handler对象在创建时，默认会关联到创建它的当前线程以及当前线程的MessageQueue。默认的线程是不具有Looper以及MessageQueue对象的。使用Handler对象可以将Message和runnable投递到与当前线程相关联的MessageQueue中，同时，可以在message出栈的时候对其进行处理。</p><h3 id="Handler的两个主要作用"><a href="#Handler的两个主要作用" class="headerlink" title="Handler的两个主要作用"></a>Handler的两个主要作用</h3><ul><li><p>a. 安排在将来的某个时间点执行message或者runnable。</p></li><li><p>b. 跨线程通信，可以通过其实现子线程和UI线程之间的通信。</p></li></ul><h3 id="在子线程更新UI的几种方式"><a href="#在子线程更新UI的几种方式" class="headerlink" title="在子线程更新UI的几种方式"></a>在子线程更新UI的几种方式</h3><ul><li>a. 使用Handler的send or post 系列的方法。</li><li>b. 在Activity 中使用runUiOnThread(runnable)方法</li><li>c. 使用View.post(runnable)方法</li></ul><h3 id="一些值得注意的地方"><a href="#一些值得注意的地方" class="headerlink" title="一些值得注意的地方"></a>一些值得注意的地方</h3><ul><li>a. 如果想要在自己创建的Thread中使用Looper，可以使用系统提供的HandlerThread类。</li><li>b. 慎用Handler，Handler过长的生命周期会一直持有Activity，造成内存泄露。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;试着从整体的角度上去简述Handler、Looper、MessageQueue&lt;br&gt;三者之间的关系，以及使用这三者构建的Android系统的异步消息通信机制。&lt;/p&gt;
&lt;p&gt;三者之间的关系,一图胜千言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.lxwa</summary>
      
    
    
    
    
    <category term="Android,Handler,MessageQueue,Looper" scheme="https://yndongyong.github.io/tags/Android-Handler-MessageQueue-Looper/"/>
    
  </entry>
  
  <entry>
    <title>Activity生命周期小节</title>
    <link href="https://yndongyong.github.io/2017/07/05/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%B0%8F%E8%8A%82/"/>
    <id>https://yndongyong.github.io/2017/07/05/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%B0%8F%E8%8A%82/</id>
    <published>2017-07-05T14:03:42.000Z</published>
    <updated>2022-04-20T03:16:37.530Z</updated>
    
    <content type="html"><![CDATA[<p>Activity被设计用来与用户进行交互，界面元素的展示、交互动效、业务逻辑等都将在这里依赖业务逻辑以及其间的关系进行编码。<br>Activity是整个应用生命周期的重要组成部分。所有的activity都会被 Activity Stack进行管理，当一个新的Activity被启动，它将会被系统放入Activity Stack 并且处于栈顶，而之前的Activity依然停留在Activity Stack中，处于新的Activity之下。</p><h3 id="Activity的几种状态"><a href="#Activity的几种状态" class="headerlink" title="Activity的几种状态"></a>Activity的几种状态</h3><ul><li>running  Activity对用户可见，处于屏幕的最前，即Activity Stack的栈顶</li><li>paused  当前Activity被dialog和或者非全屏的Activity覆盖，此时，Activity对于用户可能可见，且不再具有与用户交互的能力。</li><li>stopped 另一个Activity来到了前台，当前的Activity完全被覆盖对用户不可见。</li><li>destroyed Activity处于 paused或者stopped状态时被系统回收了。</li></ul><h3 id="Activity向开发者提供了一整个完整的生命周期hook函数"><a href="#Activity向开发者提供了一整个完整的生命周期hook函数" class="headerlink" title="Activity向开发者提供了一整个完整的生命周期hook函数"></a>Activity向开发者提供了一整个完整的生命周期hook函数</h3><p> <img src="http://ww1.sinaimg.cn/mw690/a0b1fa45gy1fha7psnvraj20e90ifmz4.jpg" alt="Activity生命周期图"></p><p>onCreate(bundle) -&gt; onStart() -&gt; onResume() -&gt; onPause() -&gt;onStop() -&gt; onDestroy()</p><p>可见的生命周期：onStart() 与onStop() 两个函数调用之前的这段时间，Activity对于用户是可见的。</p><p>前台生命周期：onResume() 与 onPause() 两个函数发生调用的这段时间内，Activity是处于<strong>前台</strong>的。</p><ul><li><p>onCreate() 所有的Activity对需要实现onCreate(bundle)方法，在这里为window 设置ui，绑定数据。</p></li><li><p>onStart ()  Activity 即将进入前台被用户可见。</p></li><li><p>onResume()  Activiy进入前台且能够与用户交互。</p></li><li><p>onPause()  系统开始调用另一个Activity的生命周期；可以在在这里进行数据的保存，持久化，停止动画，释放CPU资源等的轻量级操作。<strong>只有当这个方法放回之后系统才会调用另一个Activity的生命周期</strong>，所以请不要在该方法里执行耗时的操作，以避免造成UI卡顿。</p></li><li><p>onStop()  Activity 不在被用户可见，新的Activity已经处于running状态，可以在这里了持久化一些数据，释放内存资源。</p></li><li><p>onDestroy() Activity 进入了destroyed的状态 ，被调用了finish方法或者被系统回收内存而被清理。</p></li><li><p>onRestart() Activity 进入stopped 状态时，重新被带入前台。</p><p>在实现这些生命周期hook函数时，<strong>总是需要调用父类的方法</strong>。</p></li></ul><h3 id="各种情况下Activity生命周期的调用顺序"><a href="#各种情况下Activity生命周期的调用顺序" class="headerlink" title="各种情况下Activity生命周期的调用顺序###"></a>各种情况下Activity生命周期的调用顺序###</h3><ul><li><p>当Activity被启动时各个生命周期方法的调用顺序</p><p> <img src="http://oav23hfp9.bkt.clouddn.com/act%E8%A2%AB%E6%89%93%E5%BC%80%E6%97%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="启动Activity"></p></li><li><p>当Activity处于running状态按下返回键时</p><p><img src="http://oav23hfp9.bkt.clouddn.com/17-7-6/act%E6%8C%89%E8%BF%94%E5%9B%9E%E9%94%AE.png" alt="按下返回键"></p></li><li><p>当Activity处于running状态按下Home键时</p><p><img src="http://oav23hfp9.bkt.clouddn.com/17-7-6/act%E6%8C%89%E4%B8%8Bhome%E9%94%AE.png" alt="按下Home键时"></p></li><li><p>从多任务切换器切换时</p><p> <img src="http://oav23hfp9.bkt.clouddn.com/17-7-6/%E6%8C%89%E4%B8%8BHome%E9%94%AE%EF%BC%8C%E4%BB%8E%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%88%87%E6%8D%A2%E5%9B%9E.png"></p></li><li><p>当Activity处于running状态切换到另一个Activity时</p><p><img src="http://oav23hfp9.bkt.clouddn.com/17-7-6/%E5%88%87%E6%8D%A2%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AAact.png"></p></li><li><p>从另一个Activity切换回时</p><p><img src="http://oav23hfp9.bkt.clouddn.com/17-7-6/%E4%BB%8E%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E5%88%87%E5%9B%9E%E6%97%B6.png"></p></li><li><p>按下锁屏键</p><p><img src="http://oav23hfp9.bkt.clouddn.com/17-7-6/act%E6%8C%89%E4%B8%8Bhome%E9%94%AE.png" alt="按下Home键时"></p></li><li><p>解锁时</p></li></ul><p><img src="http://oav23hfp9.bkt.clouddn.com/17-7-6/%E6%8C%89%E4%B8%8BHome%E9%94%AE%EF%BC%8C%E4%BB%8E%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%88%87%E6%8D%A2%E5%9B%9E.png"></p><h3 id="Configuration-changes-对生命周期的影响"><a href="#Configuration-changes-对生命周期的影响" class="headerlink" title="Configuration changes 对生命周期的影响"></a>Configuration changes 对生命周期的影响</h3><p>设备的configuration 发生改变时，都会最先通知到Activity处，系统会将Activity执行destroy操作，然后重新激活Activity，会重走一遍生命周期。</p><p>在新的系统版本里，由竖屏切换到横屏，或者横屏切换到竖屏都只会重走一遍生命周期，这个时候控件的一些状态会被保存，重走生命周期的时候状态会被恢复，但是用户的输入等数据不会被系统保存，需要开发者自己处理。</p><p>有些时候需要我们绕过重走生命周期的流程，Manifest文件中，为Activity配置属性：android:configChanges;可以为该属性指定很多种值，已达到当这些值对应的情况改变打的时候，不重走生命周期，而是回调到Activity的onConfigurationChanged方法。</p><p>以下配置可以达到<strong>横竖屏切换时，不重启Activity</strong>的效果：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:configChanges=<span class="string">&quot;orientation|keyboardHidden|screenSize&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Activity被设计用来与用户进行交互，界面元素的展示、交互动效、业务逻辑等都将在这里依赖业务逻辑以及其间的关系进行编码。&lt;br&gt;Activity是整个应用生命周期的重要组成部分。所有的activity都会被 Activity Stack进行管理，当一个新的Activit</summary>
      
    
    
    
    
    <category term="Android" scheme="https://yndongyong.github.io/tags/Android/"/>
    
    <category term="Activity" scheme="https://yndongyong.github.io/tags/Activity/"/>
    
    <category term="生命周期" scheme="https://yndongyong.github.io/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
</feed>
